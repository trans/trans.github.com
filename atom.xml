<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>7R4N5C0D3</title>
 <link href="http://trans.github.com/atom.xml" rel="self"/>
 <link href="http://trans.github.com/"/>
 <updated>2012-06-18T11:25:28-04:00</updated>
 <id>http://trans.github.com/</id>
 <author>
   <name>Trans</name>
   <email>transfire@gmail.com</email>
 </author>

 
 <entry>
   <title>Kill The Proxy And Save Toplevel</title>
   <link href="http://trans.github.com/2012/06/17/kill-the-proxy-and-save-toplevel.html"/>
   <updated>2012-06-17T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/06/17/kill-the-proxy-and-save-toplevel</id>
   <content type="html">&lt;h1&gt;Kill the Proxy and Save Toplevel&lt;/h1&gt;

&lt;p&gt;One of the more curious aspects of Ruby is the &amp;quot;top level&amp;quot; object, otherwise known as &lt;code&gt;main&lt;/code&gt;. &lt;a class=&quot;readmore&quot; href=&quot;/2012/06/17/kill-the-proxy-and-save-toplevel.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Autoload Smells Like Denmark</title>
   <link href="http://trans.github.com/2012/06/14/autoload-smells-like-denmark.html"/>
   <updated>2012-06-14T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/06/14/autoload-smells-like-denmark</id>
   <content type="html">&lt;h1&gt;Autoload Smells Like Denmark&lt;/h1&gt;

&lt;p&gt;Ruby has a very cool feature called &lt;em&gt;autoload&lt;/em&gt;. With autoload, any undefined constant can automatically trigger the loading of a library file. Effectively this gives Ruby a convenient means of lazy loading. For example, lets say some of our app&amp;#39;s executable scripts ultimately use the ANSI library, but others do not. We can use &lt;code&gt;autoload&lt;/code&gt; to only load the ANSI library when it is needed. &lt;a class=&quot;readmore&quot; href=&quot;/2012/06/14/autoload-smells-like-denmark.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Instance Variables As Syntax Sugar</title>
   <link href="http://trans.github.com/2012/06/13/instance-variables-as-syntax-sugar.html"/>
   <updated>2012-06-13T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/06/13/instance-variables-as-syntax-sugar</id>
   <content type="html">&lt;h1&gt;Instance Variables as Syntax Sugar&lt;/h1&gt;

&lt;p&gt;What are instance variables? If we think of them as a single unit we note that they represent an object &lt;em&gt;state&lt;/em&gt;, which as a data structure is really nothing more than a &lt;em&gt;hash&lt;/em&gt;. Indeed, it is quite feasible to forgo the use of instance variables altogether save one, to serve as the object&amp;#39;s state. &lt;a class=&quot;readmore&quot; href=&quot;/2012/06/13/instance-variables-as-syntax-sugar.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Real Metal</title>
   <link href="http://trans.github.com/2012/05/23/real-metal.html"/>
   <updated>2012-05-23T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/05/23/real-metal</id>
   <content type="html">&lt;h1&gt;Real Metal&lt;/h1&gt;

&lt;p&gt;One of the most regarded capabilities of Ruby, in contrast to many other programming languages, is its powerful meta-programming chops. While not every aspect of the language is meta-programmable, the vast majority of Ruby is. But despite its prowess, there is a serious weaknesses in its design: &lt;em&gt;The functions on which meta-coders depend have no guarantee&lt;/em&gt;.  &lt;a class=&quot;readmore&quot; href=&quot;/2012/05/23/real-metal.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Problem With Programming</title>
   <link href="http://trans.github.com/2012/05/11/the-problem-with-programming.html"/>
   <updated>2012-05-11T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/05/11/the-problem-with-programming</id>
   <content type="html">&lt;h1&gt;[DRAFT] THE PROBLEM WITH PROGRAMMING&lt;/h1&gt;

&lt;p&gt;Programming is the art of tying thought to syllogism. The programmer must take an often nebulous idea and encode it into a symbolic logical language. By it&amp;#39;s very nature then, there is gap that must be breached between the thoughts of the programmer (harder still the thoughts of his client) and the 
construction of their autonomic model. This then is the problem of programming: finding ways 
to shrink that gap. &lt;a class=&quot;readmore&quot; href=&quot;/2012/05/11/the-problem-with-programming.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Proper Construction Of A Class</title>
   <link href="http://trans.github.com/2012/05/09/proper-construction-of-a-class.html"/>
   <updated>2012-05-09T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/05/09/proper-construction-of-a-class</id>
   <content type="html">&lt;h1&gt;The Proper Construction of a Class [DRAFT]&lt;/h1&gt;

&lt;p&gt;A general principle of good programming is SOC, Separation of Concerns. SOC
is a general rule that helps us break code up into logical groups around a single concern.
More often the principle is applied at a systems level via separate packages, tools, libraries
or components. But the principle is equally applicable to a class itself. &lt;a class=&quot;readmore&quot; href=&quot;/2012/05/09/proper-construction-of-a-class.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>All Quiet On The Google Front</title>
   <link href="http://trans.github.com/2012/04/14/all-quiet-on-the-google-front.html"/>
   <updated>2012-04-14T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/04/14/all-quiet-on-the-google-front</id>
   <content type="html">&lt;h1&gt;All Quiet on the Google Front&lt;/h1&gt;

&lt;p&gt;As I write this I am am on hold to Google main line. I&amp;#39;ve been on hold for nearly an hour. &lt;i&gt;&amp;quot;... Your call is important to us and we appreciate your patience. Please stay on the line and our next available representative will be with you shortly...&amp;quot;&lt;/i&gt;  &lt;a class=&quot;readmore&quot; href=&quot;/2012/04/14/all-quiet-on-the-google-front.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Peanut Butter And Chocolate Handlebars</title>
   <link href="http://trans.github.com/2012/04/13/peanut-butter-and-chocolate-handlebars.html"/>
   <updated>2012-04-13T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/04/13/peanut-butter-and-chocolate-handlebars</id>
   <content type="html">&lt;h1&gt;Peanut Butter and Chocolate Handlebars&lt;/h1&gt;

&lt;p&gt;This week I&amp;#39;ve been working on the &lt;a href=&quot;http://github.com/rubyworks/shomen&quot;&gt;Shomen&lt;/a&gt; documentation project. In particular I&amp;#39;ve been converting the templates of the three web-based documentation viewers I&amp;#39;ve created to compiled templates to boost rendering speed. Originally these viewers were using &lt;a href=&quot;http://aefxx.com/jquery-plugins/jqote2/&quot;&gt;jqote2&lt;/a&gt; in one case (&lt;a href=&quot;http://github.com/rubyworks/hypervisor&quot;&gt;hypervisor&lt;/a&gt;) and &lt;a href=&quot;https://github.com/jquery/jquery-tmpl&quot;&gt;jquery-tmpl&lt;/a&gt; in the other two cases (&lt;a href=&quot;http://github.com/rubyworks/rebecca&quot;&gt;rebecca&lt;/a&gt; and &lt;a href=&quot;http://github.com/rubyworks/rubyfaux&quot;&gt;rubyfaux&lt;/a&gt;). While ascertaining what compilation solution to use, I tried the &lt;a href=&quot;https://github.com/wookiehangover/jquery-tmpl-jst&quot;&gt;jquery-tmpl-jst&lt;/a&gt; for compiling the later two, but immediately ran into fundamental errors. (Sorry, I don&amp;#39;t recollect exactly what the errors were now). They were problematic enough to send me looking else where, and ultimately I decided on &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt;. &lt;a class=&quot;readmore&quot; href=&quot;/2012/04/13/peanut-butter-and-chocolate-handlebars.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configuration Rodeo</title>
   <link href="http://trans.github.com/2012/03/21/configuration-rodeo.html"/>
   <updated>2012-03-21T00:00:00-04:00</updated>
   <id>http://trans.github.com/2012/03/21/configuration-rodeo</id>
   <content type="html">&lt;h1&gt;Configuration Rodeo&lt;/h1&gt;

&lt;p&gt;The history of configuration file conventions for Ruby projects has not been a particularly conclusive one. No one pervasive convention has ever developed. No developer has ever laid down a clear set of rules of engagement that we all can agree are worthy of follow. Rather, the realm of the developer in working out how to handle configuration for their project tools still smacks a bit of the Wild West.  &lt;a class=&quot;readmore&quot; href=&quot;/2012/03/21/configuration-rodeo.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Setting Priorities Trumps Warnings</title>
   <link href="http://trans.github.com/2012/02/25/setting-priorities-trumps-warnings.html"/>
   <updated>2012-02-25T00:00:00-05:00</updated>
   <id>http://trans.github.com/2012/02/25/setting-priorities-trumps-warnings</id>
   <content type="html">&lt;h1&gt;Setting Priorities Trumps Warnings&lt;/h1&gt;

&lt;p&gt;Today I had to consider how best to handle omission exceptions in the context of test frameworks, and their use case to mark &lt;em&gt;pending tests&lt;/em&gt;. In the course of doing so, I realized there are at least two reasonable levels of omission, those there are &amp;quot;ASAP&amp;quot; and those that are &amp;quot;NSM&amp;quot; (Not So Much). Where as other frameworks used their own specially defined classes for these, e.g &lt;code&gt;Pending&lt;/code&gt; and &lt;code&gt;Omission&lt;/code&gt;, my approach is to re-utilize Ruby&amp;#39;s own &lt;code&gt;NotImplementedError&lt;/code&gt;. But then I had to consider how to differentiate between these priorities. &lt;a class=&quot;readmore&quot; href=&quot;/2012/02/25/setting-priorities-trumps-warnings.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rubys Unexceptional Exception Constructor</title>
   <link href="http://trans.github.com/2012/01/19/rubys-unexceptional-exception-constructor.html"/>
   <updated>2012-01-19T00:00:00-05:00</updated>
   <id>http://trans.github.com/2012/01/19/rubys-unexceptional-exception-constructor</id>
   <content type="html">&lt;p&gt;You would think after all this time Ruby&amp;#39;s Exception class would be a rather robust and clearly comprehensible class. &lt;a class=&quot;readmore&quot; href=&quot;/2012/01/19/rubys-unexceptional-exception-constructor.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Lazy Plus Enumerable Begats Denumerable</title>
   <link href="http://trans.github.com/2011/10/04/lazy-plus-enumerable-begats-denumerable.html"/>
   <updated>2011-10-04T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/10/04/lazy-plus-enumerable-begats-denumerable</id>
   <content type="html">&lt;h1&gt;Lazy + Enumerable = Denumerable&lt;/h1&gt;

&lt;p&gt;All Rubyists know and love Enumerable. It&amp;#39;s the really the showcase of Ruby&amp;#39;s mixin system. Some Rubyists also know and appreciate &lt;a href=&quot;http://moonbase.rydia.net/software/lazy.rb/&quot;&gt;lazy.rb&lt;/a&gt; MenTaLguY&amp;#39;s excellent lazy evaluation library. But did you know there is library that essentially cross-breeds the ideas of both? It&amp;#39;s called &lt;a href=&quot;http://github.com/rubyworks/facets/blob/master/lib/core/facets/denumerable.rb&quot;&gt;Denumerable&lt;/a&gt; and is included in Ruby Facets (&lt;code&gt;require &amp;#39;facets/denumerable&amp;#39;&lt;/code&gt;). &lt;a class=&quot;readmore&quot; href=&quot;/2011/10/04/lazy-plus-enumerable-begats-denumerable.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Indentured Stringitude</title>
   <link href="http://trans.github.com/2011/10/02/indentured-stringitude.html"/>
   <updated>2011-10-02T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/10/02/indentured-stringitude</id>
   <content type="html">&lt;h1&gt;Indentured Stringitude&lt;/h1&gt;

&lt;p&gt;One of the great things about Ruby is the extensive collection of methods
available to the core classes. Of these the String class reigns supreme with
over 100 methods from which to make good use. Among these methods are those we
all use almost every time a string is laid to editor, such as #strip, #+ and #&amp;lt;&amp;lt;.
Others are present that have more specific but important uses, such as #lines, #scan
and #getbyte. There are even a few that can leave one scratching ones head
a bit trying to fathom the usecase, such as #sum. &lt;a class=&quot;readmore&quot; href=&quot;/2011/10/02/indentured-stringitude.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Is It An Attribute</title>
   <link href="http://trans.github.com/2011/09/10/is-it-an-attribute.html"/>
   <updated>2011-09-10T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/09/10/is-it-an-attribute</id>
   <content type="html">&lt;h1&gt;Is it an Attribute?&lt;/h1&gt;

&lt;p&gt;What exactly is an attribute? From the standpoint of OOP, a Ruby attribute is 
intended to be what is generally referred to as an &lt;i&gt;accessor method&lt;/i&gt;.
An accessor method is a means of direct access to an object&amp;#39;s underlying state.
In other words, it is a method for direct access to an instance variable. And
that is exactly what Ruby&amp;#39;s helper class methods, i.e. &lt;code&gt;attr&lt;/code&gt;, &lt;code&gt;attr_reader&lt;/code&gt;,
&lt;code&gt;attr_writer&lt;/code&gt; and &lt;code&gt;attr_accessor&lt;/code&gt;, achieve. &lt;a class=&quot;readmore&quot; href=&quot;/2011/09/10/is-it-an-attribute.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby Heart Higher Order Functions</title>
   <link href="http://trans.github.com/2011/09/07/ruby-heart-higher-order-functions.html"/>
   <updated>2011-09-07T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/09/07/ruby-heart-higher-order-functions</id>
   <content type="html">&lt;h1&gt;Ruby Heart High-Order Functions&lt;/h1&gt;

&lt;p&gt;Ruby Facets has a class called &lt;a href=&quot;http://rubyworks.github.com/rubyfaux/?doc=http://rubyworks.github.com/facets/docs/facets-2.9.3/core.json#api-class-Functor&quot;&gt;Functor&lt;/a&gt;. In common computer science parlance &amp;quot;functor&amp;quot; simply means an objectified function. Ruby already has more than it&amp;#39;s share of these with Method, Proc and blocks. So what does Functor bring to the table? Its a bit more that just a first-class function. Rather, it is a &lt;i&gt;higher-order function&lt;/i&gt;. What it allows us to do is define a function that responds dynamically to a message call. Here is a very basic example to clarify the idea. &lt;a class=&quot;readmore&quot; href=&quot;/2011/09/07/ruby-heart-higher-order-functions.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>On The Meaninglessness Of Class Vs Module</title>
   <link href="http://trans.github.com/2011/09/05/on-the-meaninglessness-of-class-vs-module.html"/>
   <updated>2011-09-05T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/09/05/on-the-meaninglessness-of-class-vs-module</id>
   <content type="html">&lt;h1&gt;Fear Not the Wereclass&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;DRAFT&lt;/strong&gt; &lt;a class=&quot;readmore&quot; href=&quot;/2011/09/05/on-the-meaninglessness-of-class-vs-module.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>We Dont Need No Stinking Modules</title>
   <link href="http://trans.github.com/2011/07/09/we-dont-need-no-stinking-modules.html"/>
   <updated>2011-07-09T00:00:00-04:00</updated>
   <id>http://trans.github.com/2011/07/09/we-dont-need-no-stinking-modules</id>
   <content type="html">&lt;h1&gt;We Don&amp;#39;t Need No Stinking Modules&lt;/h1&gt;

&lt;p&gt;Among experienced developers you will hear no end of praise for delegation. All things considered, it is the most powerful, flexible and controllable means of incorporating reusable behaviors. Even so, I recollect that I once read, no object-oriented programming language utilized delegation as it&amp;#39;s only means of handling modules. &lt;a class=&quot;readmore&quot; href=&quot;/2011/07/09/we-dont-need-no-stinking-modules.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby Aop Made Simple</title>
   <link href="http://trans.github.com/2010/10/13/ruby-aop-made-simple.html"/>
   <updated>2010-10-13T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/10/13/ruby-aop-made-simple</id>
   <content type="html">&lt;h1&gt;Ruby AOP Made Easy&lt;/h1&gt;

&lt;h2&gt;Quick Recap&lt;/h2&gt;

&lt;p&gt;Aspect Oriented Programming (AOP) is a topic I have spent a fair amount of
time contemplating. I, along with Peter VanBroekhoven, developed
the concept of Cut-based AOP back in &lt;code&gt;05-&lt;/code&gt;06. A limited &amp;quot;toy&amp;quot; implementation of
which can be had by installing the &lt;code&gt;cuts&lt;/code&gt; gem. The basic idea behind Cut-based
AOP is the &lt;i&gt;transparent subclass&lt;/i&gt;, a.k.a. the &lt;em&gt;cut&lt;/em&gt;, which is essentially
a subclass that subsumes the role of the class it effects without the programmer
needing any knowledge of it doing do. In this way, the cut serves as the atomic
construct in a purely object-oriented appraoch to AOP. You can read more about it
&lt;a href=&quot;http://github.com/rubyworks/cuts/blob/master/RCR.textile&quot;&gt;here&lt;/a&gt;. &lt;a class=&quot;readmore&quot; href=&quot;/2010/10/13/ruby-aop-made-simple.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Do The Right Thing Git Porcelain</title>
   <link href="http://trans.github.com/2010/06/04/do-the-right-thing-git-porcelain.html"/>
   <updated>2010-06-04T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/06/04/do-the-right-thing-git-porcelain</id>
   <content type="html">&lt;h1&gt;The &amp;quot;Do The Right Thing&amp;quot; Git Porcelain&lt;/h1&gt;

&lt;p&gt;Before making any changes to a program, a good developer will make an entry in an issue tracker and then create a separate branch in which to handle the issue. Only then making the necessary changes and finally merge the changes into to the master branch when they are ready. All before finally marking off the issue as complete. &lt;a class=&quot;readmore&quot; href=&quot;/2010/06/04/do-the-right-thing-git-porcelain.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Xdg Next Generation</title>
   <link href="http://trans.github.com/2010/06/02/xdg-next-generation.html"/>
   <updated>2010-06-02T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/06/02/xdg-next-generation</id>
   <content type="html">&lt;h1&gt;XDG NG&lt;/h1&gt;

&lt;p&gt;I can never stress enough the value of using the XDG directory standard to
developers. This is one of those standards that can only really benefit us
all if enough developers truly care to make a better eco-system. &lt;a class=&quot;readmore&quot; href=&quot;/2010/06/02/xdg-next-generation.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Second Look At Bundler</title>
   <link href="http://trans.github.com/2010/05/19/a-second-look-at-bundler.html"/>
   <updated>2010-05-19T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/05/19/a-second-look-at-bundler</id>
   <content type="html">&lt;h1&gt;A Second Look at Bundler&lt;/h1&gt;

&lt;p&gt;A few days ago I wrote an article on my concerns with Bundler. Since then I&amp;#39;ve received enough feedback to refine my thoughts. My opinion that the Ruby/Rails community is on a &amp;quot;crazy train&amp;quot; with regards to Bundler has everything to do with state of complexity of Rails code these days and it&amp;#39;s infiltration into plain vanilla Ruby projects. Of course, Bundler&amp;#39;s intent is to do just the opposite, but such is the danger of new technologies that we must be cautious of inevitable unexpected consequences. So, taking the feedback into account, here&amp;#39;s a better breakdown of the ups and downs of Bundler as I now see them. &lt;a class=&quot;readmore&quot; href=&quot;/2010/05/19/a-second-look-at-bundler.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Gem Crazy</title>
   <link href="http://trans.github.com/2010/05/15/gem-crazy.html"/>
   <updated>2010-05-15T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/05/15/gem-crazy</id>
   <content type="html">&lt;h1&gt;Gem Crazy&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;I believe the Ruby community may have finally gone off the rails in it&amp;#39;s collective
crazy train.&lt;/b&gt; I have been reading about &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt;,
the spiffy new RubyGems manager to be default part of Rails 3.0, and I can&amp;#39;t help but
wonder what track we were even on. &lt;a class=&quot;readmore&quot; href=&quot;/2010/05/15/gem-crazy.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Directory Based Configuration</title>
   <link href="http://trans.github.com/2010/05/13/directory-based-configuration.html"/>
   <updated>2010-05-13T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/05/13/directory-based-configuration</id>
   <content type="html">&lt;h1&gt;Directory-based Configuration&lt;/h1&gt;

&lt;p&gt;With regards to &lt;a href=&quot;http://proutils.github.com/pom&quot;&gt;POM&lt;/a&gt;, 
the most cumbersome issue I have had to struggle with over the course
of its long and somewhat painful development, is the question of
configuration storage. You see, many years ago I hit upon the idea of
using the file system itself as a &amp;quot;hash&amp;quot; for heirarchical storage.
In other words, instead of using a YAML or JSON or an INI file, POM could
use the file system itself. &lt;a class=&quot;readmore&quot; href=&quot;/2010/05/13/directory-based-configuration.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Case For Module Inheritance</title>
   <link href="http://trans.github.com/2010/04/13/a-case-for-module-inheritance.html"/>
   <updated>2010-04-13T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/04/13/a-case-for-module-inheritance</id>
   <content type="html">&lt;h1&gt;A Case for Module Inheritance&lt;/h1&gt;

&lt;p&gt;I love beautifully written code. Unfortunately the realities of the
language sometimes clash with requirements of the implementation. While
Ruby goes a long way toward making beautifully written code common place.
It still has some shortcomings I&amp;#39;d like to see improved. &lt;a class=&quot;readmore&quot; href=&quot;/2010/04/13/a-case-for-module-inheritance.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Gutopia Revisited</title>
   <link href="http://trans.github.com/2010/03/20/gutopia-revisited.html"/>
   <updated>2010-03-20T00:00:00-04:00</updated>
   <id>http://trans.github.com/2010/03/20/gutopia-revisited</id>
   <content type="html">&lt;h1&gt;GUtopIa Revisited&lt;/h1&gt;

&lt;p&gt;Recently I had to buckle down and create and honest to goodness desktop GUI application in Ruby. So once again, after some six years, I set down to weigh my options. It saddens me to say, after all these years, the state of desktop GUI programming with Ruby is still a rather sorry affair. Yes, there have been many improvements --thanks to the hard work of many a good programmer, but the task of creating a Ruby-based GUI application still remains a very non-Ruby-esque ordeal. &lt;a class=&quot;readmore&quot; href=&quot;/2010/03/20/gutopia-revisited.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Code Identity</title>
   <link href="http://trans.github.com/2010/02/25/code-identity.html"/>
   <updated>2010-02-25T00:00:00-05:00</updated>
   <id>http://trans.github.com/2010/02/25/code-identity</id>
   <content type="html">&lt;h1&gt;A Little Fun with Code Generation&lt;/h1&gt;

&lt;p&gt;A couple of years ago, a 
&lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-talk/293058?292931-293646+split-mode-vertical&quot;&gt;Ruby Quiz&lt;/a&gt;
asked us &lt;i&gt;to print &amp;quot;Hello, world!&amp;quot; to standard output using Ruby in atypical fashion.&lt;/i&gt;
Being the resolute over-achiever-to-a-fault that I am, I decided to take the proverbial
pie-in-the-sky highroad to metaland. If, I thought, I could define code &lt;i&gt;identities&lt;/i&gt;,
akin to the mathematical kind, I should be able to have the computer simply
generate an endless stream of equivalent solutions. Indeed, it turned out that it wasn&amp;#39;t
all that hard to code. &lt;a class=&quot;readmore&quot; href=&quot;/2010/02/25/code-identity.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mocking Mocks</title>
   <link href="http://trans.github.com/2010/02/14/mocking-mocks.html"/>
   <updated>2010-02-14T00:00:00-05:00</updated>
   <id>http://trans.github.com/2010/02/14/mocking-mocks</id>
   <content type="html">&lt;h1&gt;Mocking Mocks&lt;/h1&gt;

&lt;p&gt;There are a variety of test-double/mocking libraries available for Ruby.
&lt;a href=&quot;http://mocha.rubyforge.org/&quot;&gt;Mocha&lt;/a&gt; is probably the most well known.
&lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; comes with it&amp;#39;s own mock library. I beleive
&lt;a href=&quot;http://flexmock.rubyforge.org/&quot;&gt;FlexMock&lt;/a&gt; is the venerable older gentleman
on the block. And there are plenty of alternatives such as
&lt;a href=&quot;http://rubyforge.org/projects/double-ruby&quot;&gt;rr&lt;/a&gt; and &lt;a href=&quot;http://github.com/jm/stump&quot;&gt;stump&lt;/a&gt;. &lt;a class=&quot;readmore&quot; href=&quot;/2010/02/14/mocking-mocks.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Those Damn Version Numbers</title>
   <link href="http://trans.github.com/2010/02/08/those-damn-version-numbers.html"/>
   <updated>2010-02-08T00:00:00-05:00</updated>
   <id>http://trans.github.com/2010/02/08/those-damn-version-numbers</id>
   <content type="html">&lt;h1&gt;Those Damn Version Numnbers&lt;/h1&gt;

&lt;p&gt;Per the usual for a developer with too many projects on their hands,
I am constantly on the lookout for new tools to make my work easier.
Being the kind of person who likes to &amp;quot;do it themselves&amp;quot;, I often
end-up writing those tools. Recently I endeavored to make my life a bit
easier by automating, at least in part, my project&amp;#39;s version numbers.
I thought, while only a partial help, that if I added a git post-commit
hook that bumped the patch number one, at the very least I could push
out patches without ever having to fuss with adjusting the version
number manually. &lt;a class=&quot;readmore&quot; href=&quot;/2010/02/08/those-damn-version-numbers.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Trygve Reenskaug's Dci Architecture</title>
   <link href="http://trans.github.com/2010/02/04/trygve-reenskaug%27s-dci-architecture.html"/>
   <updated>2010-02-04T00:00:00-05:00</updated>
   <id>http://trans.github.com/2010/02/04/trygve-reenskaug's-dci-architecture</id>
   <content type="html">&lt;h1&gt;Trygve Reenskaug&amp;#39;s DCI Architecture&lt;/h1&gt;

&lt;p&gt;In what has to be the best
&lt;a href=&quot;http://architects.dzone.com/videos/dci-architecture-trygve&quot;&gt;software development presentation&lt;/a&gt;
I have seen in years, Trygve Reenskaug, one of the early computer
programming pioneers, takes us for a entertaining exploration of why
programming today is so broken and introduces us to a new &amp;quot;level&amp;quot;
to object oriented design he calls DCI (Data, Collaborations, and Interactions). &lt;a class=&quot;readmore&quot; href=&quot;/2010/02/04/trygve-reenskaug%27s-dci-architecture.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Failure Of Precedence</title>
   <link href="http://trans.github.com/2009/12/13/a-failure-of-precedence.html"/>
   <updated>2009-12-13T00:00:00-05:00</updated>
   <id>http://trans.github.com/2009/12/13/a-failure-of-precedence</id>
   <content type="html">&lt;h1&gt;A Failure of Precedence&lt;/h1&gt;

&lt;p&gt;(Ruby&amp;#39;s Operator Precedence Can Be Improved) &lt;a class=&quot;readmore&quot; href=&quot;/2009/12/13/a-failure-of-precedence.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Quiet Revolt Against The Fhs</title>
   <link href="http://trans.github.com/2009/10/26/quiet-revolt-against-the-fhs.html"/>
   <updated>2009-10-26T00:00:00-04:00</updated>
   <id>http://trans.github.com/2009/10/26/quiet-revolt-against-the-fhs</id>
   <content type="html">&lt;h1&gt;Quiet Revolt Against the FHS?&lt;/h1&gt;

&lt;p&gt;Prompted by the disocvery of improper use of relative require in a number or Ruby project&amp;#39;s executables, my last &lt;a href=&quot;http://protuils.github.com/2009/10/proper-require.html&quot;&gt;post&lt;/a&gt; dicussed &lt;i&gt;why&lt;/i&gt; and &lt;i&gt;when&lt;/i&gt; to avoid using relative require. To summarize, there are two broad reasons to avoid relative loading. The first is simply YAGNI. In most cases you simply don&amp;#39;t need to do it. Your script is on the $LOAD_PATH and all that is needed is the normal &lt;code&gt;require &amp;#39;mylib/mydir/myfile&amp;#39;&lt;/code&gt; to load it. The second, and up until today I felt the more important concern, is conformance to the &lt;a href=&quot;http://www.pathname.com/fhs/&quot;&gt;File Hierarchy Standard&lt;/a&gt;. While there is plenty of room to use relative requires and not tread on the FHS, it is easy enough to run afoul if one is not careful and aware of the issues. Such was the case with the executables. &lt;a class=&quot;readmore&quot; href=&quot;/2009/10/26/quiet-revolt-against-the-fhs.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Proper Require</title>
   <link href="http://trans.github.com/2009/10/23/a-proper-require.html"/>
   <updated>2009-10-23T00:00:00-04:00</updated>
   <id>http://trans.github.com/2009/10/23/a-proper-require</id>
   <content type="html">&lt;h1&gt;A Proper Require&lt;/h1&gt;

&lt;p&gt;Recently I &lt;a href=&quot;http://groups.google.com/group/ruby-talk-google/browse_thread/thread/6a46c837ffc84761&quot;&gt;posted&lt;/a&gt;
a light diatribe against improper use of relative requires in Ruby programs.
I pointed-out a bit of code, I recently came across, that added a relative path to Ruby&amp;#39;s
&lt;code&gt;$LOAD_PATH&lt;/code&gt; from within a &lt;code&gt;bin/&lt;/code&gt; executable. &lt;a class=&quot;readmore&quot; href=&quot;/2009/10/23/a-proper-require.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>On Metadata Formats</title>
   <link href="http://trans.github.com/2009/07/04/on-metadata-formats.html"/>
   <updated>2009-07-04T00:00:00-04:00</updated>
   <id>http://trans.github.com/2009/07/04/on-metadata-formats</id>
   <content type="html">&lt;h1&gt;On Configuration Storage Format for Project Metadata&lt;/h1&gt;

&lt;h2&gt;Ruby Script&lt;/h2&gt;

&lt;p&gt;Ruby-scripts as configuration is popular among gung-ho Ruby-enthusiests. And there is certainly
some merit to it&amp;#39;s use, but along with the powerful advantages are serious disadvantages as well. &lt;a class=&quot;readmore&quot; href=&quot;/2009/07/04/on-metadata-formats.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Wxruby For The Lazy</title>
   <link href="http://trans.github.com/2009/06/07/wxruby-for-the-lazy.html"/>
   <updated>2009-06-07T00:00:00-04:00</updated>
   <id>http://trans.github.com/2009/06/07/wxruby-for-the-lazy</id>
   <content type="html">&lt;h1&gt;WxRuby for the Lazy&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://wxruby.rubyforge.org/wiki/wiki.pl&quot;&gt;WxRuby&lt;/a&gt; is probably the best overall GUI library for Ruby currently available. It is cross-platform, provides native look-and-feel and is stable enough for production use. All other GUI libraries, despite their various merits, fall short in at least one of the areas. However, WxRuby does have one major downfall. It is pretty much a straight port of the C API. Writing WxRuby code is largely the same as writing actual WxWidgets C code. It&amp;#39;s far from the &amp;quot;Ruby Way&amp;quot;. &lt;a class=&quot;readmore&quot; href=&quot;/2009/06/07/wxruby-for-the-lazy.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Xml Meet Css</title>
   <link href="http://trans.github.com/2009/02/10/xml-meet-css.html"/>
   <updated>2009-02-10T00:00:00-05:00</updated>
   <id>http://trans.github.com/2009/02/10/xml-meet-css</id>
   <content type="html">&lt;h1&gt;XML+CSS, the Future of Web Design?&lt;/h1&gt;

&lt;p&gt;In a &lt;a href=&quot;http://tigerops.org/2009/01/mf-vs-xml.html&quot;&gt;previous post&lt;/a&gt;, I point out that microformats bring an additional layer of useful information to a document, which I dubbed &lt;em&gt;semantic structure&lt;/em&gt;. In short, HTML tags provide useful &lt;em&gt;type&lt;/em&gt; information about the data they contain. A good example of this has been the insistent push to use &lt;code&gt;div&lt;/code&gt;s rather than &lt;code&gt;table&lt;/code&gt;s for page layout. The reason is that tables describe a semantic structure, a table of data, and not layout. I for one have found this a frustrating haggle in the design of my pages. Time and time again I have been stymied by unwieldy &lt;code&gt;div&lt;/code&gt;s. Tables are much easier to use, despite additional verbosity. But I have stuck to &lt;code&gt;div&lt;/code&gt;s because it is &amp;quot;the right thing to do&amp;quot;. Thankfully my saving grace will soon be here. The 3rd revision the CSS standard supports a new &lt;code&gt;display&lt;/code&gt; style. With it, one can specify that a div is to behave like a table, table row or table cell. Woohoo! Three cheers for tabley divs!! &lt;a class=&quot;readmore&quot; href=&quot;/2009/02/10/xml-meet-css.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What's Uf Got On Xml</title>
   <link href="http://trans.github.com/2009/01/24/what%27s-uf-got-on-xml.html"/>
   <updated>2009-01-24T00:00:00-05:00</updated>
   <id>http://trans.github.com/2009/01/24/what's-uf-got-on-xml</id>
   <content type="html">&lt;h1&gt;What&amp;#39;s &amp;micro;F got on XML?&lt;/h1&gt;

&lt;p&gt;Decisions, decisions. Therein lies the reason why convention over configuration is so bloody great, precisely because it requires fewer decisions. &lt;a href=&quot;http://detroit.github.com/detroit&quot;&gt;Detroit&lt;/a&gt;, my awesome build tool, outputs log files. Yea, logs are good. But the decision I have to make is, &amp;quot;in what format?&amp;quot; &lt;a class=&quot;readmore&quot; href=&quot;/2009/01/24/what%27s-uf-got-on-xml.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Yadsl Rule</title>
   <link href="http://trans.github.com/2008/11/04/the-yadsl-rule.html"/>
   <updated>2008-11-04T00:00:00-05:00</updated>
   <id>http://trans.github.com/2008/11/04/the-yadsl-rule</id>
   <content type="html">&lt;h1&gt;The YADSL Rule&lt;/h1&gt;

&lt;p&gt;Looks like the Ruby world is a fire with new DSLs for BDD/TDD. There&amp;#39;s 
&lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt;,
&lt;a href=&quot;http://blog.zenspider.com/minitest/&quot;&gt;minitest&lt;/a&gt;,
&lt;a href=&quot;http://test-unit.rubyforge.org/test-unit/&quot;&gt;Test::Unit 2.x&lt;/a&gt;,
&lt;a href=&quot;http://test-spec.rubyforge.org/test-spec/&quot;&gt;test-spec&lt;/a&gt;,
&lt;a href=&quot;http://www.oreillynet.com/ruby/blog/2008/02/assert2.html&quot;&gt;Assert 2.0&lt;/a&gt;,
&lt;a href=&quot;http://expectations.rubyforge.org/&quot;&gt;Expectations&lt;/a&gt;,
&lt;a href=&quot;http://github.com/aslakhellesoy/cucumber/tree/master&quot;&gt;Cucumber&lt;/a&gt;,
&lt;a href=&quot;http://github.com/carlosbrando/remarkable/tree/master&quot;&gt;Remarkable&lt;/a&gt;,
&lt;a href=&quot;http://www.thoughtbot.com/projects/shoulda/&quot;&gt;Shoulda&lt;/a&gt;
... woulda, coulda ... My word! So many choices. It&amp;#39;s fitting that
it&amp;#39;s Thanksgiving, what we have here is a &lt;i&gt;cornicopia of framework&lt;/i&gt;!!! &lt;a class=&quot;readmore&quot; href=&quot;/2008/11/04/the-yadsl-rule.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>This Old Hash</title>
   <link href="http://trans.github.com/2008/10/06/this-old-hash.html"/>
   <updated>2008-10-06T00:00:00-04:00</updated>
   <id>http://trans.github.com/2008/10/06/this-old-hash</id>
   <content type="html">&lt;h1&gt;This Old Hash&lt;/h1&gt;

&lt;p&gt;The Hash may well be the most used class in Ruby. Sure, our programs
have arrays and strings galore, but they generally come and go without
much ado. Hashes on the other hand get &lt;em&gt;used&lt;/em&gt;; and by that I mean to
say, we spend a lot of time fussing with them. I think there are two
significant reasons for this and I will focus on the first, and
the more important of the two, here. &lt;a class=&quot;readmore&quot; href=&quot;/2008/10/06/this-old-hash.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>If And Oopy If</title>
   <link href="http://trans.github.com/2008/09/28/if-and-oopy-if.html"/>
   <updated>2008-09-28T00:00:00-04:00</updated>
   <id>http://trans.github.com/2008/09/28/if-and-oopy-if</id>
   <content type="html">&lt;h1&gt;An Ally OOP for If-Conditions&lt;/h1&gt;

&lt;p&gt;Ruby takes a unique approach to conditional evaluation: &lt;i&gt;All
objects are equivalent to &lt;code&gt;true&lt;/code&gt; except &lt;code&gt;nil&lt;/code&gt;
and &lt;code&gt;false&lt;/code&gt;&lt;/i&gt;. No doubt this is a more object-oriented
approach than, say, C&amp;#39;s use of &lt;code&gt;0&lt;/code&gt; as false, but it&amp;#39;s far
from the ideal of OOP all the way down, as any
&lt;a href=&quot;http://pozorvlak.livejournal.com/94558.html&quot;&gt;Smalltalker&lt;/a&gt;
can attest. &lt;a class=&quot;readmore&quot; href=&quot;/2008/09/28/if-and-oopy-if.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Taskable</title>
   <link href="http://trans.github.com/2008/09/12/taskable.html"/>
   <updated>2008-09-12T00:00:00-04:00</updated>
   <id>http://trans.github.com/2008/09/12/taskable</id>
   <content type="html">&lt;h1&gt;Taskable&lt;/h1&gt;

&lt;p&gt;On more than a few occasions I have taken a stab at writing a general
purpose task system, akin to Rake&amp;#39;s, but one that works within the
framework of Ruby class inheritance. I recall my first attempt was
quite an unwieldy beast, and my subsequent attempts were fairly
unwieldy too, but over time they became more concise. Below is the
most concise variation yet, and I was wondering what other thought
of it -- do you see any flaws in the design; does it satisfy all the
criteria of such a system; would you find it useful; etc. &lt;a class=&quot;readmore&quot; href=&quot;/2008/09/12/taskable.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Library Poll</title>
   <link href="http://trans.github.com/2007/05/02/the-library-poll.html"/>
   <updated>2007-05-02T00:00:00-04:00</updated>
   <id>http://trans.github.com/2007/05/02/the-library-poll</id>
   <content type="html">&lt;h1&gt;The Library Poll&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve been thinking far too long about how best to organize and distribute programming libraries. Having a hard time coming to any firm conclusions, I&amp;#39;ve decided to try an inductive approach --via a poll. If you have a moment, I&amp;#39;d really appreciate your thoughtful answers to the following questions. Thanks! &lt;a class=&quot;readmore&quot; href=&quot;/2007/05/02/the-library-poll.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Package Management Is A Red Herring</title>
   <link href="http://trans.github.com/2007/03/12/package-management-is-a-red-herring.html"/>
   <updated>2007-03-12T00:00:00-04:00</updated>
   <id>http://trans.github.com/2007/03/12/package-management-is-a-red-herring</id>
   <content type="html">&lt;h1&gt;Package Management is a Red Herring&lt;/h1&gt;

&lt;p&gt;Traditionally package management has been fairly complicated. Developers must navigate the matrix of platform support, package format and configuration choices that are often as time consuming as they are restrictive.  &lt;a class=&quot;readmore&quot; href=&quot;/2007/03/12/package-management-is-a-red-herring.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Negative Arrays</title>
   <link href="http://trans.github.com/2006/12/03/negative-arrays.html"/>
   <updated>2006-12-03T00:00:00-05:00</updated>
   <id>http://trans.github.com/2006/12/03/negative-arrays</id>
   <content type="html">&lt;h1&gt;Negative Arrays&lt;/h1&gt;

&lt;p&gt;My current work involves the creation of an extensive configuration file format representing project information. In a number of cases I have had need of an inclusion list, representing files and file patterns to include for some operation --say, what files to include in a package. In such a case I generally end up with a least two parameters which I basically label include and exclude. While include is the list of files to use, exclude is list of files to exclude from the included list. Using exclude makes it easier to specify a large selection and then subsequently omit a file or two. The include list typically has a suitable default value, so a third parameter is sometimes also of use, append, which concats to the defaults as opposed to replacing the include parameter outright. &lt;a class=&quot;readmore&quot; href=&quot;/2006/12/03/negative-arrays.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>We All Live In A Yellow Submarine</title>
   <link href="http://trans.github.com/2006/11/11/we-all-live-in-a-yellow-submarine.html"/>
   <updated>2006-11-11T00:00:00-05:00</updated>
   <id>http://trans.github.com/2006/11/11/we-all-live-in-a-yellow-submarine</id>
   <content type="html">&lt;h1&gt;We All Live in a Yellow Submarine&lt;/h1&gt;

&lt;p&gt;Anyone having read my previous posts, here and on ruby-talk, knows I love to explore ideas. It doesn&amp;#39;t matter if they are considered &amp;quot;good&amp;quot; or &amp;quot;bad&amp;quot;. Most cannot be judged without first exponding on them anyway. In fact, half the time I have no idea where an idea might lead until I sit down and blog it. &lt;a class=&quot;readmore&quot; href=&quot;/2006/11/11/we-all-live-in-a-yellow-submarine.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Separation Of Church And State</title>
   <link href="http://trans.github.com/2006/11/10/separation-of-church-and-state.html"/>
   <updated>2006-11-10T00:00:00-05:00</updated>
   <id>http://trans.github.com/2006/11/10/separation-of-church-and-state</id>
   <content type="html">&lt;h1&gt;Separation of Church and State&lt;/h1&gt;

&lt;p&gt;Have you ever had a class so choke full of interrelated data and function members that had trouble avoiding name clashes between the two. Of course it&amp;#39;s a rare problem when you&amp;#39;re in full control of the members, but when you&amp;#39;re designing extensible classes, it become a major issue and you have to resort to some less-than-lovely work around. &lt;a class=&quot;readmore&quot; href=&quot;/2006/11/10/separation-of-church-and-state.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Frustration With Object Orientation</title>
   <link href="http://trans.github.com/2006/10/21/frustration-with-object-orientation.html"/>
   <updated>2006-10-21T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/10/21/frustration-with-object-orientation</id>
   <content type="html">&lt;h1&gt;Frustration with Object-Orientation&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve spent more weeks than I care to count going around in circles. &lt;a class=&quot;readmore&quot; href=&quot;/2006/10/21/frustration-with-object-orientation.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I See You</title>
   <link href="http://trans.github.com/2006/10/02/i-see-you.html"/>
   <updated>2006-10-02T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/10/02/i-see-you</id>
   <content type="html">&lt;h1&gt;I See You&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iseeyou.jpg&quot; alt=&quot;I See You Picture&quot;&gt; &lt;a class=&quot;readmore&quot; href=&quot;/2006/10/02/i-see-you.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I No Longer Believe In Methods</title>
   <link href="http://trans.github.com/2006/09/21/i-no-longer-believe-in-methods.html"/>
   <updated>2006-09-21T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/09/21/i-no-longer-believe-in-methods</id>
   <content type="html">&lt;h1&gt;I No Longer Believe in Methods&lt;/h1&gt;

&lt;p&gt;Yes, that&amp;#39;s right. I no longer believe in methods. Why? Becuase this is OOP and if the methods aren&amp;#39;t honest to goodness objects from the start, without exception, then they are not really methods. They&amp;#39;re just glorified functions. &lt;a class=&quot;readmore&quot; href=&quot;/2006/09/21/i-no-longer-believe-in-methods.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Persnickety Order Of Self Serving Modules</title>
   <link href="http://trans.github.com/2006/08/26/the-persnickety-order-of-self-serving-modules.html"/>
   <updated>2006-08-26T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/08/26/the-persnickety-order-of-self-serving-modules</id>
   <content type="html">&lt;h1&gt;The Persnickety Order of Self-Serving Modules&lt;/h1&gt;

&lt;p&gt;This one caught me off guard. &lt;a class=&quot;readmore&quot; href=&quot;/2006/08/26/the-persnickety-order-of-self-serving-modules.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Main Campaign Out Of Object Now</title>
   <link href="http://trans.github.com/2006/08/21/main-campaign-out-of-object-now.html"/>
   <updated>2006-08-21T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/08/21/main-campaign-out-of-object-now</id>
   <content type="html">&lt;h1&gt;Main Campaign: Out of Object Now!&lt;/h1&gt;

&lt;p&gt;The word from Matz on Kernel as toplevel object: &lt;a class=&quot;readmore&quot; href=&quot;/2006/08/21/main-campaign-out-of-object-now.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Vote Kernel For Toplevel Object</title>
   <link href="http://trans.github.com/2006/08/18/vote-kernel-for-toplevel-object.html"/>
   <updated>2006-08-18T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/08/18/vote-kernel-for-toplevel-object</id>
   <content type="html">&lt;h1&gt;Vote Kernel for Toplevel Object&lt;/h1&gt;

&lt;p&gt;As a follow up to my last post on the &amp;quot;pain that is main&amp;quot;, I want to offer a potential improvement for Ruby 2.0. I approached the topic on ruby-talk this week and while Matz initially took some interest, he hasn&amp;#39;t followed up since his last comment: &lt;a class=&quot;readmore&quot; href=&quot;/2006/08/18/vote-kernel-for-toplevel-object.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Main Is A Dry Pain</title>
   <link href="http://trans.github.com/2006/08/17/main-is-a-dry-pain.html"/>
   <updated>2006-08-17T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/08/17/main-is-a-dry-pain</id>
   <content type="html">&lt;h1&gt;Main is a DRY Pain&lt;/h1&gt;

&lt;p&gt;I have a module that depends on define_method and ancestors. It works great when I include it in other modules or classes. But if I try including it into the toplevel it fails miserably. &lt;a class=&quot;readmore&quot; href=&quot;/2006/08/17/main-is-a-dry-pain.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Taming The File System Zoo</title>
   <link href="http://trans.github.com/2006/07/23/taming-the-file-system-zoo.html"/>
   <updated>2006-07-23T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/07/23/taming-the-file-system-zoo</id>
   <content type="html">&lt;h1&gt;Taming the File System Zoo&lt;/h1&gt;

&lt;p&gt;I&amp;#39;m not quite sure I undestand why we have all these classes and modules: &lt;code&gt;Dir&lt;/code&gt;, &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;FileUtils&lt;/code&gt;, &lt;code&gt;FileTest&lt;/code&gt; and &lt;code&gt;Pathname&lt;/code&gt;. I understand what each does, of course, but I don&amp;#39;t understand why the clearly related functionality has been spread about. I think a single &lt;code&gt;FileSystem&lt;/code&gt; class or module would be in
order --a system we could use in much the same manner as we use the command shell to work with a file system. &lt;a class=&quot;readmore&quot; href=&quot;/2006/07/23/taming-the-file-system-zoo.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>From Singleton To Legion</title>
   <link href="http://trans.github.com/2006/07/22/from-singleton-to-legion.html"/>
   <updated>2006-07-22T00:00:00-04:00</updated>
   <id>http://trans.github.com/2006/07/22/from-singleton-to-legion</id>
   <content type="html">&lt;h1&gt;From Singleton to Legion&lt;/h1&gt;

&lt;p&gt;For as long as I&amp;#39;ve coded Ruby there has been some question as to the appropriateness of the term singleton class. This is the term generally used in Ruby parlance to refer to the language construct: class &amp;lt;&amp;lt; obj; self; end, and is the context of class methods and module methods. &lt;a class=&quot;readmore&quot; href=&quot;/2006/07/22/from-singleton-to-legion.html&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>
