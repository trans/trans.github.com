{"2006 07 22 from singleton to legion":{"title":"2006 07 22 from singleton to legion","name":"2006 07 22 from singleton to legion","href":"2006/07/22/from-singleton-to-legion/index.html","date":"2006-07-22","author":"trans","summary":"<h1>From Singleton to Legion</h1>\n\n<p>For as long as I've coded Ruby there has been some question as to the appropriateness of the term singleton class. This is the term generally used in Ruby parlance to refer to the language construct: class &lt;&lt; obj; self; end, and is the context of class methods and module methods.</p>"},"2006 07 23 taming the file system zoo":{"title":"2006 07 23 taming the file system zoo","name":"2006 07 23 taming the file system zoo","href":"2006/07/23/taming-the-file-system-zoo/index.html","date":"2006-07-23","author":"trans","summary":"<h1>Taming the File System Zoo</h1>\n\n<p>I'm not quite sure I undestand why we have all these classes and modules: <code>Dir</code>, <code>File</code>, <code>FileUtils</code>, <code>FileTest</code> and <code>Pathname</code>. I understand what each does, of course, but I don't understand why the clearly related functionality has been spread about. I think a single <code>FileSystem</code> class or module would be in\norder --a system we could use in much the same manner as we use the command shell to work with a file system.</p>"},"2006 08 17 main is a dry pain":{"title":"2006 08 17 main is a dry pain","name":"2006 08 17 main is a dry pain","href":"2006/08/17/main-is-a-dry-pain/index.html","date":"2006-08-17","author":"trans","summary":"<h1>Main is a DRY Pain</h1>\n\n<p>I have a module that depends on define_method and ancestors. It works great when I include it in other modules or classes. But if I try including it into the toplevel it fails miserably.</p>"},"2006 08 18 vote kernel for toplevel object":{"title":"2006 08 18 vote kernel for toplevel object","name":"2006 08 18 vote kernel for toplevel object","href":"2006/08/18/vote-kernel-for-toplevel-object/index.html","date":"2006-08-18","author":"trans","summary":"<h1>Vote Kernel for Toplevel Object</h1>\n\n<p>As a follow up to my last post on the \"pain that is main\", I want to offer a potential improvement for Ruby 2.0. I approached the topic on ruby-talk this week and while Matz initially took some interest, he hasn't followed up since his last comment:</p>"},"2006 08 21 main campaign out of object now":{"title":"2006 08 21 main campaign out of object now","name":"2006 08 21 main campaign out of object now","href":"2006/08/21/main-campaign-out-of-object-now/index.html","date":"2006-08-21","author":"trans","summary":"<h1>Main Campaign: Out of Object Now!</h1>\n\n<p>The word from Matz on Kernel as toplevel object:</p>"},"2006 08 26 the persnickety order of self serving modules":{"title":"2006 08 26 the persnickety order of self serving modules","name":"2006 08 26 the persnickety order of self serving modules","href":"2006/08/26/the-persnickety-order-of-self-serving-modules/index.html","date":"2006-08-26","author":"trans","summary":"<h1>The Persnickety Order of Self-Serving Modules</h1>\n\n<p>This one caught me off guard.</p>"},"2006 09 21 i no longer believe in methods":{"title":"2006 09 21 i no longer believe in methods","name":"2006 09 21 i no longer believe in methods","href":"2006/09/21/i-no-longer-believe-in-methods/index.html","date":"2006-09-21","author":"trans","summary":"<h1>I No Longer Believe in Methods</h1>\n\n<p>Yes, that's right. I no longer believe in methods. Why? Becuase this is OOP and if the methods aren't honest to goodness objects from the start, without exception, then they are not really methods. They're just glorified functions.</p>"},"2006 10 02 i see you":{"title":"2006 10 02 i see you","name":"2006 10 02 i see you","href":"2006/10/02/i-see-you/index.html","date":"2006-10-02","author":"trans","summary":"<h1>I See You</h1>\n\n<p><img src=\"/assets/images/iseeyou.jpg\" alt=\"I See You Picture\"></p>"},"2006 10 21 frustration with object orientation":{"title":"2006 10 21 frustration with object orientation","name":"2006 10 21 frustration with object orientation","href":"2006/10/21/frustration-with-object-orientation/index.html","date":"2006-10-21","author":"trans","summary":"<h1>Frustration with Object-Orientation</h1>\n\n<p>I've spent more weeks than I care to count going around in circles.</p>"},"2006 11 10 separation of church and state":{"title":"2006 11 10 separation of church and state","name":"2006 11 10 separation of church and state","href":"2006/11/10/separation-of-church-and-state/index.html","date":"2006-11-10","author":"trans","summary":"<h1>Separation of Church and State</h1>\n\n<p>Have you ever had a class so choke full of interrelated data and function members that had trouble avoiding name clashes between the two. Of course it's a rare problem when you're in full control of the members, but when you're designing extensible classes, it become a major issue and you have to resort to some less-than-lovely work around.</p>"},"2006 11 11 we all live in a yellow submarine":{"title":"2006 11 11 we all live in a yellow submarine","name":"2006 11 11 we all live in a yellow submarine","href":"2006/11/11/we-all-live-in-a-yellow-submarine/index.html","date":"2006-11-11","author":"trans","summary":"<h1>We All Live in a Yellow Submarine</h1>\n\n<p>Anyone having read my previous posts, here and on ruby-talk, knows I love to explore ideas. It doesn't matter if they are considered \"good\" or \"bad\". Most cannot be judged without first exponding on them anyway. In fact, half the time I have no idea where an idea might lead until I sit down and blog it.</p>"},"2006 12 03 negative arrays":{"title":"2006 12 03 negative arrays","name":"2006 12 03 negative arrays","href":"2006/12/03/negative-arrays/index.html","date":"2006-12-03","author":"trans","summary":"<h1>Negative Arrays</h1>\n\n<p>My current work involves the creation of an extensive configuration file format representing project information. In a number of cases I have had need of an inclusion list, representing files and file patterns to include for some operation --say, what files to include in a package. In such a case I generally end up with a least two parameters which I basically label include and exclude. While include is the list of files to use, exclude is list of files to exclude from the included list. Using exclude makes it easier to specify a large selection and then subsequently omit a file or two. The include list typically has a suitable default value, so a third parameter is sometimes also of use, append, which concats to the defaults as opposed to replacing the include parameter outright.</p>"},"2007 03 12 package management is a red herring":{"title":"2007 03 12 package management is a red herring","name":"2007 03 12 package management is a red herring","href":"2007/03/12/package-management-is-a-red-herring/index.html","date":"2007-03-12","author":"trans","summary":"<h1>Package Management is a Red Herring</h1>\n\n<p>Traditionally package management has been fairly complicated. Developers must navigate the matrix of platform support, package format and configuration choices that are often as time consuming as they are restrictive. </p>"},"2007 05 02 the library poll":{"title":"2007 05 02 the library poll","name":"2007 05 02 the library poll","href":"2007/05/02/the-library-poll/index.html","date":"2007-05-02","author":"trans","summary":"<h1>The Library Poll</h1>\n\n<p>I've been thinking far too long about how best to organize and distribute programming libraries. Having a hard time coming to any firm conclusions, I've decided to try an inductive approach --via a poll. If you have a moment, I'd really appreciate your thoughtful answers to the following questions. Thanks!</p>"},"2008 09 12 taskable":{"title":"2008 09 12 taskable","name":"2008 09 12 taskable","href":"2008/09/12/taskable/index.html","date":"2008-09-12","author":"trans","summary":"<h1>Taskable</h1>\n\n<p>On more than a few occasions I have taken a stab at writing a general\npurpose task system, akin to Rake's, but one that works within the\nframework of Ruby class inheritance. I recall my first attempt was\nquite an unwieldy beast, and my subsequent attempts were fairly\nunwieldy too, but over time they became more concise. Below is the\nmost concise variation yet, and I was wondering what other thought\nof it -- do you see any flaws in the design; does it satisfy all the\ncriteria of such a system; would you find it useful; etc.</p>"},"2008 09 28 if and oopy if":{"title":"2008 09 28 if and oopy if","name":"2008 09 28 if and oopy if","href":"2008/09/28/if-and-oopy-if/index.html","date":"2008-09-28","author":"trans","summary":"<h1>An Ally OOP for If-Conditions</h1>\n\n<p>Ruby takes a unique approach to conditional evaluation: <i>All\nobjects are equivalent to <code>true</code> except <code>nil</code>\nand <code>false</code></i>. No doubt this is a more object-oriented\napproach than, say, C's use of <code>0</code> as false, but it's far\nfrom the ideal of OOP all the way down, as any\n<a href=\"http://pozorvlak.livejournal.com/94558.html\">Smalltalker</a>\ncan attest.</p>"},"2008 10 06 this old hash":{"title":"2008 10 06 this old hash","name":"2008 10 06 this old hash","href":"2008/10/06/this-old-hash/index.html","date":"2008-10-06","author":"trans","summary":"<h1>This Old Hash</h1>\n\n<p>The Hash may well be the most used class in Ruby. Sure, our programs\nhave arrays and strings galore, but they generally come and go without\nmuch ado. Hashes on the other hand get <em>used</em>; and by that I mean to\nsay, we spend a lot of time fussing with them. I think there are two\nsignificant reasons for this and I will focus on the first, and\nthe more important of the two, here.</p>"},"2008 11 04 the yadsl rule":{"title":"2008 11 04 the yadsl rule","name":"2008 11 04 the yadsl rule","href":"2008/11/04/the-yadsl-rule/index.html","date":"2008-11-04","author":"trans","summary":"<h1>The YADSL Rule</h1>\n\n<p>Looks like the Ruby world is a fire with new DSLs for BDD/TDD. There's \n<a href=\"http://rspec.info/\">RSpec</a>,\n<a href=\"http://blog.zenspider.com/minitest/\">minitest</a>,\n<a href=\"http://test-unit.rubyforge.org/test-unit/\">Test::Unit 2.x</a>,\n<a href=\"http://test-spec.rubyforge.org/test-spec/\">test-spec</a>,\n<a href=\"http://www.oreillynet.com/ruby/blog/2008/02/assert2.html\">Assert 2.0</a>,\n<a href=\"http://expectations.rubyforge.org/\">Expectations</a>,\n<a href=\"http://github.com/aslakhellesoy/cucumber/tree/master\">Cucumber</a>,\n<a href=\"http://github.com/carlosbrando/remarkable/tree/master\">Remarkable</a>,\n<a href=\"http://www.thoughtbot.com/projects/shoulda/\">Shoulda</a>\n... woulda, coulda ... My word! So many choices. It's fitting that\nit's Thanksgiving, what we have here is a <i>cornicopia of framework</i>!!!</p>"},"2009 01 24 what's uf got on xml":{"title":"2009 01 24 what's uf got on xml","name":"2009 01 24 what's uf got on xml","href":"2009/01/24/what's-uf-got-on-xml/index.html","date":"2009-01-24","author":"trans","summary":"<h1>What's µF got on XML?</h1>\n\n<p>Decisions, decisions. Therein lies the reason why convention over configuration is so bloody great, precisely because it requires fewer decisions. <a href=\"http://detroit.github.com/detroit\">Detroit</a>, my awesome build tool, outputs log files. Yea, logs are good. But the decision I have to make is, \"in what format?\"</p>"},"2009 02 10 xml meet css":{"title":"2009 02 10 xml meet css","name":"2009 02 10 xml meet css","href":"2009/02/10/xml-meet-css/index.html","date":"2009-02-10","author":"trans","summary":"<h1>XML+CSS, the Future of Web Design?</h1>\n\n<p>In a <a href=\"http://tigerops.org/2009/01/mf-vs-xml.html\">previous post</a>, I point out that microformats bring an additional layer of useful information to a document, which I dubbed <em>semantic structure</em>. In short, HTML tags provide useful <em>type</em> information about the data they contain. A good example of this has been the insistent push to use <code>div</code>s rather than <code>table</code>s for page layout. The reason is that tables describe a semantic structure, a table of data, and not layout. I for one have found this a frustrating haggle in the design of my pages. Time and time again I have been stymied by unwieldy <code>div</code>s. Tables are much easier to use, despite additional verbosity. But I have stuck to <code>div</code>s because it is \"the right thing to do\". Thankfully my saving grace will soon be here. The 3rd revision the CSS standard supports a new <code>display</code> style. With it, one can specify that a div is to behave like a table, table row or table cell. Woohoo! Three cheers for tabley divs!!</p>"},"2009 06 07 wxruby for the lazy":{"title":"2009 06 07 wxruby for the lazy","name":"2009 06 07 wxruby for the lazy","href":"2009/06/07/wxruby-for-the-lazy/index.html","date":"2009-06-07","author":"trans","summary":"<h1>WxRuby for the Lazy</h1>\n\n<p><a href=\"http://wxruby.rubyforge.org/wiki/wiki.pl\">WxRuby</a> is probably the best overall GUI library for Ruby currently available. It is cross-platform, provides native look-and-feel and is stable enough for production use. All other GUI libraries, despite their various merits, fall short in at least one of the areas. However, WxRuby does have one major downfall. It is pretty much a straight port of the C API. Writing WxRuby code is largely the same as writing actual WxWidgets C code. It's far from the \"Ruby Way\".</p>"},"2009 07 04 on metadata formats":{"title":"2009 07 04 on metadata formats","name":"2009 07 04 on metadata formats","href":"2009/07/04/on-metadata-formats/index.html","date":"2009-07-04","author":"trans","summary":"<h1>On Configuration Storage Format for Project Metadata</h1>\n\n<h2>Ruby Script</h2>\n\n<p>Ruby-scripts as configuration is popular among gung-ho Ruby-enthusiests. And there is certainly\nsome merit to it's use, but along with the powerful advantages are serious disadvantages as well.</p>"},"2009 10 23 a proper require":{"title":"2009 10 23 a proper require","name":"2009 10 23 a proper require","href":"2009/10/23/a-proper-require/index.html","date":"2009-10-23","author":"trans","summary":"<h1>A Proper Require</h1>\n\n<p>Recently I <a href=\"http://groups.google.com/group/ruby-talk-google/browse_thread/thread/6a46c837ffc84761\">posted</a>\na light diatribe against improper use of relative requires in Ruby programs.\nI pointed-out a bit of code, I recently came across, that added a relative path to Ruby's\n<code>$LOAD_PATH</code> from within a <code>bin/</code> executable.</p>"},"2009 10 26 quiet revolt against the fhs":{"title":"2009 10 26 quiet revolt against the fhs","name":"2009 10 26 quiet revolt against the fhs","href":"2009/10/26/quiet-revolt-against-the-fhs/index.html","date":"2009-10-26","author":"trans","summary":"<h1>Quiet Revolt Against the FHS?</h1>\n\n<p>Prompted by the disocvery of improper use of relative require in a number or Ruby project's executables, my last <a href=\"http://protuils.github.com/2009/10/proper-require.html\">post</a> dicussed <i>why</i> and <i>when</i> to avoid using relative require. To summarize, there are two broad reasons to avoid relative loading. The first is simply YAGNI. In most cases you simply don't need to do it. Your script is on the $LOAD_PATH and all that is needed is the normal <code>require 'mylib/mydir/myfile'</code> to load it. The second, and up until today I felt the more important concern, is conformance to the <a href=\"http://www.pathname.com/fhs/\">File Hierarchy Standard</a>. While there is plenty of room to use relative requires and not tread on the FHS, it is easy enough to run afoul if one is not careful and aware of the issues. Such was the case with the executables.</p>"},"2009 12 13 a failure of precedence":{"title":"2009 12 13 a failure of precedence","name":"2009 12 13 a failure of precedence","href":"2009/12/13/a-failure-of-precedence/index.html","date":"2009-12-13","author":"trans","summary":"<h1>A Failure of Precedence</h1>\n\n<p>(Ruby's Operator Precedence Can Be Improved)</p>"},"2010 02 04 trygve reenskaugs dci architecture":{"title":"2010 02 04 trygve reenskaugs dci architecture","name":"2010 02 04 trygve reenskaugs dci architecture","href":"2010/02/04/trygve-reenskaugs-dci-architecture/index.html","date":"2010-02-04","author":"trans","summary":"<h1>Trygve Reenskaug's DCI Architecture</h1>\n\n<p>In what has to be the best\n<a href=\"http://architects.dzone.com/videos/dci-architecture-trygve\">software development presentation</a>\nI have seen in years, Trygve Reenskaug, one of the early computer\nprogramming pioneers, takes us for a entertaining exploration of why\nprogramming today is so broken and introduces us to a new \"level\"\nto object oriented design he calls DCI (Data, Collaborations, and Interactions).</p>"},"2010 02 08 those damn version numbers":{"title":"2010 02 08 those damn version numbers","name":"2010 02 08 those damn version numbers","href":"2010/02/08/those-damn-version-numbers/index.html","date":"2010-02-08","author":"trans","summary":"<h1>Those Damn Version Numnbers</h1>\n\n<p>Per the usual for a developer with too many projects on their hands,\nI am constantly on the lookout for new tools to make my work easier.\nBeing the kind of person who likes to \"do it themselves\", I often\nend-up writing those tools. Recently I endeavored to make my life a bit\neasier by automating, at least in part, my project's version numbers.\nI thought, while only a partial help, that if I added a git post-commit\nhook that bumped the patch number one, at the very least I could push\nout patches without ever having to fuss with adjusting the version\nnumber manually.</p>"},"2010 02 14 mocking mocks":{"title":"2010 02 14 mocking mocks","name":"2010 02 14 mocking mocks","href":"2010/02/14/mocking-mocks/index.html","date":"2010-02-14","author":"trans","summary":"<h1>Mocking Mocks</h1>\n\n<p>There are a variety of test-double/mocking libraries available for Ruby.\n<a href=\"http://mocha.rubyforge.org/\">Mocha</a> is probably the most well known.\n<a href=\"http://rspec.info/\">RSpec</a> comes with it's own mock library. I beleive\n<a href=\"http://flexmock.rubyforge.org/\">FlexMock</a> is the venerable older gentleman\non the block. And there are plenty of alternatives such as\n<a href=\"http://rubyforge.org/projects/double-ruby\">rr</a> and <a href=\"http://github.com/jm/stump\">stump</a>.</p>"},"2010 02 25 code identity":{"title":"2010 02 25 code identity","name":"2010 02 25 code identity","href":"2010/02/25/code-identity/index.html","date":"2010-02-25","author":"trans","summary":"<h1>A Little Fun with Code Generation</h1>\n\n<p>A couple of years ago, a \n<a href=\"http://blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-talk/293058?292931-293646+split-mode-vertical\">Ruby Quiz</a>\nasked us <i>to print \"Hello, world!\" to standard output using Ruby in atypical fashion.</i>\nBeing the resolute over-achiever-to-a-fault that I am, I decided to take the proverbial\npie-in-the-sky highroad to metaland. If, I thought, I could define code <i>identities</i>,\nakin to the mathematical kind, I should be able to have the computer simply\ngenerate an endless stream of equivalent solutions. Indeed, it turned out that it wasn't\nall that hard to code.</p>"},"2010 03 20 gutopia revisited":{"title":"2010 03 20 gutopia revisited","name":"2010 03 20 gutopia revisited","href":"2010/03/20/gutopia-revisited/index.html","date":"2010-03-20","author":"trans","summary":"<h1>GUtopIa Revisited</h1>\n\n<p>Recently I had to buckle down and create and honest to goodness desktop GUI application in Ruby. So once again, after some six years, I set down to weigh my options. It saddens me to say, after all these years, the state of desktop GUI programming with Ruby is still a rather sorry affair. Yes, there have been many improvements --thanks to the hard work of many a good programmer, but the task of creating a Ruby-based GUI application still remains a very non-Ruby-esque ordeal.</p>"},"2010 04 13 a case for module inheritance":{"title":"2010 04 13 a case for module inheritance","name":"2010 04 13 a case for module inheritance","href":"2010/04/13/a-case-for-module-inheritance/index.html","date":"2010-04-13","author":"trans","summary":"<h1>A Case for Module Inheritance</h1>\n\n<p>I love beautifully written code. Unfortunately the realities of the\nlanguage sometimes clash with requirements of the implementation. While\nRuby goes a long way toward making beautifully written code common place.\nIt still has some shortcomings I'd like to see improved.</p>"},"2010 05 13 directory based configuration":{"title":"2010 05 13 directory based configuration","name":"2010 05 13 directory based configuration","href":"2010/05/13/directory-based-configuration/index.html","date":"2010-05-13","author":"trans","summary":"<h1>Directory-based Configuration</h1>\n\n<p>With regards to <a href=\"http://proutils.github.com/pom\">POM</a>, \nthe most cumbersome issue I have had to struggle with over the course\nof its long and somewhat painful development, is the question of\nconfiguration storage. You see, many years ago I hit upon the idea of\nusing the file system itself as a \"hash\" for heirarchical storage.\nIn other words, instead of using a YAML or JSON or an INI file, POM could\nuse the file system itself.</p>"},"2010 05 15 gem crazy":{"title":"2010 05 15 gem crazy","name":"2010 05 15 gem crazy","href":"2010/05/15/gem-crazy/index.html","date":"2010-05-15","author":"trans","summary":"<h1>Gem Crazy</h1>\n\n<p><b>I believe the Ruby community may have finally gone off the rails in it's collective\ncrazy train.</b> I have been reading about <a href=\"http://gembundler.com/\">Bundler</a>,\nthe spiffy new RubyGems manager to be default part of Rails 3.0, and I can't help but\nwonder what track we were even on.</p>"},"2010 05 19 a second look at bundler":{"title":"2010 05 19 a second look at bundler","name":"2010 05 19 a second look at bundler","href":"2010/05/19/a-second-look-at-bundler/index.html","date":"2010-05-19","author":"trans","summary":"<h1>A Second Look at Bundler</h1>\n\n<p>A few days ago I wrote an article on my concerns with Bundler. Since then I've received enough feedback to refine my thoughts. My opinion that the Ruby/Rails community is on a \"crazy train\" with regards to Bundler has everything to do with state of complexity of Rails code these days and it's infiltration into plain vanilla Ruby projects. Of course, Bundler's intent is to do just the opposite, but such is the danger of new technologies that we must be cautious of inevitable unexpected consequences. So, taking the feedback into account, here's a better breakdown of the ups and downs of Bundler as I now see them.</p>"},"2010 06 02 xdg next generation":{"title":"2010 06 02 xdg next generation","name":"2010 06 02 xdg next generation","href":"2010/06/02/xdg-next-generation/index.html","date":"2010-06-02","author":"trans","summary":"<h1>XDG NG</h1>\n\n<p>I can never stress enough the value of using the XDG directory standard to\ndevelopers. This is one of those standards that can only really benefit us\nall if enough developers truly care to make a better eco-system.</p>"},"2010 06 04 do the right thing git porcelain":{"title":"2010 06 04 do the right thing git porcelain","name":"2010 06 04 do the right thing git porcelain","href":"2010/06/04/do-the-right-thing-git-porcelain/index.html","date":"2010-06-04","author":"trans","summary":"<h1>The \"Do The Right Thing\" Git Porcelain</h1>\n\n<p>Before making any changes to a program, a good developer will make an entry in an issue tracker and then create a separate branch in which to handle the issue. Only then making the necessary changes and finally merge the changes into to the master branch when they are ready. All before finally marking off the issue as complete.</p>"},"2010 10 13 ruby aop made simple":{"title":"2010 10 13 ruby aop made simple","name":"2010 10 13 ruby aop made simple","href":"2010/10/13/ruby-aop-made-simple/index.html","date":"2010-10-13","author":"trans","summary":"<h1>Ruby AOP Made Easy</h1>\n\n<h2>Quick Recap</h2>\n\n<p>Aspect Oriented Programming (AOP) is a topic I have spent a fair amount of\ntime contemplating. I, along with Peter VanBroekhoven, developed\nthe concept of Cut-based AOP back in <code>05-</code>06. A limited \"toy\" implementation of\nwhich can be had by installing the <code>cuts</code> gem. The basic idea behind Cut-based\nAOP is the <i>transparent subclass</i>, a.k.a. the <em>cut</em>, which is essentially\na subclass that subsumes the role of the class it effects without the programmer\nneeding any knowledge of it doing do. In this way, the cut serves as the atomic\nconstruct in a purely object-oriented appraoch to AOP. You can read more about it\n<a href=\"http://github.com/rubyworks/cuts/blob/master/RCR.textile\">here</a>.</p>"},"2011 07 09 we dont need no stinking modules":{"title":"2011 07 09 we dont need no stinking modules","name":"2011 07 09 we dont need no stinking modules","href":"2011/07/09/we-dont-need-no-stinking-modules/index.html","date":"2011-07-09","author":"trans","summary":"<h1>We Don't Need No Stinking Modules</h1>\n\n<p>Among experienced developers you will hear no end of praise for delegation. All things considered, it is the most powerful, flexible and controllable means of incorporating reusable behaviors. Even so, I recollect that I once read, no object-oriented programming language utilized delegation as it's only means of handling modules.</p>"},"2011 09 05 on the meaninglessness of class vs module":{"title":"2011 09 05 on the meaninglessness of class vs module","name":"2011 09 05 on the meaninglessness of class vs module","href":"2011/09/05/on-the-meaninglessness-of-class-vs-module/index.html","date":"2011-09-05","author":"trans","summary":"<h1>Fear Not the Wereclass</h1>\n\n<p><strong>DRAFT</strong></p>"},"2011 09 07 ruby heart higher order functions":{"title":"2011 09 07 ruby heart higher order functions","name":"2011 09 07 ruby heart higher order functions","href":"2011/09/07/ruby-heart-higher-order-functions/index.html","date":"2011-09-07","author":"trans","summary":"<h1>Ruby Heart High-Order Functions</h1>\n\n<p>Ruby Facets has a class called <a href=\"http://rubyworks.github.com/rubyfaux/?doc=http://rubyworks.github.com/facets/docs/facets-2.9.3/core.json#api-class-Functor\">Functor</a>. In common computer science parlance \"functor\" simply means an objectified function. Ruby already has more than it's share of these with Method, Proc and blocks. So what does Functor bring to the table? Its a bit more that just a first-class function. Rather, it is a <i>higher-order function</i>. What it allows us to do is define a function that responds dynamically to a message call. Here is a very basic example to clarify the idea.</p>"},"2011 09 10 is it an attribute":{"title":"2011 09 10 is it an attribute","name":"2011 09 10 is it an attribute","href":"2011/09/10/is-it-an-attribute/index.html","date":"2011-09-10","author":"trans","summary":"<h1>Is it an Attribute?</h1>\n\n<p>What exactly is an attribute? From the standpoint of OOP, a Ruby attribute is \nintended to be what is generally referred to as an <i>accessor method</i>.\nAn accessor method is a means of direct access to an object's underlying state.\nIn other words, it is a method for direct access to an instance variable. And\nthat is exactly what Ruby's helper class methods, i.e. <code>attr</code>, <code>attr_reader</code>,\n<code>attr_writer</code> and <code>attr_accessor</code>, achieve.</p>"},"2011 10 02 indentured stringitude":{"title":"2011 10 02 indentured stringitude","name":"2011 10 02 indentured stringitude","href":"2011/10/02/indentured-stringitude/index.html","date":"2011-10-02","author":"trans","summary":"<h1>Indentured Stringitude</h1>\n\n<p>One of the great things about Ruby is the extensive collection of methods\navailable to the core classes. Of these the String class reigns supreme with\nover 100 methods from which to make good use. Among these methods are those we\nall use almost every time a string is laid to editor, such as #strip, #+ and #&lt;&lt;.\nOthers are present that have more specific but important uses, such as #lines, #scan\nand #getbyte. There are even a few that can leave one scratching ones head\na bit trying to fathom the usecase, such as #sum.</p>"},"2011 10 04 lazy plus enumerable begats denumerable":{"title":"2011 10 04 lazy plus enumerable begats denumerable","name":"2011 10 04 lazy plus enumerable begats denumerable","href":"2011/10/04/lazy-plus-enumerable-begats-denumerable/index.html","date":"2011-10-04","author":"trans","summary":"<h1>Lazy + Enumerable = Denumerable</h1>\n\n<p>All Rubyists know and love Enumerable. It's the really the showcase of Ruby's mixin system. Some Rubyists also know and appreciate <a href=\"http://moonbase.rydia.net/software/lazy.rb/\">lazy.rb</a> MenTaLguY's excellent lazy evaluation library. But did you know there is library that essentially cross-breeds the ideas of both? It's called <a href=\"http://github.com/rubyworks/facets/blob/master/lib/core/facets/denumerable.rb\">Denumerable</a> and is included in Ruby Facets (<code>require 'facets/denumerable'</code>).</p>"},"2012 01 19 rubys unexceptional exception constructor":{"title":"2012 01 19 rubys unexceptional exception constructor","name":"2012 01 19 rubys unexceptional exception constructor","href":"2012/01/19/rubys-unexceptional-exception-constructor/index.html","date":"2012-01-19","author":"trans","summary":"<p>You would think after all this time Ruby's Exception class would be a rather robust and clearly comprehensible class.</p>"},"2012 02 25 setting priorities trumps warnings":{"title":"2012 02 25 setting priorities trumps warnings","name":"2012 02 25 setting priorities trumps warnings","href":"2012/02/25/setting-priorities-trumps-warnings/index.html","date":"2012-02-25","author":"trans","summary":"<h1>Setting Priorities Trumps Warnings</h1>\n\n<p>Today I had to consider how best to handle omission exceptions in the context of test frameworks, and their use case to mark <em>pending tests</em>. In the course of doing so, I realized there are at least two reasonable levels of omission, those there are \"ASAP\" and those that are \"NSM\" (Not So Much). Where as other frameworks used their own specially defined classes for these, e.g <code>Pending</code> and <code>Omission</code>, my approach is to re-utilize Ruby's own <code>NotImplementedError</code>. But then I had to consider how to differentiate between these priorities.</p>"},"2012 03 21 configuration rodeo":{"title":"2012 03 21 configuration rodeo","name":"2012 03 21 configuration rodeo","href":"2012/03/21/configuration-rodeo/index.html","date":"2012-03-21","author":"trans","summary":"<h1>Configuration Rodeo</h1>\n\n<p>The history of configuration file conventions for Ruby projects has not been a particularly conclusive one. No one pervasive convention has ever developed. No developer has ever laid down a clear set of rules of engagement that we all can agree are worthy of follow. Rather, the realm of the developer in working out how to handle configuration for their project tools still smacks a bit of the Wild West. </p>"},"2012 04 13 peanut butter and chocolate handlebars":{"title":"2012 04 13 peanut butter and chocolate handlebars","name":"2012 04 13 peanut butter and chocolate handlebars","href":"2012/04/13/peanut-butter-and-chocolate-handlebars/index.html","date":"2012-04-13","author":"trans","summary":"<h1>Peanut Butter and Chocolate Handlebars</h1>\n\n<p>This week I've been working on the <a href=\"http://github.com/rubyworks/shomen\">Shomen</a> documentation project. In particular I've been converting the templates of my three web-based documentation viewers to compiled templates in order to boost rendering speed. Originally these viewers were using <a href=\"http://aefxx.com/jquery-plugins/jqote2/\">jqote2</a> in one case (<a href=\"http://github.com/rubyworks/hypervisor\">hypervisor</a>) and <a href=\"https://github.com/jquery/jquery-tmpl\">jquery-tmpl</a> in the other two cases (<a href=\"http://github.com/rubyworks/rebecca\">rebecca</a> and <a href=\"http://github.com/rubyworks/rubyfaux\">rubyfaux</a>). While ascertaining what compilation solution to use, I tried the <a href=\"https://github.com/wookiehangover/jquery-tmpl-jst\">jquery-tmpl-jst</a> for the later two, but immediately ran into fundamental errors. (Sorry, I don't recollect exactly what the errors were now). They were problematic enough to send me looking else where, and ultimately I decided on <a href=\"http://handlebarsjs.com/\">Handlebars.js</a>.</p>"},"2012 04 14 all quiet on the google front":{"title":"2012 04 14 all quiet on the google front","name":"2012 04 14 all quiet on the google front","href":"2012/04/14/all-quiet-on-the-google-front/index.html","date":"2012-04-14","author":"trans","summary":"<h1>All Quiet on the Google Front</h1>\n\n<p>As I write this I am am on hold to Google main line. I've been on hold for nearly an hour. <i>\"... Your call is important to us and we appreciate your patience. Please stay on the line and our next available representative will be with you shortly...\"</i> </p>"},"2012 05 09 proper construction of a class":{"title":"2012 05 09 proper construction of a class","name":"2012 05 09 proper construction of a class","href":"2012/05/09/proper-construction-of-a-class/index.html","date":"2012-05-09","author":"trans","summary":"<h1>The Proper Construction of a Class [DRAFT]</h1>\n\n<p>A general principle of good programming is SOC, Separation of Concerns. SOC\nis a general rule that helps us break code up into logical groups around a single concern.\nMore often the principle is applied at a systems level via separate packages, tools, libraries\nor components. But the principle is equally applicable to a class itself.</p>"},"2012 05 11 the problem with programming":{"title":"2012 05 11 the problem with programming","name":"2012 05 11 the problem with programming","href":"2012/05/11/the-problem-with-programming/index.html","date":"2012-05-11","author":"trans","summary":"<h1>[DRAFT] THE PROBLEM WITH PROGRAMMING</h1>\n\n<p>Programming is the art of tying thought to syllogism. The programmer must take an often nebulous idea and encode it into a symbolic logical language. By it's very nature then, there is gap that must be breached between the thoughts of the programmer (harder still the thoughts of his client) and the \nconstruction of their autonomic model. This then is the problem of programming: finding ways \nto shrink that gap.</p>"},"2012 05 23 real metal":{"title":"2012 05 23 real metal","name":"2012 05 23 real metal","href":"2012/05/23/real-metal/index.html","date":"2012-05-23","author":"trans","summary":"<h1>Real Metal</h1>\n\n<p>One of the most regarded capabilities of Ruby, in contrast to many other programming languages, is its powerful meta-programming chops. While not every aspect of the language is meta-programmable, the vast majority of Ruby is. But despite its prowess, there is a serious weaknesses in its design: <em>The functions on which meta-coders depend have no guarantee</em>. </p>"},"2012 06 13 instance variables as syntax sugar":{"title":"2012 06 13 instance variables as syntax sugar","name":"2012 06 13 instance variables as syntax sugar","href":"2012/06/13/instance-variables-as-syntax-sugar/index.html","date":"2012-06-13","author":"trans","summary":"<h1>Instance Variables as Syntax Sugar</h1>\n\n<p>What are instance variables? If we think of them as a single unit we note that they represent an object <em>state</em>, which as a data structure is really nothing more than a <em>hash</em>. Indeed, it is quite feasible to forgo the use of instance variables altogether save one, to serve as the object's state.</p>"},"2012 06 14 autoload smells like denmark":{"title":"2012 06 14 autoload smells like denmark","name":"2012 06 14 autoload smells like denmark","href":"2012/06/14/autoload-smells-like-denmark/index.html","date":"2012-06-14","author":"trans","summary":"<h1>Autoload Smells Like Denmark</h1>\n\n<p>Ruby has a very cool feature called <em>autoload</em>. With autoload, any undefined constant can automatically trigger the loading of a library file. Effectively this gives Ruby a convenient means of lazy loading. For example, lets say some of our app's executable scripts ultimately use the ANSI library, but others do not. We can use <code>autoload</code> to only load the ANSI library when it is needed.</p>"},"2012 06 17 kill the proxy and save toplevel":{"title":"2012 06 17 kill the proxy and save toplevel","name":"2012 06 17 kill the proxy and save toplevel","href":"2012/06/17/kill-the-proxy-and-save-toplevel/index.html","date":"2012-06-17","author":"trans","summary":"<h1>Kill the Proxy and Save Toplevel</h1>\n\n<p>One of the more curious aspects of Ruby is the \"top level\" object, otherwise known as <code>main</code>.</p>"},"2012 06 25 is it time to leave home":{"title":"2012 06 25 is it time to leave home","name":"2012 06 25 is it time to leave home","href":"2012/06/25/is-it-time-to-leave-home/index.html","date":"2012-06-25","author":"trans","summary":"<h1>Is It Time to Leave Home?</h1>"},"2012 06 26 Example":{"title":"2012 06 26 Example","name":"2012 06 26 Example","href":"2012/06/26/Example/index.html","date":"2012-06-26","author":"trans","summary":"<h1>Example</h1>\n\n<p>This is an example. I am wondering how this gets saved.</p>"},"2012 07 04 crossing the assets divide":{"title":"2012 07 04 crossing the assets divide","name":"2012 07 04 crossing the assets divide","href":"2012/07/04/crossing-the-assets-divide/index.html","date":"2012-07-04","author":"trans","summary":"<h1>Crossing the Assets Divide</h1>\n\n<p>Working on <a href=\"http://github.com/rubyworks/smeagol\">Smeagol</a>, a read-only Gollum server and static site generator, I've come across an unusual issue. One of the features Smeagol provides is the ability to view page history. By providing a git commit-id or a tag name in the URL, an older version of any page can be viewed. Now, if a page includes a local asset, an image being the typical example, that file clearly must come from the same commit as well. And here is were a problem arises. While <em>content assets</em> must be versioned, <em>design assets</em> must not. We may want to look at the content of an old page for historical reference; we don't want look at it as if on the website as it was designed way back when. Indeed, the functionality of the site back then might have had bugs in it, it might have a had a very stark layout, it might have any number of issues which have since been corrected. Certainly the site should not serve up old stylesheets, javascripts, background images and the like. Only old <em>content</em> must be served.</p>"},"Example":{"title":"Example","name":"Example","href":"Example/index.html","author":"trans","summary":"\n<p>This is an example.</p>"},"Home":{"title":"Home","name":"Home","href":"index.html","author":"trans","summary":"<p>7rans is self-taught coder who has been coding Ruby since 2002.</p>"},"Projects":{"title":"Projects","name":"Projects","href":"Projects/index.html","author":"trans","summary":"<p><a href=\"http://rubyworks.github.com\"><img src=\"http://trans.github.com/assets/images/rubyworks.png\" alt=\"Rubyworks\"></a>\n<a href=\"http://death.rubyforge.org\"><img src=\"http://trans.github.com/assets/images/skull4.png\" alt=\"The Deadly\"></a>\n<a href=\"http://rubyworks.github.com/facets\"><img src=\"http://trans.github.com/assets/images/RubyFacets.png\" alt=\"Ruby Facets\"></a></p>"},"Reads":{"title":"Reads","name":"Reads","href":"Reads/index.html","author":"trans","summary":"<p><a href=\"http://rubyinside.com/\"><img src=\"http://www.rubyinside.com/wp-content/themes/rubyinside2009/images/logo2.png\" alt=\"Ruby Inside\"></a></p>"},"Tools":{"title":"Tools","name":"Tools","href":"Tools/index.html","author":"trans","summary":"<p><a href=\"http://ruby-lang.org\"><img src=\"http://trans.github.com/assets/images/ruby-lang.png\" alt=\"Ruby\"></a>\n<a href=\"http://github.org\"><img src=\"http://trans.github.com/assets/images/github-logo.png\" alt=\"GitHub\"></a>\n<a href=\"http://jquery.com\"><img src=\"http://trans.github.com/assets/images/jquery-logo.gif\" alt=\"jQuery\"></a>\n<a href=\"http://cukes.info\"><img src=\"http://trans.github.com/assets/images/cuke_logo.png\" alt=\"jQuery\"></a></p>"}}