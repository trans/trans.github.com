<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://trans.github.com</link>
    <atom:link href="http://trans.github.com/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Mon, 23 Jun 2014 15:50:00 +0000</pubDate>
    <lastBuildDate>Mon, 23 Jun 2014 15:50:00 +0000</lastBuildDate>

    
    
    <item>
      <title>My Critique Of Elixir</title>
      <link>http://trans.github.com/2014/06/17/My-Critique-of-Elixir/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2014/06/17/My-Critique-of-Elixir</guid>
      <description>&lt;p&gt;First, let me admonish myself for having limited knowledge of the subject. I am far from an Elixir expert. So I readily defer to those with more experience that can make a solid contrary argument against my conclusions. However, as I am unlikely to continue on in my adventures with Elixir, this is clearly the only time I have left to opine on the topic. So I will do so, and feel free to take my opinions with as much salt as you feel necessary.&lt;/p&gt;

&lt;p&gt;There are many things to like about Elixir. Most notable of them is it&amp;#39;s inheritance from Erlang and it&amp;#39;s improved syntax inspired by Ruby. Its Erlang roots bring so many great features to the table: true functional programming, rock solid stability, distributed computing, and so on. Anything that is good about Erlang, is likewise good about Elixir. On top of this, Elixir brings a much more pleasurable syntax and a few higher-level conveniences which really set it apart from Erlang. (Otherwise there would be no point but to use Erlang directly). But then there are the caveats. &lt;/p&gt;

&lt;p&gt;On the minor end, Elixir&amp;#39;s code documentation is a bit odd. Documentation of modules is placed within the &lt;code&gt;defmodule&lt;/code&gt; block, while documentation of functions are placed on the outside the &lt;code&gt;def&lt;/code&gt; blocks. Why the difference? In addition there is no sigil at the beginning of documentation lines to clearly indicate a comment. If a documentation section were large enough, one could mistake examples for actual program code. Only by the magic of syntax highlighters are we saved from any such &amp;quot;at a glance&amp;quot; error. &lt;/p&gt;

&lt;p&gt;Then there is the minor issue of the &lt;code&gt;def&lt;/code&gt; prefix on the definition of everything. &lt;code&gt;defmodule&lt;/code&gt;, &lt;code&gt;defstruct&lt;/code&gt;, &lt;code&gt;deftype&lt;/code&gt;, etc. One can understand the desire to avoid too many keywords, but surely &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; would do much better, as they do in almost every other language, and can be avoided as keywords if need be by appropriate context.&lt;/p&gt;

&lt;p&gt;A little more troubling is the awful block syntax. Despite all the inspiration form Ruby, Elixir did not adopt Ruby&amp;#39;s elegant block syntax. Instead we get a strange twist of &lt;code&gt;fn&lt;/code&gt; keyword, an arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; and an &lt;code&gt;end&lt;/code&gt; keyword, all within the argument parenthetical.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;elixir language-elixir&quot; data-lang=&quot;elixir&quot;&gt;  &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It feels a bit more like Javascript than Ruby. Ironically, this ugliness doesn&amp;#39;t save us from a whole mess of seemingly extraneous &lt;code&gt;do&lt;/code&gt; statements everywhere. Every &lt;code&gt;def*&lt;/code&gt; and even every condition like &lt;code&gt;if&lt;/code&gt; also requires a &lt;code&gt;do&lt;/code&gt; to define the subsequent block.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;elixir language-elixir&quot; data-lang=&quot;elixir&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It might not seem like much, but when you write enough code and find yourself having to always fix missing do&amp;#39;s first off, you can&amp;#39;t help but feel as if your time could be spent on more useful endeavors.&lt;/p&gt;

&lt;p&gt;On a higher level of critique, I think Elixir, like Erlang and their ML brethren, suffer from &lt;em&gt;Overtype Syndrome&lt;/em&gt;, if you will allow me to coin a phrase. Because the language is both functional and so strongly typed, every method comes by way of a module. So instead of say, &lt;code&gt;list.each{...}&lt;/code&gt; as in Ruby, one much specify where &lt;code&gt;each&lt;/code&gt; is defined, &lt;code&gt;Enum.each(list, ...)&lt;/code&gt;. And because one must repeat these module names over and over, there is a naturally common practice of extreme abbreviation. In some fashion it&amp;#39;s nice that names are concise. Yet it can be a bit difficult encountering module names like &lt;code&gt;IEx&lt;/code&gt; in passing. In addition, we end up with a whole slew of modules and types with which to contend. Of course this can be true of any strongly typed language, but it seems especially so for the ML branch of languages.&lt;/p&gt;

&lt;p&gt;Finally, my last niggle is with functional programming in general. Honestly, it&amp;#39;s pretty awesome. But just as honestly, it is difficult. The lack of procedural techniques puts a significant onus on the functional language to provide a large set of easy to understand and easy to utilize functions to pipe together to achieve the desired result. Partly it is due to lack of experience in thinking functionally, but it is clear enough that even for very component functional programmers it can be a real challenge to piece together the right functions to solve a complex problem. I believe this is because functional programming forces you to think about the whole more so than procedural programming. With a procedure, one can quickly break down a problem into parts. e.g. &amp;quot;I have an array of strings, which I need to iterate over and extract each word, and for each word, make it lowercase, and then update a hash table to track the number of times the word occurs.&amp;quot; Easy enough. Functionally the reads more like, &amp;quot;I need to build a dict via a flat-map over a list of strings and the list of words in each while lowering the case of each word, with an updated key/value pair.&amp;quot; Or something like that. It is simply harder to even to talk in functional terms.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Next Level Please</title>
      <link>http://trans.github.com/2014/03/29/Next-Level-Please/</link>
      <pubDate>Sat, 29 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2014/03/29/Next-Level-Please</guid>
      <description>&lt;p&gt;What I want my computer to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authenticate id&lt;/li&gt;
&lt;li&gt;Manage privacy&lt;/li&gt;
&lt;li&gt;Tell time and keep a calendar

&lt;ul&gt;
&lt;li&gt;Set reminders and alarms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Provide weather report(s)&lt;/li&gt;
&lt;li&gt;Map w/ Global positioning&lt;/li&gt;
&lt;li&gt;Messaging (Text and Email)&lt;/li&gt;
&lt;li&gt;Translate other languages&lt;/li&gt;
&lt;li&gt;Search and Surf Internet&lt;/li&gt;
&lt;li&gt;File Manager (Advanced)&lt;/li&gt;
&lt;li&gt;Play music (personal and internet stations)&lt;/li&gt;
&lt;li&gt;Show pictures

&lt;ul&gt;
&lt;li&gt;Multiple i/o Dropbox, Google Drive, Local ?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Premium modules&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit Photos&lt;/li&gt;
&lt;li&gt;Vector Drawing (has own tools interface)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Interface&lt;/h2&gt;

&lt;p&gt;Everything should be voice driven. Voice commands are translated into a set of objectives. The user can see these objectives in simple command form and decide if it is acceptable. &lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Each module shall be written to a shared interchange specification. 
Messages are sent via JSON (or JSONP) and results received.
Some results contain caching &lt;em&gt;functors&lt;/em&gt; which perform the same function as the original call.
The cache allows light-weight functionality to be hosted cost-effectively, without bandwidth saturation.&lt;/p&gt;

&lt;p&gt;So for example, say I want to provide a photo effect algorithm.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;---
input:
  - uri: *.jpg *.png
  - return-type:
output:
  - File .jpg .png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    
    
    <item>
      <title>Html Follies</title>
      <link>http://trans.github.com/2014/01/20/HTML-Follies/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2014/01/20/HTML-Follies</guid>
      <description>&lt;p&gt;HTML Follies&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DRAFT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Despite all its glories, HTML also has some serious follies. I&amp;#39;ve never thought highly of the W3C in general. They seem to be on a never ending quest to build standards at a snails pace, yet end up with a result that is barely an improvement over previous solutions --if not actually worse. And unfortunately it is too often at an intolerable level of new complexity. For some reason K.I.S.S. seems to have been left off their principles sheet. For some clear examples, consider [XMLST] and [XML-fo]. I think [Web Components] are the latest ranking member.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s go through some of the glaring issues with HTML, what would be an appropriate solution and perhaps make some suggestion for how to mitigate the issue while still under the yolk of current standards.&lt;/p&gt;

&lt;h2&gt;Headers Ought to be Titles&lt;/h2&gt;

&lt;p&gt;Presently HTML authors must handle the titling of sections as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;New Chapter&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We assume here that the author was at least wise enough to put the header in the section and not above it. But why &lt;code&gt;h2&lt;/code&gt; (which is a common choice)? Why not &lt;code&gt;h1&lt;/code&gt; or &lt;code&gt;h3&lt;/code&gt;? Well, there is no real reason. The document creator simply choose &lt;code&gt;h2&lt;/code&gt; because it was in suitable font size as setup in the CSS. And therein lies a clear failure of design. The element is not being selected semantically. A proper design would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;section&amp;gt;
  &amp;lt;title&amp;gt;New Chapter&amp;lt;/title&amp;gt;
  &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alas, HTML has no &lt;code&gt;title&lt;/code&gt; element (outside of &lt;code&gt;head&lt;/code&gt;). We could argue for a numberless &lt;code&gt;h&lt;/code&gt; instead, but it amounts to essentially the same thing. Yet the term &lt;code&gt;title&lt;/code&gt; is much more telling. Likewise &lt;code&gt;subtitle&lt;/code&gt; is much more telling than any &lt;code&gt;h2&lt;/code&gt; or &lt;code&gt;h3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What to do now?&lt;/strong&gt; Our best course of action is to always use &lt;code&gt;h1&lt;/code&gt; for titles and use &lt;code&gt;h2&lt;/code&gt; for subtitles. Headers &lt;code&gt;h3&lt;/code&gt;-&lt;code&gt;h6&lt;/code&gt; should rarely, if ever, be of any use.&lt;/p&gt;

&lt;h2&gt;Padding Undermines Width&lt;/h2&gt;

&lt;p&gt;Technically this is a CSS issue, but these days it&amp;#39;s not reasonable to separate it from HTML. The two are intractably linked. &lt;/p&gt;

&lt;p&gt;Padding should not add width. If the width of an element is specified and a padding is added, then the inner width should reduce accordingly.&lt;/p&gt;

&lt;p&gt;Thankfully this has been addressed in the latest HTML version. &lt;em&gt;Hallelujah!&lt;/em&gt; ...&lt;/p&gt;

&lt;h2&gt;Open Semantics&lt;/h2&gt;

&lt;p&gt;Lastly, the ultimate end point of the development of HTML is to separate the markup of structure from that of the meaning of the tags. This is in fact what the W3C was attempting with XML and XSLT. But that approach failed. It was too complicated. A new approach using CSS instead of XSLT could do better.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;chapter&amp;gt;
  &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;/chapter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Chapter isn&amp;#39;t a recognized tag. But the CSS could be used to identify it.&lt;/p&gt;

&lt;p&gt;chapter {
    tag: section
  }&lt;/p&gt;

&lt;p&gt;Thus the CSS informs the document to treat &lt;code&gt;chapter&lt;/code&gt; tags as if they were &lt;code&gt;section&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Current the W3C&amp;#39;s solution to this is Web Components. And while some of the Web Components specification is needed for more complex problems. It is still has a piss poor interface, and is a complete overkill for simple cases like the one above.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Transpilers To Watch</title>
      <link>http://trans.github.com/2013/09/17/Transpilers-to-Watch/</link>
      <pubDate>Tue, 17 Sep 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/09/17/Transpilers-to-Watch</guid>
      <description>&lt;h1&gt;Transpilers to Watch&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;CoffeeScript&lt;/a&gt; is fairly ubiquitous technology these days --a &lt;em&gt;transpiler&lt;/em&gt; that converts it&amp;#39;s own much nicer language into Javascript which can then be run via Node.js or on the Web. But it&amp;#39;s not the only fish in this sea. Here are three similar projects that look very promising.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://texodus.github.io/forml/&quot;&gt;Forml&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A contemporary programming language for the discriminating programmer,
intended to approximate the safety of Haskell and the expressiveness
of Ruby. Should such an approximation turn out to exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a href=&quot;http://noflojs.org/&quot;&gt;NoFlo&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;NoFlo is a JavaScript implementation of Flow-Based Programming (FBP).
Separating the control flow of software from the actual software logic.
Helping you organize large applications easier than traditional OOP
paradigms, especially when importing and modifying large data sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;a href=&quot;http://opalang.org/&quot;&gt;Opal&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Opa is a full-stack open source web development framework for JavaScript
that lets you write secure and scalable web applications.
Opa handles all aspects of web programming: frontend (client code),
backend (server code) and database queries are all written in one
consistent language and compiled to standards of the web.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Revelation Knowledge</title>
      <link>http://trans.github.com/2013/09/04/Revelation-Knowledge/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/09/04/Revelation-Knowledge</guid>
      <description>&lt;p&gt;I just had a revelation about programming languages.&lt;/p&gt;

&lt;p&gt;Coming into this project, my primary goal was to rate a Forth derivative, that added types, polymorphism and functional-orientation to the language. That goal is proceeded reasonably well. However, in the course of thinking about all the varying aspects of the design I hit upon a very interesting concept. I asked, &amp;quot;What does the computer know?&amp;quot; In other words, how are we really informing the computer about our systems as we program. It only stands the reason that the more the computer knows the more we easily we can communicate our intent.&lt;/p&gt;

&lt;p&gt;So lets start with the bread and butter the algorithm, and seeing that we want to stay in the realm of functional-programming ultimately will strictly speak of functions. But to proceed, lets get our barrings by asking what other languages tell the computer about such these things, whether they be procedures, functions or methods.&lt;/p&gt;

&lt;p&gt;Forth is probably the most basic in this regard of all languages, with the exception of Assembly. It doesn&amp;#39;t tell the computer anything at all about a &lt;em&gt;word&lt;/em&gt; (Forth&amp;#39;s term for these things) other then the procedure by which it is calculated. Some Forth words provide terse stack diagrams but they are simply comments, ignored by the computer.&lt;/p&gt;

&lt;p&gt;Other languages, like Ruby, are essentially the same as Forth. Ruby is a dynamic language, so it doesn&amp;#39;t provide types for method arguments. To a limited degree names are provided for them, but they are promptly thrown away by the interpretor, so the computer is no more knowledgeable in that regard either. We do get one piece of extra information though. We can ask Ruby what the arity of a method is.&lt;/p&gt;

&lt;p&gt;Python takes us a tad step further with regards the argument names. One can pass arguments to a method by name. That&amp;#39;s an improvement, but that&amp;#39;s about as far as it goes.&lt;/p&gt;

&lt;p&gt;On the other side of things, there are languages like Java which are very strictly typed. But the types do little more than inform the compiler how to do it&amp;#39;s job better. In the language itself we can&amp;#39;t really ask about them. The names of the parameters are still ultimately disposable to the computer. (I wouldn&amp;#39;t be surprised if there is some insanely complicate reflection library out there for Java that would make some of this possible, but regardless it is not part of the &lt;em&gt;real&lt;/em&gt; language.)&lt;/p&gt;

&lt;p&gt;Then there are languages like Haskell which are strictly typed and can tell us all about those types. &lt;/p&gt;

&lt;p&gt;Haskell&amp;#39;s about the state of the art at this point. There isn&amp;#39;t a language I know of that informs the computer more about it&amp;#39;s functions.&lt;/p&gt;

&lt;p&gt;So then I asked, what would be a &lt;em&gt;knowledgeable design&lt;/em&gt; such that the computer would know about these things we computers use day in and day out, and really be able to converse with us about them, so to speak.
Well, lets break it down. What is there to know about a function?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arity&lt;/li&gt;
&lt;li&gt;Types of the arguments&lt;/li&gt;
&lt;li&gt;Types of the return values&lt;/li&gt;
&lt;li&gt;Name of the function&lt;/li&gt;
&lt;li&gt;Name of the arguments&lt;/li&gt;
&lt;li&gt;Definition of the function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beside these, it may even behoove us to inform the computer about aliases for the various names, so it is easier to talk about these things for different programmers who might not be as with the code, or just to give us some programmer to speak more naturally, rather than always being so tortured to use the exact term.&lt;/p&gt;

&lt;p&gt;Lets try and example, by writing out some pseudo-code for a function. Let&amp;#39;s keep it simple, say, calculating the tip for a check.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;function tip(amount, percentage)
  typeof amount Currency
  typeof percentage Float

  default amount $0
  default percentage 20%

  aliases percentage percent pnct pct
  aliases amount price cost

  definition amount * percentage

  return-type Currency
end

aliases tip gratuity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But notice we also said &amp;quot;tip &lt;em&gt;for a check&lt;/em&gt;&amp;quot;. That means something, so in our pseudo-code lets try to express that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;context tip check

aliases check bill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay. So what do we have after all that? Well, at the very least we have a way to speak to the computer about the various parts of our function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;tip.parameters  =&amp;gt; [amount, percentage]
tip.return_type =&amp;gt; Currency
tip.parameter(amount).type  =&amp;gt; Currency
tip.parameter(pcnt).default =&amp;gt; 20%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on. We can also call the function of course, but we could do so in unique way now. We can do it in an object-oriented way. After we do have a &lt;em&gt;thing&lt;/em&gt; that is our function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;mytip = new tip
mytip.amount = $100.00
mytip.return  =&amp;gt; $20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in the larger scheme of things, if that is all there were it might not get us too much further than the programming languages we mentioned above. But, we might now be able take all this new found knowledge granted to the computer about our program and start asking it to do some things we might normally do ourself.&lt;/p&gt;

&lt;p&gt;For example, lets describe to the computer the concept of paying for lunch.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;function pay(bill, tender)
  type bill Bill
  type tender Currency
  definition
    tender - (tally + gratuity(pcnt: 20%))  # this right here!
  return-name change 
  type change Currency

object Bill(menu-items, tax)
  type menu-items List(Product)
  type tax Percentage

function tally(bill)
  type bill Bill
  definition
     net = sum(bill.menu_items.each.cost) 
     net + net * tax
  aliases tally price cost
  return-type Currency

object Product(name, price)
  aliases price cost
  type name String
  type price Currency
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look closely at the line &lt;code&gt;tally + gratuity&lt;/code&gt;. Notice we didn&amp;#39;t say &lt;code&gt;bill.tally + tip(bill.tally)&lt;/code&gt;. Not I know my pseudo code doesn&amp;#39;t really get us to the point where it&amp;#39;s clear how we can be so concise. But I think the basic notion is there. The idea is that by explicitly defining the various parts of our model, drawing relationships between those parts via aliases then the computer itself can start to make the connections between the return values and the input parameters for us.&lt;/p&gt;

&lt;p&gt;I suspect if this kind of approach is taken to it&amp;#39;s natural conclusion, it should ultimately allow us to write much more reusable code, write that code in a much more natural and information rich manner.&lt;/p&gt;

&lt;p&gt;Taking a step back, I believe it would be too much of undertaking for me to endeavor upon at this point. Nonetheless it does move me in a smarter direction with March --to make the language more knowledgeable.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Drink Me</title>
      <link>http://trans.github.com/2013/08/11/drink-me/</link>
      <pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/08/11/drink-me</guid>
      <description>&lt;h1&gt;Drink Me&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;A Case For and Against Elixir&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is thinking functionally a bit of a black art?&lt;/p&gt;

&lt;p&gt;As I explained in a previous post, I have been writing a genetic algorithm to find the best layout of a keyboard based on a set of ergonomic principles. I decided to write the program in both Go and Elixir as a way to &amp;quot;learn me some new programmings languages for the greater good&amp;quot;. Writing the Go program went very smoothly. I had a good working program in just over a day&amp;#39;s work. The Elixir code on the other hand has taken me close to three days and I am still trying to work out issues. I attribute most of this long spell to the paradigm shift one must make when switching from a procedural to a functional way of doing things.&lt;/p&gt;

&lt;p&gt;I have two examples from my work that I think demonstrate the difficultly of this shift.&lt;/p&gt;

&lt;p&gt;Originally I had written the following code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;elixir language-elixir&quot; data-lang=&quot;elixir&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_keyboards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;natural_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;         

        &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It all seemed rather reasonable to me. Turns out however, Elixir thought otherwise:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;variable best is unused
variable size is unused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My procedural mindset was geared toward the idea of using variables to track a state while iterating around in a loop. But for a functional language this is not the correct way to think about the problem. By reassigning best and size within the &lt;code&gt;reduce&lt;/code&gt; block function I was in effect creating new variables, not reassigning the ones defined outside.&lt;/p&gt;

&lt;p&gt;The solution, as is the case with many such procedural conversions, is to think recursively.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;elixir language-elixir&quot; data-lang=&quot;elixir&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_keyboards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;      if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;natural_selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;evolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newpop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;         
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After working this out, a part of me has to agree the fanboys of functional languages. This does smack of an certain elegance that the procedure solution lacks. The solution is also efficient thanks to &lt;em&gt;tail recursion&lt;/em&gt;, which avoids the usual call stack overhead of repeatedly calling nested functions.&lt;/p&gt;

&lt;p&gt;But then there was the routine that I have yet to figure out how to do in a more functional way. To get the following routine to work I basically had to make Elixir behave much like a procedural language --running in a loop shuffling list indexes around.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;elixir language-elixir&quot; data-lang=&quot;elixir&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeric_layout?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 0 or 1&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;child_layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# should generally never happen&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;make_keyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps it is inevitable that some procedural-esque code will always be present. In fact, that is the one caveat about functional programming that makes me wonder if maybe it&amp;#39;s &lt;em&gt;not quite all that&lt;/em&gt;. Some problems, that are relatively easy to solve in a traditional procedural language, seem markedly harder to solve functionally.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Should You Go</title>
      <link>http://trans.github.com/2013/08/06/Should-You-Go/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/08/06/Should-You-Go</guid>
      <description>&lt;h1&gt;Should You Go?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;2012-080-06 [DRAFT]&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Preface&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve been working on a (somewhat esoteric) IME for Android over that last couple of years and recently I decided to automate part of my design process. I had been manually evaluating keyboard layouts for ergonomic quality. After expending so much time and energy into evaluating one layout after another, trying to ascertain which is optimal in my mind without coming to any firm conclusion, I decided something had to give. And so I did what a coder does best: I wrote a program to figure it out for me. The idea was straight forward. I would codify the principles by which an ergonomic layout is to be judged, assign a score to each of those principles, and then have the computer shuffle through every permutation to find the one with the highest score.&lt;/p&gt;

&lt;p&gt;Thanks to its elegance and my high fluency in Ruby, I was able to whip out an initial working program in a few hours, and by the end of the day I was getting useful results. Unfortunately there was a problem. It was &lt;em&gt;Way Too Slow&lt;/em&gt;. The first culprit, it become clear, was that a brute force search wasn&amp;#39;t going to suffice. There were simply too many possibilities. To remedy that I added a simple genetic algorithm and seeded it with an initial population of layouts I already knew to be pretty good. That helped a lot, but it was still &lt;em&gt;Way Too Slow&lt;/em&gt;. So then I decide to turn this new problem into an opportunity. And that&amp;#39;s where this story gets interesting...&lt;/p&gt;

&lt;h2&gt;Learning Go&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve been wanting to learn a new modern programming language for a while. Having a relatively small yet substantial problem to solve made for the perfect excuse. After doing some research on Go, Julia, Haskell, Erlang and Elixir --all languages I expected to offer me a nice bump in speed (wait, isn&amp;#39;t that just about any language compared to Ruby?) I narrowed my choices to Elixir and Go. I choose Elixir because it was a &lt;em&gt;functional language&lt;/em&gt; but borrowed much of it&amp;#39;s syntax from Ruby. That would make the transition easier. And I choose Go because it was a lower-level language, potentially offering the greatest speed gain. I&amp;#39;ve always hated C and I will never endeavor to be proficient in it. But Go presents a much more approachable way to program that is fairly close to the metal like C. So I am pretty tickled by its prospects. I dived into the Elixir first, but I will save my thoughts on Elixir for a future post. The rest of this article will cover my initial thoughts on Go.&lt;/p&gt;

&lt;h2&gt;Initial Impression&lt;/h2&gt;

&lt;p&gt;If I were to sum things up as concisely as possible I would say this about Go: &amp;quot;The really good thing about Go is that there is so little to it. The really bad thing about Go is that there is so little to it.&amp;quot; That is very accurate. In Go, I had to write a function to scan an &lt;em&gt;array of string&lt;/em&gt; for members. I stress &amp;quot;array of string&amp;quot;, because, you guessed it, one would have to write a completely separate function for &lt;em&gt;array of int&lt;/em&gt;. Go has no general functions. Every function is type specific to its very bones. Many a questions on the golang-nuts mailing list ends with the post &amp;quot;There is no general solution...&amp;quot;. It really does seem crazy how many hoops one has to jump through to get things done. What would be a clear one-liner in Ruby, well, it will take at least a handful of lines in Go. In the future, I truly expect to hear old-time Go coders swapping legends about maintaining million lines of code. (Just like old times!)&lt;/p&gt;

&lt;p&gt;But!!! (&lt;em&gt;triple exclamation&lt;/em&gt;) There is a silver lining. As awful as all that sounds, the downright &lt;em&gt;simplisticness&lt;/em&gt;(TM) of Go does have two really great benefits. First, there isn&amp;#39;t much to learn with respect to the language itself. It literally takes a day to learn the basic constructs and to get up and running at a pretty good clip. Secondly, because every itty-bitty routine must be coded there is hardly any doubt as to exactly what the code is doing and there is plenty of room for optimization all along the way. This is one of the things that makes Go code so fast. Granted it leaves room for a poor coder to write less than optimal code too, but Go Trusts You. On the whole the extreme simplicity of the language is a net positive.&lt;/p&gt;

&lt;p&gt;Beyond that, coding in Go was fairly comfortable. The syntax is actually harder to read than it is write, as strange as that sounds. After writing Go code for just for a short while, it starts to feel very natural, which probably accounts for why I was able to write my program in just over a day, despite never having written a lick of Go before. In particular I have to give props to Go&amp;#39;s &lt;code&gt;for&lt;/code&gt; loop construction. The whole &lt;code&gt;for i, x := range anarray { ... }&lt;/code&gt; thing makes writing most loops a breeze.&lt;/p&gt;

&lt;h2&gt;Case-for-Visibility&lt;/h2&gt;

&lt;p&gt;One reason the code might be a little hard to read is Go&amp;#39;s use of function name capitalization to &amp;quot;export&amp;quot; a package&amp;#39;s public interface. There is a part of me that wants to agree with other that this is stroke of Genius. Many Rubyists feel the same about the capitalization of Class names. However, when ever I see capitalization being made significant in a language a little red flag goes off in the back of my head. Upon a more tempered consideration, it is perhaps easy to see why. The designers &lt;a href=&quot;http://golang.org/doc/faq#unicode_identifiers&quot;&gt;admit&lt;/a&gt; this is an issue for those who code in certain foreign languages. But they also say, &amp;quot;the case-for-visibility rule is unlikely to change however; it&amp;#39;s one of our favorite features of Go.&amp;quot; It would seem the designers might need a lesson on the &lt;a href=&quot;http://www.fastcompany.com/1802659/letter-editor-adrien-brody-rule&quot;&gt;Adrien Brody Rule&lt;/a&gt;. If it were only a convention it might be passable. But forcing it is really unacceptable for wider use as a global programming language. And personally, after the initial coolness wore off, I began to think it just looks bad. Alongside Go&amp;#39;s CamelCase convention (and you kind of have to do that once you require capitalization), you end up with  somewhat ugly, &amp;quot;Visually Basic&amp;quot; looking code. Clearly they missed the Ruby memo: When it comes to readability, &lt;code&gt;foo.make_something_good&lt;/code&gt; beats &lt;code&gt;foo.MakeSomethingGood&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;Another significant issue with Go is its standard project structure. Essentially it pushes the &lt;em&gt;one giant workspace&lt;/em&gt; approach to development (see http://golang.org/doc/code.html). That might make sense for a software development house, but for other types of coders that is really not acceptable. I sometimes have projects where the code is just an auxiliary aspect. The project could have presentations, spreadsheets, word documents, etc. If there is code associated with the project it needs to reside alongside these other documents and not be handicapped for doing so. Currently the only way I see for doing this is to adjust the $GOPATH every time I work on such a project. No fun. Hopefully there is a better way yet too be discovered, or that the Go designers will eventually provide.&lt;/p&gt;

&lt;h2&gt;Debugging&lt;/h2&gt;

&lt;p&gt;From what I thus surmise about the tools provided for Go, I have only scratched the surface of what is available. But I can say that one the best things about working with Go were the very clear and directory error reports. By default, at least, Go doesn&amp;#39;t fill the screen with stack traces and code snippets. Rather is simply states the problem in plain English and give the file and line number where it arose. The clarity of the error messages made it very easy to correct every issue detected by the compiler.&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;p&gt;With regards to documentation, I have to give Go a push. What is available is still quite weak. However, given how new the language is, the current state of documentation is actually rather commendable. With its growing popularity, clearly this is a situation that will improve rapidly.&lt;/p&gt;

&lt;p&gt;Einstein had a saying, &amp;quot;Everything should be made as simple as possible, but not simpler&amp;quot;. In some respects, such as the generics issue, Go has made things &lt;em&gt;too&lt;/em&gt; simple. If Go&amp;#39;s designers ultimately find a way to support generics --and by all accounts they are at least &lt;a href=&quot;http://golang.org/doc/faq#generics&quot;&gt;open to the prospect&lt;/a&gt;, the language would become much more accessible. And some of this critique will be mitigated. But despite it&amp;#39;s over simplification, it beats the pants off the converse issue over complexification, which we too often find in other languages.&lt;/p&gt;

&lt;p&gt;Go is the best new language to come along since I learned Ruby in 2002. I think anyone still coding C when it&amp;#39;s not absolutely necessary, is just a glutton for punishment. I highly recommend you Go, and Go now.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Memory Frabrics</title>
      <link>http://trans.github.com/2013/08/05/memory-frabrics/</link>
      <pubDate>Mon, 05 Aug 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/08/05/memory-frabrics</guid>
      <description>&lt;p&gt;I&amp;#39;ve been thinking about data structure the last week, and I was wondering why data structures are implemented the way they are.&lt;/p&gt;

&lt;p&gt;It occurs to me that it is mostly due to the way computer memory is designed. Computer memory is a randomly accessible linear structure. Basically what you have is a large string of values that you can access by a single position index. This is the &lt;em&gt;interface&lt;/em&gt; of memory, and all data structures are there root must use it in their implementation.&lt;/p&gt;

&lt;p&gt;But I wondered, how would data structures differ is memory itself was structured in some other fashion? For instance, what if memory wasn&amp;#39;t a linear string of data, but a two-dimensional fabric? While arrays might be unaffected by such a change, clearly things like matrices could be stored in a much more literal fashion. It would be interesting to see the form of data structure talented individuals might devise with this.&lt;/p&gt;

&lt;p&gt;Even so, two-dimensions is still somewhat limiting, taking it to a third dimension could open tremendous possibilities in the &lt;em&gt;relative storage&lt;/em&gt; of data.&lt;/p&gt;

&lt;p&gt;But might we go even further. What would prevent us from making the dimensionality definable? If a memory cell could be associated with any other memory cell as often as desired, then the &lt;em&gt;fabric&lt;/em&gt; could have any structure desired. Interestingly, the effect of this would be to move what we already do in software, via indirect memory referencing, to the hardware itself.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ruby Avoids Consistency Like The Plague</title>
      <link>http://trans.github.com/2013/03/08/ruby-avoids-consistency-like-the-plague/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/03/08/ruby-avoids-consistency-like-the-plague</guid>
      <description>&lt;h1&gt;Ruby Avoids consistency like the Plague&lt;/h1&gt;

&lt;p&gt;Ruby is such a great language in so many ways, it always feels especially disappointing when one discovers a way in which it lacks. I believe much of Ruby&amp;#39;s less noble attributes stem from a single source: Matz and company eschew &lt;em&gt;consistency&lt;/em&gt; as if it were a disease.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a simple example that occurred to me today as I was working on a &lt;a href=&quot;http://rubyworks.github.com/mirror&quot;&gt;reflection&lt;/a&gt; system for Ruby. It has probably slipped by every Rubyists on the planet, but once it is pointed out, it&amp;#39;s pretty obvious. A &lt;em&gt;class&lt;/em&gt; has &lt;em&gt;instance methods&lt;/em&gt; of which we can get a list via the &lt;code&gt;#instance_methods&lt;/code&gt; method, as opposed to an &lt;em&gt;instance&lt;/em&gt; of a class whose methods we can list via &lt;code&gt;#methods&lt;/code&gt;. That in itself might be an acceptable naming system accept the instance also has a method called &lt;code&gt;#instance_variables&lt;/code&gt; (not to mention a number of other &amp;quot;instance_&amp;quot; methods). Give it a moments though and it becomes clear that the terms don&amp;#39;t jive well. The problem lies in the fact that classes don&amp;#39;t actually have &amp;quot;instance methods&amp;quot; per-se. They have &lt;em&gt;method definitions&lt;/em&gt; that become instance methods when a class is instantiated. It would have made much more sense for the class&amp;#39;s method to called &lt;code&gt;#methods&lt;/code&gt; and the instance&amp;#39;s to be called &lt;code&gt;#instance_methods&lt;/code&gt;. Or, at the very least, the class terminology could have used something else like &lt;code&gt;#method_definitions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Generally we developers just accept APIs as they a given us and go about using them without giving too much thought to the nomenclatures used. Unfortunately inconsistent terminology often leads to difficulties communicating with other developers, ultimately wasting time and energy. The above is just one example of such an inconsistency. But don&amp;#39;t bother telling Matz or the rest of the Ruby core team. They will just tell you &amp;quot;consistency is as a bad reason for language change&amp;quot;. Perhaps in the short-term that is true to avoid backward compatibility issues. In the long-run, however, it&amp;#39;s only a matter of time before people head to greener pastures.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The End Of Ruby</title>
      <link>http://trans.github.com/2013/02/28/the-end-of-ruby/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/02/28/the-end-of-ruby</guid>
      <description>&lt;h1&gt;The End of Ruby&lt;/h1&gt;

&lt;p&gt;I have given 10 years of my life to Ruby. And in return I have been ridiculed, mocked, cussed at, laughed at, shunned, harassed, ignored and all but excommunicated from the Ruby community. And all for nothing more than trying to be a helpful and constructive part of it. &lt;/p&gt;

&lt;p&gt;Let me be clear. I am not a saint. Lord knows I can get emotional and put my foot squarely in my mouth at times. I have not always been the nicest guy. But I can tell you I have tried to be, and when I haven&amp;#39;t it has been in reaction to others poor behaviour. And when I have found myself going too far I apologize. I don&amp;#39;t hold grudges, I am gracious about being proven wrong and I always work with people as professionally as I can, even with people I basically can&amp;#39;t stand (b/c of the way they have treated me).&lt;/p&gt;

&lt;p&gt;I suppose it all started with GUtopIa. Long ago, when I first learned Ruby I wanted to create a very cool Ruby GUI that provided an unified interface to any GUI back-end (Gnome/GTK, KDE/Qt, Fox, tcl/tk, etc.) Some others were enthused about the project and we began to discuss privately. Having initiated the project I just assumed a leadership roll and began working out how to proceed. At the time I didn&amp;#39;t really understand that I was in over my head (I was decent procedural programmer, but had zero OOP nor Agile experience.) This presumption irked a few a people and Rich Kilmer emailed me a lovely message letting me know that they &amp;quot;did not work&amp;quot; for me. I was a bit taken aback. I did not mean to come off that way and apologized, but it was too late. They informed me that they would be working a WxWidgets binding instead. It was a valuable lesson. And while I would like to think my apology was accepted, those initial ill feelings could have carried on into the community. I have no way to know. &lt;/p&gt;

&lt;p&gt;Other then a few sometimes mildly heated arguments. I imagine some people disliked me b/c I was willing to argue a point in great detail and at length. I can see how that would be frustrating on the other end. But among those individuals --David Black, Ara Howard, Austin Ziegler, Guy Wright, and so on, despite what they might have felt about me personally, they maintained a high level of professionalism, put heated debates in proper context and moved on cooperatively with the shared of endeavour of being and becoming great Rubyists.&lt;/p&gt;

&lt;p&gt;Bu then there was Ryan Davis. The first thing Ryan Davis ever said about me (AFAIK) was a &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/215440&quot;&gt;slander&lt;/a&gt; of my first two Ruby projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;No, I never looked at reap. I wouldn&amp;#39;t touch it or facets with someone else&amp;#39;s ten foot pole.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like an objective point of view, doesn&amp;#39;t it? He hadn&amp;#39;t even looked at the project but he knew he wouldn&amp;#39;t touch it. Why the prejudice? I had no idea. But I would later come to understand that it actually had nothing to do with code. Reap and Facets were the first two open-source projects I had ever attempted to personally maintain in my life, and at that time they hadn&amp;#39;t been out long. Both were early in their 0.x series of release. So I accepted the criticism, despite its nonconstructive form and worked to make my projects better. And with time, the quality and quantity of project continued to improve. But the way I was treated did not.&lt;/p&gt;

&lt;p&gt;I submitted a patch to RubyGems once to allow a list of resource links in the gemspec, e.g. &lt;code&gt;home&lt;/code&gt;, &lt;code&gt;docs&lt;/code&gt;, &lt;code&gt;wiki&lt;/code&gt;, &lt;code&gt;issues&lt;/code&gt;, etc. Ryan did nothing but tear it apart, offering little in the way of constructive advice, but spilling slurs and curse words throughout his line by line &amp;quot;critique&amp;quot;. When I responded --in order to have a &lt;em&gt;dialog&lt;/em&gt; about why I coded things the way I did, he only became more vitriolic. A comment he posted, containing a dialogue he had with a colleague of his (most likely Aaron Patterson), in some ill attempt to justify his behaviour:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;5:13:17 PM Professor: he tried to defend every single one
5:13:26 PM Professor: none of them he went &amp;quot;ok, thats fine, i&amp;#39;ll do it that way&amp;quot;
5:13:28 PM zenspider: he needs to learn how the fuck to take critiques
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would seem he and his company think dialog is nothing more than a questioning of their authority.
Perhaps it would seem ironic then that once again I did accept every critique (that is the actual ones which were mostly provided by Eric Hodel), whether I agreed with it or not (I had no avenue for discussing it), and made a &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/15&quot;&gt;new patch&lt;/a&gt; that addressed every point. And though I specifically asked that anyone but Ryan Davis review it, I and the patch were ignored. Months later the request was closed with only a small comment from Ryan Davis, &amp;quot;Looks like this is dead.&amp;quot; To this day the gemspec does not support links, and one must still enter them by hand on rubygems.org.&lt;/p&gt;

&lt;p&gt;Eventually I learned that Ryan Davis and Aaron Patterson are co-workers, and along with Eric Hodel they are the leading members of a club called &lt;a href=&quot;&quot;&gt;Seattle.rb&lt;/a&gt;. While greatly gifted as developers, they are also notoriously arrogant. They have demonstrated this time and again and in numerous ways. From simply failing to comment their code to ganging up on some poor coder just trying to be constructive. One of their favourite tactics is to gang up on others, making it look like independent analysis through the visor of the Internet, when in fact it is per-determined plan. Unfortunately this group has systematically taken over much, if not most, of Ruby&amp;#39;s development. They hold great power over MRI now, and they control most of the major projects of the standard library --RubyGems, Nokogiri, Psych, RDoc, etc.&lt;/p&gt;

&lt;p&gt;&amp;quot;But what about Matz?&amp;quot; I hear you ask. &amp;quot;Surely he remains in firm control?&amp;quot; Every one knows Matz is a nice guy, and that is true. Matz has always been a nice guy. But Matz has also always been a very passive personality. No one is perfectly nice. So I suspect Matz&amp;#39; outlet is classic passive-aggressive behaviour. A good example of this is his complete avoidance of the &lt;a href=&quot;https://bugs.ruby-lang.org/issues/7716&quot;&gt;autoload issue&lt;/a&gt;. Even though he announced over a year ago that &amp;quot;autoload will be dead&amp;quot;, none of the code in the standard lib has made any changes to remove it. When asked, the maintainers said they had no plans to do so. I have been asking for &lt;em&gt;five years&lt;/em&gt; for the simplest of patches to fix this issue --I even submitted a patch myself and I am not a C coder, but never has it been addressed. I have email Matz directly and received no response. To this day I have at least three programs that can not be fully utilized because of it. So, a nice as Matz might be, he lacks the requisite character to be a strong leader to enforce professionalism among those he deem technically merited to work on Ruby. &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;The last straw..&lt;/p&gt;

&lt;p&gt;Sometime ago I improved the design of FileUtils a good bit and &lt;a href=&quot;https://bugs.ruby-lang.org/issues/4970&quot;&gt;submitted a patch&lt;/a&gt; to ruby-core. I did so because Ruby Facets adds a couple of extensions to FileUtils, and they way the code had been written made it very cumbersome to do so properly. The patch was review and accepted.&lt;/p&gt;

&lt;p&gt;Last week Eric Hodel found an subtle bug in the code --none of the tests caught it. The problem was easy enough to ascertain and to fix. I actually offered an idea for a solution that would actually make the code even better. Again there was no dialog. I was ignored. Eric sanctimoniously appointed himself maintainer for fileutils.rb and decided to revert all the improvements back to the old code. Despite the fact that the new code already went out with Ruby 2.0 preview release (so much for &amp;quot;feature freezes&amp;quot;). Despite the fact the the new code is far superior to the old (&lt;a href=&quot;http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/39544/diff/lib/fileutils.rb&quot;&gt;compare for yourself&lt;/a&gt;). And despite my objections. There is only one reason Eric reverted that code. To spite me. &lt;/p&gt;

&lt;p&gt;He would deny it, of course. But the evidence is clear enough. Why no dialog? Why such a drastic reversion of clearly improved code that passes all tests? Why was Aaron the only other person to comment with out any constructive thing to say, just a &amp;quot;yea do it&amp;quot;. Taken in conjunction with the combined history of this groups persecution of me, the answer is obvious.&lt;/p&gt;

&lt;p&gt;When a project begins reverting released code solely on the basis of personal vindictiveness, that project is on a fast track to doom. Ruby has become such a project. I am not the &lt;a href=&quot;http://news.cnet.com/8301-13846_3-9838477-62.html&quot;&gt;first to see it&lt;/a&gt;, or the first to &lt;a href=&quot;http://www.rubyinside.com/why-the-lucky-stiff-is-missing-2278.html&quot;&gt;react to it&lt;/a&gt;, and comments about it are only increasing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://www.jperla.com/blog/post/ruby-is-a-ghetto&lt;/li&gt;
&lt;li&gt;http://gilesbowkett.blogspot.com/2013/02/nodejs-hatred-reveals-significant.html&lt;/li&gt;
&lt;li&gt;http://www.zohararad.com/2012/11/16/10-reasons-not-to-use-ruby/&lt;/li&gt;
&lt;li&gt;http://drbacchus.com/geek-arrogance-and-chauvinism&lt;/li&gt;
&lt;li&gt;http://blog.majesticseacreature.com/rubygems-nerd-rage-is-optional-and-discourage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That main clique now running the roost are arrogant ingrates, rude and vindictive. They are utterly lacking in professionalism. I have no doubt some people will want to disagree --most of whom have not had enough interaction with these individuals to really know them. But enough people have seen it and have remarked on it.&lt;/p&gt;

&lt;p&gt;https://gist.github.com/tenderlove/92f5a886fd9dafba1685&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Plethora Of Version Versions</title>
      <link>http://trans.github.com/2013/01/04/the-plethora-of-version-versions/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/01/04/the-plethora-of-version-versions</guid>
      <description>&lt;h1&gt;The Plethora of Version Versions&lt;/h1&gt;

&lt;p&gt;A couple of my programs have need of a Version API --a library for handling version numbers, and handling them well. Not only do they need a class modeling a &lt;em&gt;version number&lt;/em&gt;, but also a &lt;em&gt;version constraint&lt;/em&gt; and in one case even a &lt;em&gt;version conflict resolver&lt;/em&gt; for requirements. Presently each project had its own code for handling versions. But as these projects have evolved it has became increasingly clear that effort was being wasted and that I should pull the separate bits of code together into a single gem on which they all could depend.&lt;/p&gt;

&lt;p&gt;So I created the new project --actually it was some time ago, but I ran into that not-so-unusual snag, what to name it. Unfortunately there was already a &lt;code&gt;version&lt;/code&gt; gem, and could think of no better name. So I put the whole thing on the back burner for some months. Today I finally returned to the question. I still don&amp;#39;t have an answer, but to be thorough I searched of RubyGems.org using &amp;quot;vers&amp;quot;. I thought there were a lot of ANSI code gems!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ataxo/app-version-git&quot;&gt;app-version-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/westarete/aversion&quot;&gt;Aversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jeffp/gem_version&quot;&gt;GemVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Bodacious/per-version&quot;&gt;PerVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AlphaHydrae/rake-version&quot;&gt;rake-version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/martinkozak/ruby-version&quot;&gt;Ruby Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/canton7/sem_version&quot;&gt;SemVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stouset/version&quot;&gt;version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jondot/version_bumper&quot;&gt;version_bumper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/djsun/version_string&quot;&gt;version_string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RiverGlide/Versionary&quot;&gt;Versionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/charlotte-ruby/versionator&quot;&gt;Versionator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rubyforge.org/projects/versioncheck&quot;&gt;VersionCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chaione/versioner&quot;&gt;versioner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xaviervia/versionifier&quot;&gt;Versionifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jcangas/version_info&quot;&gt;VersionInfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rubygems.org/gems/versionize&quot;&gt;Versionize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thomasbiddle/versionr&quot;&gt;Versionr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/defunkt/version_sorter&quot;&gt;VersionSorter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meh/versionub&quot;&gt;Versionub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of these gems address the same functionality, that of bumping a version number. Some of those provide rake tasks to do so, others just the API, and a couple go a step further handling git commits and gem pushes as well. One a few actually focus on modeling a &lt;em&gt;version number&lt;/em&gt;, though all have some sort of internal model no matter how simplistic. Only one appears to provide a model any more sophisticated than simple comparison and accessing named components (major, minor, patch, etc.). SemVersion also has simple constraint testing.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s too bad there is not more cooperation among gem developers. I think this is an area in which the Perl community has shined. Surely in no small part to &lt;a href=&quot;http://cpan.org&quot;&gt;CPAN&lt;/a&gt; and the culture of naming libraries functionally, rather then creatively. &lt;/p&gt;

&lt;p&gt;Still doesn&amp;#39;t help me name mine.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Note &lt;a href=&quot;https://github.com/phs/versionable&quot;&gt;Versionable&lt;/a&gt; is something different, and pretty neat.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>What Concerns</title>
      <link>http://trans.github.com/2013/01/01/what-concerns/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2013/01/01/what-concerns</guid>
      <description>&lt;h1&gt;What Concerns?&lt;/h1&gt;

&lt;p&gt;David Heinemeier Hansson, the well known creator of Rails, recently gave a little &lt;a href=&quot;http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns&quot;&gt;pep-talk&lt;/a&gt; for the use of &lt;code&gt;ActiveSupport::Concerns&lt;/code&gt;, making an argument that they were sufficient to satisfy the practical needs of &lt;a href=&quot;http://en.wikipedia.org/wiki/Data,_context_and_interaction&quot;&gt;DCI&lt;/a&gt;&amp;#39;s theory.&lt;/p&gt;

&lt;p&gt;What he fails to explain is what Concerns &lt;em&gt;really are&lt;/em&gt;. Truth be told, Concerns are essentially a extension of Ruby&amp;#39;s &lt;code&gt;Module&lt;/code&gt; class to more fully support &lt;em&gt;multiple inheritance&lt;/em&gt;. Whether out of indifference, simple oversight or perhaps a bit of decorum to save Matz&amp;#39;s sensitivities, who has a well known distaste for multiple inheritance, DHH never mentions this simple fact. Concerns are a way for Rails developers to include Modules with the same degree of functionality as inheriting from a superclass.&lt;/p&gt;

&lt;p&gt;To say that Concerns are like DCI Roles, is akin to saying C structs are like OOP Objects. Yea, there&amp;#39;s a similarity there, but it&amp;#39;s vastly missing the point.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>About Those Refinements</title>
      <link>http://trans.github.com/2012/12/04/about-those-refinements/</link>
      <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/12/04/about-those-refinements</guid>
      <description>&lt;h1&gt;About those Refinements&lt;/h1&gt;

&lt;p&gt;Well, after a ridiculously long discussion about refinements, it&amp;#39;s finally become clear what Matz is up to. It would have helped if he had mentioned from the start that he&amp;#39;s patterning them directly off of Smalltalk wrappers and CLOS method combinations. Instead we get &lt;a href=&quot;http://bugs.ruby-lang.org/projects/ruby-trunk/wiki/RefinementsSpec&quot;&gt;this&lt;/a&gt; &amp;quot;offical&amp;quot; spec. Hardly. It was only thanks to Charles Nutters careful &lt;a href=&quot;https://bugs.ruby-lang.org/issues/4085#note-217&quot;&gt;analysis&lt;/a&gt; that I was able to to get a clear picture. Oh, the time and data that could have been saved!&lt;/p&gt;

&lt;p&gt;So allow me to save you all the trouble and explain refinements in very simple phrase: &lt;em&gt;macros des méthodes&lt;/em&gt;. In plain English, they are macros that act on method invocations. For example,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Every string is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;okay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;okay&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice, the &lt;code&gt;M.string&lt;/code&gt; method is not effected by the refinement of &lt;code&gt;String#to_s&lt;/code&gt; even though it uses &lt;code&gt;#to_s&lt;/code&gt; in its definition. However, if we use &lt;code&gt;#to_s&lt;/code&gt; explicitly in the scope of the refinement&amp;#39;s use we get:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;okay&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;Every string is okay!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though that is exactly what the definition of &lt;code&gt;M.string&lt;/code&gt; is, it produces the refined result instead. Since the call was explicit the refinement interceded.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s really the crux of refinements. Most of the remaining questions pertain to the order in which multiple refinements interact, but it is all pretty much as one would intuit it to be, so we won&amp;#39;t go into detail in that regard.&lt;/p&gt;

&lt;p&gt;Now I thought it might be helpful to take an extreme example of what one could do with refinements and see if it leads us to anything interesting.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take just a bare class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets create two refinements defining two different roles a person might take.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Buyer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:money&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_f&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Seller&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:money&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_f&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@money&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s define an activity in which persons interact as each of these roles.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Seller&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Buyer&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SalesTransaction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buyer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buyer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interesting? Person has no built-in behavior, and yet we&amp;#39;ve managed to use the class to model a sales transaction and give each person state of what they own and how much money they have. And an outside interface can&amp;#39;t find this state out unless it knows what role to apply!&lt;/p&gt;

&lt;p&gt;You might recognize the pattern of this example. It is &lt;a href=&quot;http://en.wikipedia.org/wiki/Data,_context_and_interaction&quot;&gt;DCI&lt;/a&gt;. Does this mean refinements are a prefect fit for DCI-based designs? Might we see a whole new paradigm in Ruby architecture built around the DCI? That&amp;#39;s a good question. At first glance it certainly seems to be possible. But we should note a obvious downsides.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Both refinements required an &lt;code&gt;#initialize&lt;/code&gt; method to ensure the instance variables are initialized. So  refinements of this kind would have to be compatible in this respect in order to be used together.&lt;/li&gt;
&lt;li&gt;The context, in this case &lt;code&gt;SalesTransaction&lt;/code&gt;, has to exist in it&amp;#39;s own file so only the appropriate refinements apply. There is no way to define contexts that use different refinements in the same file because refinements are applied on a per-file basis. Although, some level of cleverness could be played if certain contexts simply add additional refinements on top of those used earlier in the file.&lt;/li&gt;
&lt;li&gt;While it remains to be seen, it is unlikely that an entire system written in this fashion will be very fast. Nor is entirely certain the it would very comprehensible, but perhaps that has more to do with DCI then refinements.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Evolution Of A Programmer</title>
      <link>http://trans.github.com/2012/12/01/evolution-of-a-programmer/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/12/01/evolution-of-a-programmer</guid>
      <description>&lt;h1&gt;Evolution of a Programmer [DRAFT]&lt;/h1&gt;

&lt;p&gt;As of next year I will have been programming in Ruby for over a decade. Ten years!&lt;/p&gt;

&lt;h3&gt;Bye Bye WebRI&lt;/h3&gt;

&lt;p&gt;RDoc 4.0 is coming out and can now render documentation directly from ri stores. That&amp;#39;s great news. I had written just such a program back in 2008 called WebRI. It was a terrible hack, and slow as molasses running up a tree. So it never got much use. But it was still pretty neat because it made it possible to browse all installed gems in one go. It was wild to see every single class and module of every gem listed in the side pane. I hope RDoc 4.0 will be able to do something like that. I am certain it will be better in just about every other way at least. My implementation may have sucked, but the idea was obviously a good one. It&amp;#39;s always nice to feel a bit of vindication in that way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://trans.github.com/media/webri.png&quot; alt=&quot;WebRI&quot;&gt;&lt;/p&gt;

&lt;p&gt;Of course, this also means that WebRI is completely obsolete now. Come the new year I will delete the repository and yank the gem. No reason to keep useless cruft about.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Going Generic</title>
      <link>http://trans.github.com/2012/08/07/Going-Generic/</link>
      <pubDate>Tue, 07 Aug 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/08/07/Going-Generic</guid>
      <description>&lt;h1&gt;Going Generic&lt;/h1&gt;

&lt;p&gt;My Grandmother will often buy generic brands at the grocery to save a few dollars. A child of the depression, she knows the true value of a thing[^1]. Go could take a lesson from her.&lt;/p&gt;

&lt;p&gt;Let me provide an example. Here is code to concat two array of string.[^2]&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;func concat(a, b []string) []string {
  ret := make([]string, len(a) + len(b))
  copy(ret, a)
  copy(ret[len(a):], b)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can only be used for []string values. Nothing else. If I need to concat two int arrays, well then I need another function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;func concat(a, b []int) []int {
  ret := make([]int, len(a) + len(b))
  copy(ret, a)
  copy(ret[len(a):], b)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no difference between these two functions except the array&amp;#39;s element type. Ideally a general solution would allow use to name the type, e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;func concat(a, b []&amp;lt;t&amp;gt;) []&amp;lt;t&amp;gt; {
  ret := make([]&amp;lt;t&amp;gt;, len(a) + len(b))
  copy(ret, a)
  copy(ret[len(a):], b)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From what I have heard there are some strict criteria to be met for any general solution to this issue. I plan to do some further reading.&lt;/p&gt;

&lt;p&gt;[^1]: Sometimes too much so actually. Of an emptied product container she&amp;#39;ll often say, &amp;quot;this is fine container, surely you must have something you can put in it&amp;quot;. :)&lt;/p&gt;

&lt;p&gt;[^2]:  Yes, there is simpler way to concat two arrays, i.e. &lt;code&gt;append(a1, a2...)&lt;/code&gt;, but the concat function makes for a clear example of the generics issue. The specific functionality is not important.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Crossing The Assets Divide</title>
      <link>http://trans.github.com/2012/07/04/crossing-the-assets-divide/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/07/04/crossing-the-assets-divide</guid>
      <description>&lt;h1&gt;Crossing the Assets Divide&lt;/h1&gt;

&lt;p&gt;Working on &lt;a href=&quot;http://github.com/rubyworks/smeagol&quot;&gt;Smeagol&lt;/a&gt;, a read-only Gollum server and static site generator, I&amp;#39;ve come across an unusual issue. One of the features Smeagol provides is the ability to view page history. By providing a git commit-id or a tag name in the URL, an older version of any page can be viewed. Now, if a page includes a local asset, an image being the typical example, that file clearly must come from the same commit as well. And here is were a problem arises. While &lt;em&gt;content assets&lt;/em&gt; must be versioned, &lt;em&gt;design assets&lt;/em&gt; must not. We may want to look at the content of an old page for historical reference; we don&amp;#39;t want look at it as if on the website as it was designed way back when. Indeed, the functionality of the site back then might have had bugs in it, it might have a had a very stark layout, it might have any number of issues which have since been corrected. Certainly the site should not serve up old stylesheets, javascripts, background images and the like. Only old &lt;em&gt;content&lt;/em&gt; must be served.&lt;/p&gt;

&lt;p&gt;As it has become the fashion in web-design, stylesheets, javascripts, images, and so on are placed in a single &lt;code&gt;assets/&lt;/code&gt; directory. (Even without an &lt;code&gt;assets/&lt;/code&gt; directory, asset files are generally placed in central bins such as &lt;code&gt;images/&lt;/code&gt;.)  Because of this there is no straight forward way to determine which files are for content and which are for site design. So, as it happens, there turns out to be a need to divide the assets in two. One directory for design and another for content.&lt;/p&gt;

&lt;p&gt;I now find myself with the unenviable decision of what to name these two directories. Do I keep &lt;code&gt;assets/&lt;/code&gt; for design or content? And what do I name the other directory? Or should I use two new names altogether?&lt;/p&gt;

&lt;p&gt;[UPDATE] At present I have opted to keep &lt;code&gt;assets/&lt;/code&gt; for design-related files and move content assets to &lt;code&gt;media/&lt;/code&gt;. Technically, it turns out that it doesn&amp;#39;t matter where the content files go as long as it is not in &lt;code&gt;assets/&lt;/code&gt;. &lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Example</title>
      <link>http://trans.github.com/2012/06/26/Example/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/06/26/Example</guid>
      <description>&lt;h1&gt;Example&lt;/h1&gt;

&lt;p&gt;This is an example. I am wondering how this gets saved.&lt;/p&gt;

&lt;!-- Comment
Can we hide things this way?
--&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Is It Time To Leave Home</title>
      <link>http://trans.github.com/2012/06/25/is-it-time-to-leave-home/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/06/25/is-it-time-to-leave-home</guid>
      <description>&lt;h1&gt;Is It Time to Leave Home?&lt;/h1&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Kill The Proxy And Save Toplevel</title>
      <link>http://trans.github.com/2012/06/17/kill-the-proxy-and-save-toplevel/</link>
      <pubDate>Sun, 17 Jun 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/06/17/kill-the-proxy-and-save-toplevel</guid>
      <description>&lt;h1&gt;Kill the Proxy and Save Toplevel&lt;/h1&gt;

&lt;p&gt;One of the more curious aspects of Ruby is the &amp;quot;top level&amp;quot; object, otherwise known as &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pry
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; pry&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;code&gt;main&lt;/code&gt; is rather odd entity in that it is a special object with special functionality that delegates to the Object class. For example, using &lt;code&gt;def&lt;/code&gt; at the top level actually defines a new private method on the Object class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello Wolrd&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:DelegateClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello_world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you have any idea that the top level was so powerful as to pervade every object in the system? Well, usually it doesn&amp;#39;t present an issue since NO ONE IN THEIR RIGHT MIND EVER DEFINES A METHOD AT THE TOP LEVEL, at least not in production applications.&lt;/p&gt;

&lt;p&gt;Unfortunately it has some other negative side effects as well. For instance, one can&amp;#39;t as easily create a DSL-based scripting language out of Ruby because the DSL methods will end up in every object, which can cause unexpected consequences. One can work around this by using top level singleton methods instead, but then you have to make sure your users know this too and always prefix their methods with &lt;code&gt;self.&lt;/code&gt;. Another issue is that &lt;code&gt;main&lt;/code&gt; isn&amp;#39;t even a full proxy for &lt;code&gt;Object&lt;/code&gt;. For instance, try defining a dynamically named method at the top level using &lt;code&gt;define_method&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`define_method&amp;#39; for main:Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a very long time I have advocated that both of the these issues be banished by changing the top level into a self extended module instead of the current half-baked proxy. In effect:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MAIN&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a Ruby script is executed it would be executed within this MAIN namespace. With it, all expected functionality is available to us, such as &lt;code&gt;def&lt;/code&gt;, as well as the module methods like &lt;code&gt;define_method&lt;/code&gt;. Methods defined in MAIN would no longer invade every object, leaving us free to use the top level as serves our application best.&lt;/p&gt;

&lt;p&gt;Some neat side effects of this approach include the ability to include MAIN in class definitions if it suits our usecase, as well as calling on methods defined on MAIN.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cool&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;Not so worldy, hello.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But by far my favourite use of such a design is the ability to use the top level for Ruby-based DSL scripting. For a familiar example consider Rake. Rake has a Rake::DSL module which is included in a special execution context where rakefiles are evaluated via special loading code. But with MAIN, it would be possible to mix Rake::DSL directly into it and then rakefiles could be loaded with a simple local &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Autoload Smells Like Denmark</title>
      <link>http://trans.github.com/2012/06/14/autoload-smells-like-denmark/</link>
      <pubDate>Thu, 14 Jun 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/06/14/autoload-smells-like-denmark</guid>
      <description>&lt;h1&gt;Autoload Smells Like Denmark&lt;/h1&gt;

&lt;p&gt;Ruby has a very cool feature called &lt;em&gt;autoload&lt;/em&gt;. With autoload, any undefined constant can automatically trigger the loading of a library file. Effectively this gives Ruby a convenient means of lazy loading. For example, lets say some of our app&amp;#39;s executable scripts ultimately use the ANSI library, but others do not. We can use &lt;code&gt;autoload&lt;/code&gt; to only load the ANSI library when it is needed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ANSI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ansi&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This says to &lt;code&gt;require &amp;quot;ansi&amp;quot;&lt;/code&gt; the first time an undefined ANSI constant is encountered.&lt;/p&gt;

&lt;p&gt;As wonderful as autoload seems, it has too glaring issues: 1) It doesn&amp;#39;t use standard Kernel#require and 2) It is not thread safe. &lt;/p&gt;

&lt;p&gt;For the first, this means that any overriding of #require will not be supported by autoload. Of course such a thing is very rare, but it does occur. For instance the &lt;a href=&quot;https://rubygems.org/gems/roll&quot;&gt;Roll&lt;/a&gt; library is all about overriding &lt;code&gt;#require&lt;/code&gt;. Also RubyGems overrides #require, and in fact one can cause a bug to occur when using autoload because of it. Here&amp;#39;s a very simple &lt;a href=&quot;http://stackoverflow.com/questions/849622/autoload-raises-an-error-but-require-does-not-ruby&quot;&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the second case the issue seems much more complicated, and a solution seems so unlikely that Matz has called for #autoload to be &lt;a href=&quot;http://bugs.ruby-lang.org/issues/5653&quot;&gt;removed&lt;/a&gt; from Ruby by v3.0.0. That&amp;#39;s a long way off but just the same it doesn&amp;#39;t bode well for autoload. &lt;/p&gt;

&lt;p&gt;Now that Matz has effectively declared &lt;code&gt;#autoload&lt;/code&gt; a code smell, I wonder if developers will take heed and stop using it? I have my doubts --it&amp;#39;s just too damn convenient. I just wish it would use &lt;code&gt;Kernel#require&lt;/code&gt; so I could use it along with Rolls.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Instance Variables As Syntax Sugar</title>
      <link>http://trans.github.com/2012/06/13/instance-variables-as-syntax-sugar/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/06/13/instance-variables-as-syntax-sugar</guid>
      <description>&lt;h1&gt;Instance Variables as Syntax Sugar&lt;/h1&gt;

&lt;p&gt;What are instance variables? If we think of them as a single unit we note that they represent an object &lt;em&gt;state&lt;/em&gt;, which as a data structure is really nothing more than a &lt;em&gt;hash&lt;/em&gt;. Indeed, it is quite feasible to forgo the use of instance variables altogether save one, to serve as the object&amp;#39;s state.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr_accessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if instance variables are essentially a hash, why is it that we cannot work with them as such? In other words, why not have &lt;code&gt;@&lt;/code&gt; just represent a syntax sugar for a special hash (even if it&amp;#39;s not a standard Ruby Hash instance under the hood, it can behave as if it were). With such a change, handling instance variables immediately become much easier and intuitive since we can apply all our knowledge if hashes.&lt;/p&gt;

&lt;p&gt;Some neat capabilities immediately become apparent. Looking up an instance variable give a variable name can be done with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assigning an instance variable likewise can be done with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No longer would the long-winded &lt;code&gt;instance_variable_get&lt;/code&gt; and &lt;code&gt;instance_variable_set&lt;/code&gt; be needed.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a more complex example. Have you ever wanted to reproduce the name and values of an object instance variable. It&amp;#39;s not uncommon really. Any type of object serialization is going to need such a routine -- YAML, Marshal, etc. To do this presently requires some verbose code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;instance_variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;instance_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But with &lt;code&gt;@&lt;/code&gt; sugar we can simply use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if we just want to iterate over them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we have #each, then all Enumerable methods would be at our disposal.&lt;/p&gt;

&lt;p&gt;For a public interface &lt;code&gt;instance_variables&lt;/code&gt; could reference the internal &lt;code&gt;@&lt;/code&gt; instead of just the list of instance variable names. We could deprecate &lt;code&gt;#instance_variable_get&lt;/code&gt; and &lt;code&gt;#instance_variable_set&lt;/code&gt; altogether.&lt;/p&gt;

&lt;p&gt;By recognizing the nature of instance variables and applying the preexisting functionality of Hash, we gain much greater capability while using fewer brain cells to do it. And that&amp;#39;s always a win.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Real Metal</title>
      <link>http://trans.github.com/2012/05/23/real-metal/</link>
      <pubDate>Wed, 23 May 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/05/23/real-metal</guid>
      <description>&lt;h1&gt;Real Metal&lt;/h1&gt;

&lt;p&gt;One of the most regarded capabilities of Ruby, in contrast to many other programming languages, is its powerful meta-programming chops. While not every aspect of the language is meta-programmable, the vast majority of Ruby is. But despite its prowess, there is a serious weaknesses in its design: &lt;em&gt;The functions on which meta-coders depend have no guarantee&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Consider the most basic reflection method of determining the class of an object, fundamental to almost any meta-programming (and some not-so-meta0programming). We can write a class that completely subverts the ability to determine an object&amp;#39;s class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;I Confuse You!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;Foo&lt;/code&gt; has overridden the &lt;code&gt;#class&lt;/code&gt; method, there is no way to determine the class of an instance of Foo. Any code dependent on the &lt;code&gt;#class&lt;/code&gt; method &amp;quot;contract&amp;quot; is going to choke.&lt;/p&gt;

&lt;p&gt;We can be thankful that most programs will, by simple happenstance, never tread on any of these important methods. In the few cases where they might, most Ruby coders are aware enough to steer clear. Yet there are other cases not so easily handled. Consider Ruby&amp;#39;s relatively new BasicObject class. It has the minimal number of methods necessary to function as an object in Ruby. This is excellent for the construction of open classes akin to OpenStruct, but consequently there is no way to find out what methods are defined on such an object because there is no such methods as &lt;code&gt;#methods&lt;/code&gt; or &lt;code&gt;#instance_methods&lt;/code&gt;. Moreover, BasicObject is still not completely empty. It still defines &lt;code&gt;__id__&lt;/code&gt;, &lt;code&gt;__send__&lt;/code&gt;, &lt;code&gt;instance_eval&lt;/code&gt;, &lt;code&gt;instance_exec&lt;/code&gt; and a few others, without which an object simply wouldn&amp;#39;t be usable.&lt;/p&gt;

&lt;p&gt;So basically Ruby has settled on a &amp;quot;close enough&amp;quot; approach to handling reflection and meta-programming. But why should we be willing to settle for any risk at all? The reasoning I have most often heard is an OOPL ideological principle arguing that no method should stand outside the realm of the inheritance chain, and thus all methods are necessarily subject to overrides. But I am not convinced for the simple reason that meta-programming is by it&amp;#39;s nature &amp;quot;&lt;em&gt;meta&lt;/em&gt;&amp;quot;.&lt;/p&gt;

&lt;p&gt;As an experiment. I developed a small library to take the risk out of meta-coding. The library basically works as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;vg&quot;&gt;$meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;some string&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This meta-function works fairly well in most cases. However it has three shortcomings that make it essentially impractical for production use: 1) It lacks module methods; 2) It is terribly inefficient; and 3) It doesn&amp;#39;t work for BasicObject instances.&lt;/p&gt;

&lt;p&gt;While my little library might be improved upon, ideally Ruby would provide a set of &amp;quot;meta-functions&amp;quot; that cannot be overridden in-class. These methods could all be defined in a special module, but used via alternate notation so as not to conflict with ordinary methods. To that end I suggest using &lt;code&gt;$&lt;/code&gt; on regular objects:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Numerous other methods would be made available through this, in general all public Kernel methods are candidates for inclusion, and some Module methods usable just for classes and modules, such as &lt;code&gt;#instance_methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The robustness this would bring to Ruby&amp;#39;s meta-programming would be a great boon and should not be understated. When a single line of code can so easily cause every object in a program to fail, it&amp;#39;s not unreasonable to prefer some guarantees. Moreover, it makes the meta-programmer&amp;#39;s task much easier --he knows exactly what methods on which to depend.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Problem With Programming</title>
      <link>http://trans.github.com/2012/05/11/the-problem-with-programming/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/05/11/the-problem-with-programming</guid>
      <description>&lt;h1&gt;[DRAFT] THE PROBLEM WITH PROGRAMMING&lt;/h1&gt;

&lt;p&gt;Programming is the art of tying thought to syllogism. The programmer must take an often nebulous idea and encode it into a symbolic logical language. By it&amp;#39;s very nature then, there is gap that must be breached between the thoughts of the programmer (harder still the thoughts of his client) and the 
construction of their autonomic model. This then is the problem of programming: finding ways 
to shrink that gap.&lt;/p&gt;

&lt;p&gt;At it&amp;#39;s root a program is a series of logical ones and zeros, arranged just-so to create what can best be
analogized to the non-programmer as the falling of dominoes.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;It should be clear that to span the divide we must build systems that allow us to most readily convey our ideas about a &amp;quot;thing&amp;quot; and interconnect them in dynamic relationships. For instance, if I were to speak of a &amp;quot;ball&amp;quot;, a whole range of things would occur to the average person. Most everyone has had many experiences
with a thing called &amp;quot;ball&amp;quot;. They would certainly know that they often bounce, though some can be quite hard;
they come in all sizes, but they are almost always spherical. These facts might seem trivial to you
and I, but to a computer, they are as far from us as quasars. &lt;/p&gt;

&lt;p&gt;If we ever hope to be able to instruct computers in a fashion akin to our speech, and expect that the system will naturally arrange the ideas of which we speak, then we are going to have to start with
encoding the nature of things we know. We do this presently with knowledge on the human level, via dictionaries, encyclopedia and the like. But we are speaking of computers and to convey things
to a computer they must be extensively deconstructed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;ball:
  definition:
    source: Websters
    number: 1
    description: a round or roundish body or mass
  shape:
    terms: [round, sphere]
    volume: 4/3*PI*r^3
    surface: 4*PI*r^2
  types: [&amp;#39;bowling&amp;#39;, &amp;#39;football&amp;#39;, &amp;#39;soccer&amp;#39;, &amp;#39;baseball&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our ball is very simplistic and far from complete at this point, but the nascent idea is conveyed. Yet to actually do anything with these constructs, it will be important to provide functional information in addition to the descriptive. We get a hint of this already with the surface and volume definitions given.
More complex functions could be provided, such as physical formulae for bouncing.&lt;/p&gt;

&lt;p&gt;I do not believe we must be overly concerned about the exact hierarchical structure nor use of terms these constructs take. A general pattern will arise that developers will adopt as conventions. Such system of conventions tends to be reliable enough for such matters.&lt;/p&gt;

&lt;p&gt;Now, taking this notion a step further, let us propose a universally available resource for creating and editing these semantic constructions. From which, they could be utilized as a general resource by all developers.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Proper Construction Of A Class</title>
      <link>http://trans.github.com/2012/05/09/proper-construction-of-a-class/</link>
      <pubDate>Wed, 09 May 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/05/09/proper-construction-of-a-class</guid>
      <description>&lt;h1&gt;The Proper Construction of a Class [DRAFT]&lt;/h1&gt;

&lt;p&gt;A general principle of good programming is SOC, Separation of Concerns. SOC
is a general rule that helps us break code up into logical groups around a single concern.
More often the principle is applied at a systems level via separate packages, tools, libraries
or components. But the principle is equally applicable to a class itself.&lt;/p&gt;

&lt;p&gt;Ruby&amp;#39;s own Hash class provides a good example to demonstrate how this principle can be applied.
When we consider the concerns of the Hash class we must think of the methods that make it a Hash.
The most fundamental distinction between methods for any class is the fundamental methods versus
the derivative methods. In other words, derivative methods depend on the fundamental methods, and
have no direct contact to the under-lying state of the object except via the fundamental methods.
This division not only gives us guidance on how to organize our classes, but also how to best
write methods for our classes --by attempting to use the minimum number of necessary fundamental
methods.&lt;/p&gt;

&lt;p&gt;For Ruby&amp;#39;s Hash, the fundamental methods are more or less &lt;code&gt;#fetch&lt;/code&gt;, &lt;code&gt;#store&lt;/code&gt;, &lt;code&gt;#delete&lt;/code&gt;, &lt;code&gt;#keys&lt;/code&gt;, &lt;code&gt;#key?&lt;/code&gt; and perhaps &lt;code&gt;#size&lt;/code&gt; in addition to any necessary equality methods, such as &lt;code&gt;#==&lt;/code&gt;. There are, of course, Ruby system methods also, such as &lt;code&gt;#hash&lt;/code&gt; and &lt;code&gt;#inspect&lt;/code&gt;, but we can take them for granted. All other methods, such as &lt;code&gt;#update&lt;/code&gt; and &lt;code&gt;#each&lt;/code&gt; can be built from these methods.&lt;/p&gt;

&lt;p&gt;Of course Ruby&amp;#39;s Hash isn&amp;#39;t actually implemented in this way. But is &lt;strong&gt;should&lt;/strong&gt; be! This kind of design I call &amp;quot;CRUDifed&amp;quot;, because the fundamental methods of any class are generally the ones that represent create, read, update and delete functions.&lt;/p&gt;

&lt;p&gt;Who would have ever though this was good advice? &amp;quot;Make your models CRUDy!&amp;quot; :-)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>All Quiet On The Google Front</title>
      <link>http://trans.github.com/2012/04/14/all-quiet-on-the-google-front/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/04/14/all-quiet-on-the-google-front</guid>
      <description>&lt;h1&gt;All Quiet on the Google Front&lt;/h1&gt;

&lt;p&gt;As I write this I am am on hold to Google main line. I&amp;#39;ve been on hold for nearly an hour. &lt;i&gt;&amp;quot;... Your call is important to us and we appreciate your patience. Please stay on the line and our next available representative will be with you shortly...&amp;quot;&lt;/i&gt; &lt;/p&gt;

&lt;p&gt;How ironic that the help page for Google Groups says, &amp;quot;The new Google Groups is faster, more powerful, and just plain cool.&amp;quot; A few weeks ago, I noticed that Google de-listed Google Groups from the iGoogle menus and that all groups that are archive mirrors of external lists stopped working. As a maintainer of handful of such lists, I&amp;#39;ve been investigating the issue for a while, but the only information I have been able to garner is by word of mouth via Matz, the creator of Ruby, &amp;quot;friend of mine found out that recently google group started ignoring mails with List-ID header field.&amp;quot; How &lt;em&gt;powerful cool&lt;/em&gt; is that?&lt;/p&gt;

&lt;p&gt;When I finish this article I will hang-up the phone and proceed to deprecate a number of Google Groups that I manage, namely, &lt;code&gt;ruby-talk-google&lt;/code&gt;, &lt;code&gt;yaml-core&lt;/code&gt;, &lt;code&gt;libxml-devel&lt;/code&gt; and &lt;code&gt;rubygems-developers&lt;/code&gt;. All of which are mirrored lists. At first I will just put up a deprecation notice. In a few weeks I will remove the lists altogether. But I won&amp;#39;t stop there. The fact that these lists have all stopped working with the advent of Google&amp;#39;s recent push to the &amp;quot;new Google Groups&amp;quot; and that Google has not made a single announcement about this MAJOR feature deprecation is inexcusable. I have had my fair share of issues with Google in the past. The inability to sort my mail by sender has always been a pain in my gmail-side. And everyone knows Google&amp;#39;s customer support is notoriously non-existent. But I have always stayed with them because their web applications are generally excellent and really outstrip the competition in most respects, not the least of which is online availability, which makes them extremely convenient. Until recently I also felt that Google followed their company motto of &amp;quot;Do No Evil&amp;quot; fairly well. And yet it seems Google, like so many giants of the past, has begun to topple and loose sight of its foundations.&lt;/p&gt;

&lt;p&gt;So, I plan to find a new home for my other non-mirrored lists as well. And sometime after that I will begin to look into new email options. I am hopeful, by the end of the year I will be Google free --for the first time since I first &amp;quot;googled&amp;quot; the Internet way back in 1999.&lt;/p&gt;

&lt;p&gt;Speaking of time. I&amp;#39;ve now been on hold for two-hours. I think it&amp;#39;s time the throw in the old towel. I have a lot of &amp;quot;Googleblechs!&amp;quot; to clean up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[UPDATE]&lt;/strong&gt; A few days after I wrote this, Google &lt;em&gt;mysteriously&lt;/em&gt; fixed the issue, and now all mailing-lists are back online. I graciously concede that they have saved themselves from my abandonment, but &lt;em&gt;only&lt;/em&gt; for the fact that there appear to be no comparable alternatives.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Peanut Butter And Chocolate Handlebars</title>
      <link>http://trans.github.com/2012/04/13/peanut-butter-and-chocolate-handlebars/</link>
      <pubDate>Fri, 13 Apr 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/04/13/peanut-butter-and-chocolate-handlebars</guid>
      <description>&lt;h1&gt;Peanut Butter and Chocolate Handlebars&lt;/h1&gt;

&lt;p&gt;This week I&amp;#39;ve been working on the &lt;a href=&quot;http://github.com/rubyworks/shomen&quot;&gt;Shomen&lt;/a&gt; documentation project. In particular I&amp;#39;ve been converting the templates of my three web-based documentation viewers to compiled templates in order to boost rendering speed. Originally these viewers were using &lt;a href=&quot;http://aefxx.com/jquery-plugins/jqote2/&quot;&gt;jqote2&lt;/a&gt; in one case (&lt;a href=&quot;http://github.com/rubyworks/hypervisor&quot;&gt;hypervisor&lt;/a&gt;) and &lt;a href=&quot;https://github.com/jquery/jquery-tmpl&quot;&gt;jquery-tmpl&lt;/a&gt; in the other two cases (&lt;a href=&quot;http://github.com/rubyworks/rebecca&quot;&gt;rebecca&lt;/a&gt; and &lt;a href=&quot;http://github.com/rubyworks/rubyfaux&quot;&gt;rubyfaux&lt;/a&gt;). While ascertaining what compilation solution to use, I tried the &lt;a href=&quot;https://github.com/wookiehangover/jquery-tmpl-jst&quot;&gt;jquery-tmpl-jst&lt;/a&gt; for the later two, but immediately ran into fundamental errors. (Sorry, I don&amp;#39;t recollect exactly what the errors were now). They were problematic enough to send me looking else where, and ultimately I decided on &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Handlebars is great... mostly. Handlebars a variant of &lt;a href=&quot;http://mustache.github.com/&quot;&gt;Mustache&lt;/a&gt; and is billed like Mustache as &amp;quot;logic-less&amp;quot; templates. But, whereas Mustache is &lt;em&gt;pure&lt;/em&gt; about this ideal, Handlebars backs off a bit and at least allows some computation to take place via helpers. Unfortunately, from my experience I have found the ideal of &amp;quot;logic-less&amp;quot; templates to be largely misplaced, and not even Handlebars goes far enough to rectify the situation. What one ends up doing is just moving the &amp;quot;logic&amp;quot; to a separate file where it mostly consists of bits of trivial code and where it is more difficult to maintain because it is separated from the specific bit of markup it supports.&lt;/p&gt;

&lt;p&gt;Take this example. It&amp;#39;s the last bit of jqeury-tmpl I needed to convert to Handlebars for rubyfaux.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;  ${divy  = Rubyfaux.divy_methods(methods),&amp;#39;&amp;#39;}
  ${scope = [&amp;#39;class&amp;#39;,&amp;#39;instance&amp;#39;],&amp;#39;&amp;#39;}
  ${sight = [&amp;#39;public&amp;#39;,&amp;#39;protected&amp;#39;,&amp;#39;private&amp;#39;],&amp;#39;&amp;#39;}




        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;${v.capitalize()} ${s.capitalize()} METHODS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;reference-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;



        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How does one translate this to Handlbars.js? It isn&amp;#39;t a straight forward process. Handlebars doesn&amp;#39;t allow the embedded assignments. So right off we see that &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;sight&lt;/code&gt; must be extracted. Secondly, the fact that some of the template is only shown if the combination of &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;sight&lt;/code&gt; has any entries, means this can&amp;#39;t be rendered via a single Handlebars block helper. It has to be broken up so we can use a helper to render only if there are entries for each combination. But then it becomes difficult, if not impossible, to loop over &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;sight&lt;/code&gt; to keep our code DRY. Instead we end up with something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;PUBLIC CLASS METHODS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;reference-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;







  ... ditto for each combination of scope and sight ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thank goodness there are only six combinations!&lt;/p&gt;

&lt;p&gt;Of course, there is a way around this explosion in code. We can use a single block helper, but only if we render the &lt;code&gt;h3&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt; tags via the block helper too.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Handlebars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;methods_categorized&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rubyfaux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divy_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;instance&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;protected&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;private&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;combination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;h3&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; METHODS&amp;lt;/h3&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;ul class=&amp;quot;reference-list&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;    
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then our Handlebars template becomes the very simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what on earth have we done!? Pursuing the ideal of keeping our views cleansed of logic, and DRY, we&amp;#39;ve ended up putting our view in our logic! You would think this is an obvious &amp;quot;no no&amp;quot; too, but look at some of the examples on &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt; website and you will see they do this quite regularly.&lt;/p&gt;

&lt;p&gt;Perhaps there is a more appropriate way to handle the above example, and I am all ears. But after giving the whole concept of keeping logic completely out of views, I&amp;#39;ve come to the conclusion that it&amp;#39;s really not so ideal. Like Reese&amp;#39;s mixing chocolate and peanut butter, mixing views and logic can be a good thing. The trick is limiting the logic to particular domains, let&amp;#39;s call it &amp;quot;view logic&amp;quot; as opposed to &amp;quot;data logic&amp;quot;.&lt;/p&gt;

&lt;p&gt;View logic should be limited to these purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conditions&lt;/li&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Categorizing&lt;/li&gt;
&lt;li&gt;Formatting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By limiting view logic to these, I&amp;#39;d say we have still achieved the ideal of &amp;quot;logic-less templates&amp;quot;. By being zealots about the logic-less concept we end-up just creating the opposite problem of mixing our templates into our logic, which is just as bad, if not worse. Template engines, like Handlebars.js, would do well to take this into account and expand their capabilities to include more flexible conditions, sorting, categorizing and formatting constructs and helpers out of the box.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Configuration Rodeo</title>
      <link>http://trans.github.com/2012/03/21/configuration-rodeo/</link>
      <pubDate>Wed, 21 Mar 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/03/21/configuration-rodeo</guid>
      <description>&lt;h1&gt;Configuration Rodeo&lt;/h1&gt;

&lt;p&gt;The history of configuration file conventions for Ruby projects has not been a particularly conclusive one. No one pervasive convention has ever developed. No developer has ever laid down a clear set of rules of engagement that we all can agree are worthy of follow. Rather, the realm of the developer in working out how to handle configuration for their project tools still smacks a bit of the Wild West. &lt;/p&gt;

&lt;p&gt;Nonetheless, although no one approach has superseded all others, there are handful of patterns that tend to be used. We will review these conventions and then consider a possible comprehensive solution that could move us past the chaos du jour. &lt;/p&gt;

&lt;h2&gt;The Conventions&lt;/h2&gt;

&lt;h3&gt;1. Dot File&lt;/h3&gt;

&lt;p&gt;Probably the oldest convention around is the dot-file. A dot-file is, as the name implies, a file with a dot in front of its name. Using traditional Unix shells, files that begin with a dot are &lt;em&gt;hidden files&lt;/em&gt;. For the most part all this means is they do not show up in the typical directory listing, although some file tools will also ignore dot-files by default.&lt;/p&gt;

&lt;p&gt;Back in the day, these files became the conventional means of adding per-user configuration to a system by adding dot-files to a user&amp;#39;s home directory. There it was easily associated to a user and accessible, yet hidden from normal view. Consequently, project tools have adopted the same idea for project configuration, evidenced most clearly by SCM tools like Subversion (&lt;code&gt;.svn&lt;/code&gt;), Git (&lt;code&gt;.git&lt;/code&gt;) and Mercurial (&lt;code&gt;.hg&lt;/code&gt;). Many Ruby-based tools have followed suite, such as RDoc&amp;#39;s &lt;code&gt;.document&lt;/code&gt; and YARD&amp;#39;s &lt;code&gt;.yardopts&lt;/code&gt; and &lt;code&gt;.yardoc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The advantages of the dot-file lies mostly in the fact that it&amp;#39;s a well worn standard, and that it helps somewhat with directory clutter by keeping these files hidden under a typical listing. However, for the same reasons they are also a disadvantage. Many types of file listings do not actually hide these files, for example a GitHub listing, nor is it always advantageous that they be hidden because an important configuration file could go accidentally overlooked. Also dot-files are often without a proper file extension. While file extensions feel archaic, the fact remains that file extensions are still the primary way that file types are identified.&lt;/p&gt;

&lt;h3&gt;2. Crapfile&lt;/h3&gt;

&lt;p&gt;The so called &amp;quot;Crapfile&amp;quot; convention is another pattern that has been around for a long time in the form of the rather ubiquitous &lt;code&gt;Makefile&lt;/code&gt;. Almost all C/C++ projects use the Make tool to handle compiling. In Ruby, this same convention came into vogue by way of the Rake tool, a Ruby emulation of the Make tool. Over the years this convention has become increasing popular. The Bundler project brought us the &lt;code&gt;Gemfile&lt;/code&gt;. Heroku introduced the &lt;code&gt;Procfile&lt;/code&gt;. And now a proverbial explosion of such files seems to be on the doorsteps of Ruby and Rails projects. &lt;/p&gt;

&lt;p&gt;The advantage of the Crapfile is that it is visible and even prominent thanks to it&amp;#39;s initial capitalization. In this sense it is the exact opposite of the dot-file. It&amp;#39;s disadvantage is that too many of them tend to clutter up a project directory. This issue could be partially resolved at least if file listings grouped these files together instead of sorting them in with all-caps files, but as of yet no file listing provides for it. Another disadvantage is again the lack of a file extension. As with dot-files, this leaves many tools such as file editors, unable to handle the file optimally. However some tools do allow for an optional extension, e.g. &lt;code&gt;Rakefile.rb&lt;/code&gt; is recognized by Rake, so there is some mitigation of the extension issue.&lt;/p&gt;

&lt;h3&gt;3. Task Directory w/ Special Extension&lt;/h3&gt;

&lt;p&gt;A third type of common configuration file you will find in Ruby projects is the &lt;code&gt;task/&amp;lt;foo&amp;gt;.&amp;lt;tool&amp;gt;&lt;/code&gt; or &lt;code&gt;tasks/&amp;lt;foo&amp;gt;.&amp;lt;tool&amp;gt;&lt;/code&gt; file. These files came about as a means of splitting Rakefiles up into topical and shareable units, and indeed this pattern is predominantly used by Rake files, e.g. &lt;code&gt;task/test.rake&lt;/code&gt;. But sometimes you will see the pattern used for other tools such as a &lt;code&gt;task/test.watchr&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The use of &lt;code&gt;task&lt;/code&gt; or &lt;code&gt;tasks&lt;/code&gt; directory as a conventional location for project configuration files can be advantageous for many project tools. It makes it clear where to find them, the &lt;code&gt;task&lt;/code&gt; directory itself is not hidden and does not clutter up a project&amp;#39;s root directory and the design dictates the flexibility of allows multiple, and thus topical, configuration files. However, the issue of the file extension yet again effects these files due to the use the tool name as the extension. Also, there might be a slight downside if a project tool uses the configuration file as a project root marker. This is what Rake does with the Rakefile. While not a show-stopper --after all it can look for &lt;code&gt;task/*.&amp;lt;tool&amp;gt;&lt;/code&gt;, it is not quite as ideal for the purpose.&lt;/p&gt;

&lt;h3&gt;4. Config Directory&lt;/h3&gt;

&lt;p&gt;Rails came along an introduced a variety of conventions for Ruby-based web applications, but also with ramifications for Ruby project&amp;#39;s in general. One of the conventions introduced is the use of a &lt;code&gt;config&lt;/code&gt; directory to house configuration files relevant to the Rails project. Unlike files in the &lt;code&gt;task&lt;/code&gt; directory, there is no special extension involved. Generally the whole name of the file is used to identify the purpose of the file. For example &lt;code&gt;config/database.yml&lt;/code&gt; is used to configure access to the underlying database.&lt;/p&gt;

&lt;p&gt;At first glance, using &lt;code&gt;config&lt;/code&gt; seems to have all the advantages of the &lt;code&gt;task&lt;/code&gt; directory without the any of downsides associated with using special extensions. Nonetheless, the convention hasn&amp;#39;t caught on for non-Rails projects. The reason is unknown to me, but perhaps it as trivial as the the simple fact that the term &lt;code&gt;config&lt;/code&gt; is six-characters long, whereas all conventional project directory names, that have managed to persist, are five or less and most often only three or four characters. It might seem a silly thing to get caught up on, but when a developer is looking at project file listings dozens of times a day or more, the fact the one entry should stick out excessively from the rest is what is commonly called an &amp;quot;eye-sore&amp;quot;. And an &amp;quot;eye-sore&amp;quot; is plenty of reason to deter usage. It is interesting to wonder if Rails had chosen a shorter term, say &lt;code&gt;conf/&lt;/code&gt; or &lt;code&gt;cfg/&lt;/code&gt; if it would have made the jump. In any case, that is mere speculation.&lt;/p&gt;

&lt;p&gt;There are a few project&amp;#39;s that support a &lt;code&gt;config&lt;/code&gt; directory, and do so to good effect. Cucumber for example will look for either &amp;#39;cucumber.yml&amp;#39;, &amp;#39;config/cucumber.yml&amp;#39; or &amp;#39;.config/cucumber.yml&amp;#39;.&lt;/p&gt;

&lt;h3&gt;5. Ordinary File&lt;/h3&gt;

&lt;p&gt;The last convention really isn&amp;#39;t a convention at all. Some project tools just designate an ordinary file name as the configuration file and expect to find it in the project&amp;#39;s root directory. In many ways, one could argue this is the best choice. It doesn&amp;#39;t suffer from the file extension issue and the files generally sort separate from documentation files which are capitalized. However, it does suffer a bit in that these files don&amp;#39;t stand out in any way as configuration files. And this fact allows them to still make a project seem cluttered if there are more than just a couple of them.&lt;/p&gt;

&lt;h2&gt;When to Use Which&lt;/h2&gt;

&lt;p&gt;Hidden dot-files have their place, but they are best reserved for files that the developer will rarely if ever need to edit. Generated files are the best example. The reason for this rule of thumb is simple. If a developer doesn&amp;#39;t see a file, the developer might not realize it already exists or know that he/she may need to edit it. If dot-files do fit your use case, also consider using a dot-directory instead of just a file. This ensures that no additional entries will clutter up the root project directory should more than one configuration file prove necessary or useful.&lt;/p&gt;

&lt;p&gt;Crapfiles are not a horrible choice, but as the colorful name suggests, they are not nearly the best choice either. Some developers argue against the use of Crapfiles because the &lt;code&gt;-file&lt;/code&gt; suffix is rather redundant. While that&amp;#39;s a fair point, one can also argue that the suffix helps distinguish configuration files from other files. Since Crapfiles tend to standout, they are best suited to configurations that need frequent editing. A word of caution about naming, when you have a tool with a name like &amp;quot;Foreman&amp;quot; and it&amp;#39;s configuration file is called &amp;quot;Procfile&amp;quot;, things are obviously not very intuitive. Consider carefully if perhaps an ordinary file name would suffice instead --it can always be capitalized if it needs to have prominence.&lt;/p&gt;

&lt;p&gt;Task files are a good approach for tools that can have multiple configurations or configuration profiles.  But even if a project does not support multiple configurations, there is nothing stopping the &lt;code&gt;task&lt;/code&gt; directory form holding ordinary files. Which means it could effectively co-opt the advantages of the &lt;code&gt;config&lt;/code&gt; directory too.&lt;/p&gt;

&lt;p&gt;As for the &lt;code&gt;config&lt;/code&gt; directory. If you are developing a Rails project, obviously that is the place for configuration files. While some have argued that &lt;code&gt;config&lt;/code&gt; is just for Rails and should not be co-opted for plain Ruby projects, presumably to save confusion, that seems too strict a view. If using the &lt;code&gt;task&lt;/code&gt; directory to the same end doesn&amp;#39;t strike your fancy, then &lt;code&gt;config&lt;/code&gt; is clearly the best place to put configuration files. The only good exception is when special prominence is needed that only a root level and unhidden file can bring.&lt;/p&gt;

&lt;p&gt;Simple uncaptialized ordinary root level files, while seemingly the least problematic, also have nothing that makes them special, which probably accounts for why they are so rarely used. They might as well be placed in the &lt;code&gt;task&lt;/code&gt; or &lt;code&gt;config&lt;/code&gt; directory to avoid root directory clutter.&lt;/p&gt;

&lt;h2&gt;Is there a Better Way?&lt;/h2&gt;

&lt;p&gt;So, is there a better way? That depends on how you look at it. One thing is for certain, there is no &lt;em&gt;perfect&lt;/em&gt; way, but that doesn&amp;#39;t exclude the possibility of compelling approach that mitigates most issues.&lt;/p&gt;

&lt;p&gt;The overarching problem here is simply the fact that so many conventions exist. With such a variety of naming conventions, it exacerbates the issue of cluttered project directories multiple times over.
Another disadvantage for all of these approaches, they make it difficult to share common configuration.&lt;/p&gt;

&lt;p&gt;In an effort to create a comprehensive solution, the &lt;a href=&quot;http://github.com/rubyworks/rc&quot;&gt;RC&lt;/a&gt; project has been created. RC designate a single file, &lt;code&gt;Config.rb&lt;/code&gt;, in which all tool configurations can be defined. A typical entry in this file is for test configuration. For example, to configure the &lt;code&gt;qed&lt;/code&gt; test tool we might designate:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:coverage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:qed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;simplecov&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;SimpleCov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;coverage_dir&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;log/coverage&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RC allows configurations to be grouped into profiles. Tool developers can take advantage of profiles to suite the needs of the tool (or not at all). The major advantage of using a single configuration file is the ability for variant configurations to share settings. Another advantage is to import configurations from other projects. For example, the QED project provides the basic SimpleCov configuration which can be easily reused.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:coverage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:qed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:qed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplecov&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RC is still a work in progress, but the overarching design is in place with numerous advantages over the scattered approaches of the past. Though some of the traditional approaches might still be more suited to very specific cases, most tools can benefit from a unified approach.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Setting Priorities Trumps Warnings</title>
      <link>http://trans.github.com/2012/02/25/setting-priorities-trumps-warnings/</link>
      <pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/02/25/setting-priorities-trumps-warnings</guid>
      <description>&lt;h1&gt;Setting Priorities Trumps Warnings&lt;/h1&gt;

&lt;p&gt;Today I had to consider how best to handle omission exceptions in the context of test frameworks, and their use case to mark &lt;em&gt;pending tests&lt;/em&gt;. In the course of doing so, I realized there are at least two reasonable levels of omission, those there are &amp;quot;ASAP&amp;quot; and those that are &amp;quot;NSM&amp;quot; (Not So Much). Where as other frameworks used their own specially defined classes for these, e.g &lt;code&gt;Pending&lt;/code&gt; and &lt;code&gt;Omission&lt;/code&gt;, my approach is to re-utilize Ruby&amp;#39;s own &lt;code&gt;NotImplementedError&lt;/code&gt;. But then I had to consider how to differentiate between these priorities.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s when the more general notion occurred to me of &lt;strong&gt;Exception Priorities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider that instead of raising a warning:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Don&amp;#39;t do it, mate!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could use the the Exception system, setting a low &amp;quot;warning&amp;quot; level priority.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Don&amp;#39;t do it, mate!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All things being nominal, Ruby would see the priority of this exception is below 0, output the message to &lt;code&gt;$stderr&lt;/code&gt; if &lt;code&gt;$VERBOSE=true&lt;/code&gt; and then continue on. Hence it is a warning!&lt;/p&gt;

&lt;p&gt;With this, &lt;code&gt;#warn&lt;/code&gt; could become a simple alias for &lt;code&gt;#raise&lt;/code&gt; with a default negative priority.&lt;/p&gt;

&lt;p&gt;Now, if that was all there was to it, then there would be little reason to adopt the idea. But there are some really nice advantages to this approach.&lt;/p&gt;

&lt;p&gt;With regards to warning messages, we could use the &lt;code&gt;$VERBOSE&lt;/code&gt; setting to refine the level of warning we want to be notified about. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;vg&quot;&gt;$VERBOSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;More Serious Warning!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Less Serious Warning!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case we would never see the &lt;code&gt;-2&lt;/code&gt; level warning b/c we&amp;#39;ve indicated we don&amp;#39;t want to see those by setting $VERBOSE to higher specific level.&lt;/p&gt;

&lt;p&gt;Interestingly enough, we can do the same for actually raising errors! Let&amp;#39;s call the setting &lt;code&gt;$PRIORITY&lt;/code&gt; for the sake of discussion.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;vg&quot;&gt;$PRIORITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;More Serious Warning!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Less Serious Warning!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where as before, the &amp;quot;More Serious Warning&amp;quot; would just have printed a warning message to &lt;code&gt;$stderr&lt;/code&gt;, in this case the Exception will actually be raised, b/c we have lowered the threshold at which exceptions are to be raised.&lt;/p&gt;

&lt;p&gt;This refinement to Ruby&amp;#39;s Exception system, effectively subsuming the warning system within it, makes for a much more powerful, flexible and thus useful system. Take my original use case, I can set the priority of NotImplementedError to &lt;code&gt;1&lt;/code&gt; for ASAPs and &lt;code&gt;0&lt;/code&gt; for NSMs, and I can go further allowing testers to set high priorities to be selectable from the command line.&lt;/p&gt;

&lt;p&gt;Want another use case? How about a &lt;code&gt;DeprecatedError&lt;/code&gt; that has a default priority of &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am certain other will think of other use cases as well. This is one of those pliable features that tend to have far wider applicability then the originating use case.&lt;/p&gt;

&lt;p&gt;P.S. I&amp;#39;ve always thought is would make more sense if &lt;code&gt;$VERBOSE&lt;/code&gt; were called &lt;code&gt;$WARN&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Rubys Unexceptional Exception Constructor</title>
      <link>http://trans.github.com/2012/01/19/rubys-unexceptional-exception-constructor/</link>
      <pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2012/01/19/rubys-unexceptional-exception-constructor</guid>
      <description>&lt;p&gt;You would think after all this time Ruby&amp;#39;s Exception class would be a rather robust and clearly comprehensible class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets try something &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No problem. But now lets try to set the message and the backtrace.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is an error!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrong&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`initialize&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;    from (irb):13:in `&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    from (irb):13:in `raise&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clearly Ruby expects any Exception&amp;#39;s initialize method to handle the message argument. That&amp;#39;s a rather strict contract for something Ruby is letting us override. But okay, let&amp;#39;s take that as a given. Obviously Ruby is routing the #raise call to the exception&amp;#39;s initializer. So then we should that the third &lt;code&gt;array&lt;/code&gt; argument would passed along too. Turns out that&amp;#39;s not the case.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is an error!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;caller&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This is an error!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nope. No caller in sight. So where did it go? Turns out Ruby is setting the caller via the error&amp;#39;s &lt;code&gt;#set_backtrace&lt;/code&gt; method and doesn&amp;#39;t depend on the initializer to handle it at all. This seems rather odd, since it was keen on letting the initializer handle the message argument, and would blow-up if the class won&amp;#39;t take it.&lt;/p&gt;

&lt;p&gt;So the upshot seems to be that we can&amp;#39;t customize an exceptions initializer adn expect &lt;code&gt;#raise&lt;/code&gt; to play along.&lt;/p&gt;

&lt;p&gt;I actually had another point to make about how things gets even worse. Unfortunately had to take care of other chores and by the time I got back to this blog post (months later) I forgot what these &amp;quot;worse things&amp;quot; were. I think it had something to do with how &lt;code&gt;#message&lt;/code&gt; calls &lt;code&gt;#to_s&lt;/code&gt; rather then returning the message passed to the initializer. But as said I am not certain now. &lt;/p&gt;

&lt;p&gt;My conclusion however is this. I was attempting to make use of an Exception class as something more than a mere container for a string message for the &lt;a href=&quot;http://github.com/rubyworks/assay&quot;&gt;Assay&lt;/a&gt; project. That is when I ran into these oddities which made doing so quite unpleasant. To my dismay I ended up abandoning the approach. I brought some aspects of this up in a &lt;a href=&quot;http://bugs.ruby-lang.org/issues/5898&quot;&gt;issue report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For reference, here is the relevant Ruby &lt;a href=&quot;https://github.com/ruby/ruby/blob/trunk/eval.c&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Lazy Plus Enumerable Begats Denumerable</title>
      <link>http://trans.github.com/2011/10/04/lazy-plus-enumerable-begats-denumerable/</link>
      <pubDate>Tue, 04 Oct 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/10/04/lazy-plus-enumerable-begats-denumerable</guid>
      <description>&lt;h1&gt;Lazy + Enumerable = Denumerable&lt;/h1&gt;

&lt;p&gt;All Rubyists know and love Enumerable. It&amp;#39;s the really the showcase of Ruby&amp;#39;s mixin system. Some Rubyists also know and appreciate &lt;a href=&quot;http://moonbase.rydia.net/software/lazy.rb/&quot;&gt;lazy.rb&lt;/a&gt; MenTaLguY&amp;#39;s excellent lazy evaluation library. But did you know there is library that essentially cross-breeds the ideas of both? It&amp;#39;s called &lt;a href=&quot;http://github.com/rubyworks/facets/blob/master/lib/core/facets/denumerable.rb&quot;&gt;Denumerable&lt;/a&gt; and is included in Ruby Facets (&lt;code&gt;require &amp;#39;facets/denumerable&amp;#39;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;According to Webster&amp;#39;s The term &lt;code&gt;denumerable&lt;/code&gt; is just a synonym for &lt;code&gt;enumerable&lt;/code&gt;. In Ruby parlance, it takes a more useful distinction of &amp;quot;deferred enumerable&amp;quot;. In other words Denumerable defers actual calculations of a chain of enumerable method calls until the results are actually needed. That&amp;#39;s where the &amp;quot;laziness&amp;quot; comes in. By deferring calculation Ruby is able to optimize the algorithm, in many cases greatly improving performance. It&amp;#39;s even possible to enumerate infinite ranges if the end result itself is finite.&lt;/p&gt;

&lt;p&gt;To make it even more convenient there is &lt;a href=&quot;http://github.com/rubyworks/facets/blob/master/lib/core/facets/enumerable/defer.rb&quot;&gt;Enumerable#defer&lt;/a&gt; (&lt;code&gt;require &amp;#39;facets/enumerable/defer&amp;#39;&lt;/code&gt;) which delegates an Enumerable object through a Denumerator, just like Ruby&amp;#39;s core Enumerator class.&lt;/p&gt;

&lt;p&gt;So, enough talk, right? How about an example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1_000_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The performance gains of Denumerable cannot be understated. The above example takes 1/10000th of a second to run on my system. I wanted to provide the time it takes to run without &lt;code&gt;defer&lt;/code&gt;, but after an hour of waiting and listening to it eat my hard drive for breakfast, I gave up.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Indentured Stringitude</title>
      <link>http://trans.github.com/2011/10/02/indentured-stringitude/</link>
      <pubDate>Sun, 02 Oct 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/10/02/indentured-stringitude</guid>
      <description>&lt;h1&gt;Indentured Stringitude&lt;/h1&gt;

&lt;p&gt;One of the great things about Ruby is the extensive collection of methods
available to the core classes. Of these the String class reigns supreme with
over 100 methods from which to make good use. Among these methods are those we
all use almost every time a string is laid to editor, such as #strip, #+ and #&amp;lt;&amp;lt;.
Others are present that have more specific but important uses, such as #lines, #scan
and #getbyte. There are even a few that can leave one scratching ones head
a bit trying to fathom the usecase, such as #sum.&lt;/p&gt;

&lt;p&gt;Yet, despite its wide address, there is a set of methods that have gone
completely overlooked, which is really remarkable when you consider their
purpose, the frequency of their utility and the code savings they provide
when used. These are methods dealing with &lt;em&gt;indentation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It was many years ago when I first was introduced to these three methods by
Gavin Sinclair: #tab, $tabto and #indent. Their interfaces are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;tab(n)
Aligns each line n spaces.

tabto(n)
Preserves relative tabbing in which the first non-empty line ends up
with n spaces before non-space.

indent(n, c=&amp;#39; &amp;#39;)
Indent left or right by n spaces.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So clearly useful, these were some of the first to make their way in to Ruby
Facets, and they have proven invaluable to me in numerous projects ever since.&lt;/p&gt;

&lt;p&gt;Sometime shortly there after, another related method also proved useful at
times, String#margin. It is documented:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;margin(n=0)
Provides a margin controlled string.

  x = %Q{
        |This
        |  is
        |    margin controlled!
        }.margin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method is useful largely because it prevents a horrible code smell.
How often have you seen some jutting HERE doc that threw all that nicely
indented Ruby code to the wall.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    def help_text
      &amp;lt;&amp;lt;-HERE
Usage: foo bar
-x some option
-y another option
      HERE
    end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This all too common eye blight was the inspiration for the creation of #margin.
In fact, so confident were Peter and I in this approach to remove these ugly
code-squids that we conceived a %-literal to support such a construct would
be an unimpeachable addition to the language itself, allowing the even more
elegant notation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;x = %L|Usage: foo bar
      |-x some option
      |-y another option
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Such a syntax, being built into Ruby proper, would not suffer the computational
overhead of the pure Ruby implementation, or the extraneous brackets.&lt;/p&gt;

&lt;p&gt;In all my years of coding Ruby, it seems to me, these are the the clearest
omissions that I have repeatedly found need. And so concluded that they really
should be a part of Ruby proper. And as much as I owe Ruby&amp;#39;s String class for all
the time saving methods it provides, in this case, as often as I&amp;#39;ve had copy and
paste or add a dependency to &amp;#39;facets&amp;#39; just to get these methods, I think the
String class owes me one!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : String Indenture
author     : trans
categories : [string, ruby]
date       : 2011-10-02
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Is It An Attribute</title>
      <link>http://trans.github.com/2011/09/10/is-it-an-attribute/</link>
      <pubDate>Sat, 10 Sep 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/09/10/is-it-an-attribute</guid>
      <description>&lt;h1&gt;Is it an Attribute?&lt;/h1&gt;

&lt;p&gt;What exactly is an attribute? From the standpoint of OOP, a Ruby attribute is 
intended to be what is generally referred to as an &lt;i&gt;accessor method&lt;/i&gt;.
An accessor method is a means of direct access to an object&amp;#39;s underlying state.
In other words, it is a method for direct access to an instance variable. And
that is exactly what Ruby&amp;#39;s helper class methods, i.e. &lt;code&gt;attr&lt;/code&gt;, &lt;code&gt;attr_reader&lt;/code&gt;,
&lt;code&gt;attr_writer&lt;/code&gt; and &lt;code&gt;attr_accessor&lt;/code&gt;, achieve.&lt;/p&gt;

&lt;p&gt;However, Ruby&amp;#39;s &amp;quot;accessor methods&amp;quot; are not specially recognized methods, 
(as are &lt;em&gt;properties&lt;/em&gt; in Javascript, for example). Rather Ruby simply creates
regular old methods which internally work with the an instance variable. This
fact leads to a bit of puzzlement. If attributes are Ruby&amp;#39;s means for creating 
accessor methods, but attributes are only a short-cut for creating regular
methods, when then is a method an attribute or not an attribute?  For instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is &lt;code&gt;#x&lt;/code&gt; an attribute in this example since it results in the exact same 
class definition as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would seem to be, but neither RDoc or YARD will document it as such, even though
both list attributes of a class.&lt;/p&gt;

&lt;p&gt;Going a step further, if the later definition &lt;em&gt;is&lt;/em&gt; an attribute, which is an accessor
method, what then is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;class Foo
  def x; @x.to_s; end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does the addition of #to_s invalidate #x as an accessor and thus as an attribute?
Is that the case even if @x is &lt;em&gt;supposed&lt;/em&gt; to be a string?&lt;/p&gt;

&lt;p&gt;More confusing still, since Ruby methods can be rewritten at any time, there is the 
opposite possibility that what appears as an attribute is not actually an accessor
method as all. Experienced Rubyists know that Ruby issues a warning when a method
overwrites another method --even one created via an &lt;code&gt;attr&lt;/code&gt; method. But it&amp;#39;s just
a warning and a fairly minor one at that. This can cause some very basic
confusion if an attribute is overwritten by a method.&lt;/p&gt;

&lt;p&gt;Ruby&amp;#39;s common documentation tools make this issue very easy to see. Take a class
defined as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;class IsItAnAttribute
  # Attribute accessor #foo.
  attr_accessor :foo

  # Attribute reader #foo.
  attr_reader :bar

  # Attribute writer #foo.
  attr_writer :baz

  # Method #foo.
  def foo; @foo + 1; end

  # Method #foo=.
  def foo=(i); @foo = i.to_i - 1; end

  # Method #bar.
  def bar; end

  # Method #bar=(i)
  def bar=(i); @bar = i; end

  # Method #baz.
  def baz; @baz; end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case of &lt;a href=&quot;examples/is-it-an-attribute/rdoc/index.html&quot;&gt;RDoc&lt;/a&gt;,
it lists &lt;code&gt;bar=&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;foo=&lt;/code&gt; as methods, and &lt;code&gt;bar[R]&lt;/code&gt;, &lt;code&gt;baz[W]&lt;/code&gt;
and &lt;code&gt;foo[RW]&lt;/code&gt; as attributes. The attributes seem reasonable if we simply
take it on faith that attribute declarations are accessors regardless of
what the methods might be doing --it&amp;#39;s the documentors issue. And maybe that
is all we can reasonably expect. But it is odd that #bar is missing from the
method definitions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;examples/is-it-an-attribute/yard/index.html&quot;&gt;YARD&lt;/a&gt; on the other hand,
also lists &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; as attributes, but does not make
it clear if they are readers, writers or both. It also lists &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;
and &lt;code&gt;foo&lt;/code&gt; as methods, with no indication that writers even exist. YARD has
some attribute related tags for this, but what seems like the proper approach
to improve the documentation appears to do nothing new.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;# Method #bar.
# @attribute r bar
def bar
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(And I would add, there is no &lt;code&gt;[view source]&lt;/code&gt; link in this case as well.)&lt;/p&gt;

&lt;p&gt;So what gives? What really is an attribute? I&amp;#39;m inclined to think we might need
to throw out the whole concept from Ruby, at least as Ruby now stands. Attributes
are nothing more than a meta-programming device to create methods and it&amp;#39;s
impossible to ensure documentation only labels methods that behave as 
accessor methods.&lt;/p&gt;

&lt;p&gt;On the other hand, perhaps we should redefine that concept of an attribute,
not as an accessor method, but as any method we want it to be so long as it
accesses an instance variable in some form or fashion (albeit enforcing that
is not strictly possible either). In that case it might be worth adjusting
the attr methods to act as &lt;em&gt;declarations&lt;/em&gt; rather then merely meta-methods.
In this way any method could be declared an attribute in the same way that
methods can be declared public, private or protected.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Is it an Attribute?
author     : trans
categories : [attributes, oop]
date       : 2011-09-10
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ruby Heart Higher Order Functions</title>
      <link>http://trans.github.com/2011/09/07/ruby-heart-higher-order-functions/</link>
      <pubDate>Wed, 07 Sep 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/09/07/ruby-heart-higher-order-functions</guid>
      <description>&lt;h1&gt;Ruby Heart High-Order Functions&lt;/h1&gt;

&lt;p&gt;Ruby Facets has a class called &lt;a href=&quot;http://rubyworks.github.com/rubyfaux/?doc=http://rubyworks.github.com/facets/docs/facets-2.9.3/core.json#api-class-Functor&quot;&gt;Functor&lt;/a&gt;. In common computer science parlance &amp;quot;functor&amp;quot; simply means an objectified function. Ruby already has more than it&amp;#39;s share of these with Method, Proc and blocks. So what does Functor bring to the table? Its a bit more that just a first-class function. Rather, it is a &lt;i&gt;higher-order function&lt;/i&gt;. What it allows us to do is define a function that responds dynamically to a message call. Here is a very basic example to clarify the idea.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;facets/functor&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 6&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 9&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how are higher-order functions useful? There are many possibilities. Consider this crazy little core extension that just occurred to me this evening.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;facets/functor&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:===&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hey it starts with an `f`!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#39;s just off the top of my head. There are many potential uses. In fact, Ruby has a quite popular functor already known as &lt;em&gt;Enumerator&lt;/em&gt;. But that is a very specialized implementation. What Functor does is make it easy for us to quickly roll our own generic higher-order functions.&lt;/p&gt;

&lt;p&gt;Now you can read plenty of interesting articles about the merits of high-order functions. I&amp;#39;ll even provide you a few links (see below). But what I really want to talk about in this article is the merits of Ruby making higher-order functions an integral part of the core language. Even as the current implementation of Functor stands, I think it would make a good addition to the language. But there is a downside to the implementation in that it must create a new object every time it is used. Using a cache can help, but that raises issues of memory footprint and serialization.&lt;/p&gt;

&lt;p&gt;If, on the other hand, Ruby could internalize the concept of a Functor as a fluent method dispatch mechanism, Ruby would be able to remove this overhead. That is to say, if a higher-order function could be defined as a method, albeit a special kind of method, instead of as an object, then the overhead would be removed. Indulge my use of some pseudo-code similar to rescue notation in order to provide you an idea of what our previous example could look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:===&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The exact notation is, of course, not the important thing. The point is that it&amp;#39;s just a special kind of method that Ruby attaches to the class or module, and handles the dispatching mechanics internally without the need for instantiating a new hollow Functor object each time.&lt;/p&gt;

&lt;p&gt;I think this would be a very cool feature. One of those things that would set Ruby even further apart from other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: I recently learned that Python handles higher-order functions in an interesting way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ruby doesn&amp;#39;t have first-class methods, so emulating Python&amp;#39;s behaviour here would require a slightly different approach, probably something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;dispatch&lt;/code&gt; would be a new keyword akin to &lt;code&gt;return&lt;/code&gt;. Yet such an approach still suffers from the creation of an spurious object, albeit in this case it is a temporary local lambda that probably can be GC&amp;#39;d pretty quickly. So this is a middle ground possibility. Personally, I still think the previously mentioned special method idea is better. And we want Ruby to better than Python, right? ;)&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://c2.com/cgi/wiki?HigherOrderFunction&lt;/li&gt;
&lt;li&gt;http://kbullock.ringworld.org/2007/03/26/higher-order-messaging/&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;categories: [functor, higher-order functions]&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>On The Meaninglessness Of Class Vs Module</title>
      <link>http://trans.github.com/2011/09/05/on-the-meaninglessness-of-class-vs-module/</link>
      <pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/09/05/on-the-meaninglessness-of-class-vs-module</guid>
      <description>&lt;h1&gt;Fear Not the Wereclass&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;DRAFT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the spirit of Halloween, lets take the fun example of the Werewolf. Lets say we already have classes for Man and Wolf at our disposal --some very smart programmer already did the hard work for us and developed these definitive representations ;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Man&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shoot_gun&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bang!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;give_chase&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;After it!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wolf&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;howl&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Awoooooooo&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;give_chase&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Woosh!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now what about our Werewolf? Half-man and half-wolf, what superclass do we use in its case? Most classes have a clear superclass, but some, such as our werewolf, are not as clear-cut. Perhaps we decide that a werewolf in our universe is more like a wolf than a man, so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Werewolf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wolf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we are still left to add Man&amp;#39;s qualities . Ruby gives us no easy way to do this given our original classes. So we are forced to refactor the former Man class into a module.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ManLike&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shoot_gun&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bang!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;give_chase&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;After it!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Man&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ManLike&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Werewolf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wolf&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ManLike&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well there you go, a bit long winded perhaps, but it does the deed. But hang on. It appears things are a bit worse off than we might have suspected. We thought by using Wolf as the superclass we were saying a warewolf is essentially a wolf, but with some man like qualities. Surely that is what it must mean for a Warewolf to be a subclass of a Wolf. Unfortunately we would be wrong. When we ask a warewolf to &lt;code&gt;give_chase&lt;/code&gt;, we discover it is doing it in quite the mainly way, not the wolfly way.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;werewolf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Werewolf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;werewold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;give_chase&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;After it!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh dear, that&amp;#39;s not good. The difference lies in the order of lookup. If two methods conflict, guess which one takes precedence? Would you be surprised to know that is not the superclass, but the rather the mixin?&lt;/p&gt;

&lt;p&gt;Well, it doesn&amp;#39;t make a great deal of sense, but clearly we have no choice, we must refactor again.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WolfLike&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;howl&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Awoooooooo&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;give_chase&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Woosh!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wolf&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WolfLike&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Werewolf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Man&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WolfLike&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, there we are. Not our ideal conception of things, clearly, but it &lt;i&gt;does what we need it to do&lt;/i&gt;... Of course, in the real world the original classes are not necessarily under our control, leading us to the only and unenviable option of re-implementing everything. What a waste.&lt;/p&gt;

&lt;p&gt;The fact that Ruby inheritance system in conjunction with it&amp;#39;s mixin system produces a wonky order to method look-up; the fact that we can&amp;#39;t &lt;em&gt;reuse&lt;/em&gt; a class as a module when we might have need to do so; and the fact that we are left then only to do things in unseemly manners and duplicating lots of code too, well, to put it&amp;#39;s all a bit frightful. But really, it not just our coding that become strained and more difficult --after all we are programmers, we &amp;quot;work around&amp;quot;. What really is a shame is that it severely limits the utility of Ruby&amp;#39;s inheritance model and contributes in no small part as to why we see so little &lt;em&gt;semantic&lt;/em&gt; subclassing in Ruby programs, as opposed to the simplistic base-class designs that we frequently see.&lt;/p&gt;

&lt;p&gt;The fact is the division is between class and module is essentially arbitrary.&lt;/p&gt;

&lt;p&gt;Consider this little trick:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The distinction between a module and a class it Ruby is purely a superficial one that has been hard coded into the language for no utilitarian reason. It is there only as an artifact of the original conceptualization.&lt;/p&gt;

&lt;p&gt;Removing the distinction of class vs module has nothing to do with multiple inheritance. Classes still only have a single superclass. Rather it is the principle of ... that is being violated. There is no need for a module to know it&amp;#39;s a module or class it know it&amp;#39;s a class. Both are merely encapsulations. What matters is how they are used.&lt;/p&gt;

&lt;p&gt;There is also a wonderful side benefit from this removal. Load order would no longer matter when two different scripts attempt to utilize the same namespace. &lt;/p&gt;

&lt;p&gt;Now I can all but guarantee that at some point someone, who very likely hasn&amp;#39;t read this entire post, is going to say &amp;quot;use delegation&amp;quot;. Yes, yes. I am a big fan of delegation myself. But that is not what this article is about. It is about the utilization of Ruby&amp;#39;s inheritance and mixin system. If delegation were always the answer then we might as well flush the whole inheritance and mixin things down the drain and use delegation for everythin. But that&amp;#39;s a different debate. The question here is, if we are going to have inheritance and mixins, then obviously we should make the greatest use of them.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>We Dont Need No Stinking Modules</title>
      <link>http://trans.github.com/2011/07/09/we-dont-need-no-stinking-modules/</link>
      <pubDate>Sat, 09 Jul 2011 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2011/07/09/we-dont-need-no-stinking-modules</guid>
      <description>&lt;h1&gt;We Don&amp;#39;t Need No Stinking Modules&lt;/h1&gt;

&lt;p&gt;Among experienced developers you will hear no end of praise for delegation. All things considered, it is the most powerful, flexible and controllable means of incorporating reusable behaviors. Even so, I recollect that I once read, no object-oriented programming language utilized delegation as it&amp;#39;s only means of handling modules.&lt;/p&gt;

&lt;p&gt;With the talk of Ruby 2.0 support the concept of Module#mix (essentially a traits system), I can&amp;#39;t help but wonder why bother. In fact, I have a bit of code for you to consider.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@_delegates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@_delegates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here we have the basis of a delegate-based reusable component system. Of course, we need to work this at the class level too, if we want move past Prototype-based OOP. That&amp;#39;s not difficult, we just use a class level delegate store, and override #new to insert the delegates on initialization.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delegates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_delegates&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@_delegates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@_delegates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_delegates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@_delegates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is there really anything else that we need? Okay sure, it needs to be beefed-up, to do things like &amp;quot;inherit&amp;quot; delegates from superclasses, but as the basis of such a system, it&amp;#39;s square.&lt;/p&gt;

&lt;p&gt;Now the caveats.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s not going to be very fast having to &amp;quot;find&amp;quot; the methods like this every time. Granted. But I suspect that an optimized version of this could be implemented in Ruby itself, mitigating most if not all of that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The delegate has no access to the delegator&amp;#39;s state. This is a serious issue for mixins like Enumerable. The could be fixed by giving the delegate access to the delegator. Since a delegate can be reused by other objects, this would require duplicating each delegate, or wrapping it in a special container instance, and passing it a reference to the delegator. That would be pretty inefficient though. Better would be a dynamic means of access handled by the Ruby interpreter itself. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ruby AOP Made Simple</title>
      <link>http://trans.github.com/2010/10/13/ruby-aop-made-simple/</link>
      <pubDate>Wed, 13 Oct 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/10/13/ruby-aop-made-simple</guid>
      <description>&lt;!-- ---
title: Ruby AOP Made Simple
author: trans
date: 2010-10-13
categories: [aop, cuts, ruby]
layout: post
--&gt;

&lt;h1&gt;Ruby AOP Made Simple&lt;/h1&gt;

&lt;h2&gt;Quick Recap&lt;/h2&gt;

&lt;p&gt;Aspect Oriented Programming (AOP) is a topic I have spent a fair amount of
time contemplating. I, along with Peter VanBroekhoven, developed
the concept of Cut-based AOP back in 2005-2006. A limited &amp;quot;toy&amp;quot; implementation of
which can be had by installing the &lt;code&gt;cuts&lt;/code&gt; gem. The basic idea behind Cut-based
AOP is the &lt;i&gt;transparent subclass&lt;/i&gt;, a.k.a. the &lt;em&gt;cut&lt;/em&gt;, which is essentially
a subclass that subsumes the role of the class it effects without the programmer
needing any knowledge of it doing do. In this way, the cut serves as the atomic
construct in a purely object-oriented appraoch to AOP. You can read more about it
&lt;a href=&quot;http://github.com/rubyworks/cuts/blob/master/RCR.textile&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In dicussing this idea on the ruby-talk mailing list it was suggested that
an easier approach would be to forgo the Cut class and simply allow modules
to be &amp;quot;prepended&amp;quot; to the class or module to which they are applied. So for
instance we might write:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;{hello}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cut-based AOP is a general OOP design that can be applied to any
object-oriented programming language. But for Ruby, the idea of &lt;code&gt;prepend&lt;/code&gt;,
while more limited, does serve much of the same purpose, and the idea is up for 
&lt;a href=&quot;&quot;&gt;consideration&lt;/a&gt; in a future verison of Ruby.&lt;/p&gt;

&lt;h2&gt;Another Way&lt;/h2&gt;

&lt;p&gt;There is however another way to essentially use prepend-like AOP in Ruby without
extending Ruby in any special way. The trick is simply to design classes
and module to be &amp;quot;AOP-ready&amp;quot;. Here is an example of the above using nothing
more than standard Ruby.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Joinable&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Joinable&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;{hello}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty easy. We have simply encapsulate C&amp;#39;s instance methods in a &amp;quot;Joinable&amp;quot;
module, thus any new inclusions into C itself will actually come &lt;em&gt;before&lt;/em&gt;
these methods.&lt;/p&gt;

&lt;p&gt;This of course raises the issue of including modules in the normal fashion,
in which case we would need in include them in Joinable itself, e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Joinable&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could facilitate this will a little bit of Ruby magic.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:include&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;const_defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Joinable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;const_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Joinable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;const_defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Joinable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is not Joinable&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a very simplistic implementation, but a robust implementation would
be only slightly more complex. Now, as along as we use &lt;code&gt;Joinable&lt;/code&gt;,
we can use #prepend.&lt;/p&gt;

&lt;!-- ---
title: Ruby AOP Made Simple
author:
  name: trans
date: 2010-10-13
categories: [aop, cuts, ruby]
layout: post
--&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Do The Right Thing Git Porcelain</title>
      <link>http://trans.github.com/2010/06/04/do-the-right-thing-git-porcelain/</link>
      <pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/06/04/do-the-right-thing-git-porcelain</guid>
      <description>&lt;h1&gt;The &amp;quot;Do The Right Thing&amp;quot; Git Porcelain&lt;/h1&gt;

&lt;p&gt;Before making any changes to a program, a good developer will make an entry in an issue tracker and then create a separate branch in which to handle the issue. Only then making the necessary changes and finally merge the changes into to the master branch when they are ready. All before finally marking off the issue as complete.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s the ideal anyway. It is, unfortunately, too easy to not do these things by skipping a step or never bothering with them at all. Who really wants to waste time with all this? Developer&amp;#39;s just want to get the job done. To remedy this, we might create a &amp;quot;Do The Right Thing&amp;quot; Git porcelain.&lt;/p&gt;

&lt;p&gt;Lets say we had a bug to fix. We could simply invoke our DTRT command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dtrt new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An editor (provided by &lt;code&gt;$EDITOR&lt;/code&gt;) opens to allow the developer to describe the issue in detail. When saved and exited, it will automatically create a new branch with a name based on the description and check the branch out, ready to go.&lt;/p&gt;

&lt;p&gt;Now changes can be made. When complete (which means passing tests, right?) we simply tell DTRT again.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dtrt &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it will merge the current topic branch into master using the issue description we originally gave it. All done. And, hey, we did the right thing!&lt;/p&gt;

&lt;p&gt;Such a porcelain alone would be useful, but it gets even better when we start adding hooks into this process.&lt;/p&gt;

&lt;p&gt;For instance, a hook can be added such that new issue creation can post an entry directly to an issue tracker such as GitHub Issues. Not only can it post the issue, but when an issue is complete, it can label the ticket with the version it belongs and closes it. Notice the added benefit of this: it creates automatic changelogs! No more writing those tired HISTORY files. In fact, by using DTRT religeously, we can use a tool like &lt;a href=&quot;http://rubyworks.github.com/vclog&quot;&gt;VCLog&lt;/a&gt; to pop out prefect HISTORY files in almost any format.&lt;/p&gt;

&lt;p&gt;To encourage proper TDD, a hook on new issue creation could automatically create a test in a preferred format and drop the developer directly into an editor with it. Thus putting TDD in our proverbial laps.&lt;/p&gt;

&lt;p&gt;Another hook placed on merging could prevent the completion of the issue branch until all tests pass, thus helping to improve the quality of check-ins.&lt;/p&gt;

&lt;p&gt;I have no doubt other&amp;#39;s might come up with a few other helpful hooks as well.&lt;/p&gt;

&lt;p&gt;I have not endeavored to implement this, having too many other projects to work on already. But it would make a good project for another inspired soul.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Xdg Next Generation</title>
      <link>http://trans.github.com/2010/06/02/xdg-next-generation/</link>
      <pubDate>Wed, 02 Jun 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/06/02/xdg-next-generation</guid>
      <description>&lt;h1&gt;XDG NG&lt;/h1&gt;

&lt;p&gt;I can never stress enough the value of using the XDG directory standard to
developers. This is one of those standards that can only really benefit us
all if enough developers truly care to make a better eco-system.&lt;/p&gt;

&lt;p&gt;I have decided to take two approaches to my encouragment. The first is to
improve the current XDG API to the point of triviality. It will be one script,
which others can copy to their project if they prefer it to having another
dependency. And I will make it even easier to use --one point of entry,
and readily obvious semantics.&lt;/p&gt;

&lt;p&gt;But more I have decided to go beyond this and crrate a new standard --a derivation to
the XDG standard that takes an well demonstrated Rails practice into account: convention
over configuration. By doing so the standard can be further simplified and thus 
become even more trivial, and hopfully in this manner become widely supported to 
the benefit of us all.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;~/.cache
~/.config
~/.data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update: I started a project for this. See &lt;a href=&quot;https://github.com/tabcomputing/bds&quot;&gt;BDS&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : XDG Next Generation
author     : trans
categories : [xdg, fhs]
date       : 2010-06-02
layout     : post
published  : false&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A Second Look At Bundler</title>
      <link>http://trans.github.com/2010/05/19/a-second-look-at-bundler/</link>
      <pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/05/19/a-second-look-at-bundler</guid>
      <description>&lt;h1&gt;A Second Look at Bundler&lt;/h1&gt;

&lt;p&gt;A few days ago I wrote an article on my concerns with Bundler. Since then I&amp;#39;ve received enough feedback to refine my thoughts. My opinion that the Ruby/Rails community is on a &amp;quot;crazy train&amp;quot; with regards to Bundler has everything to do with state of complexity of Rails code these days and it&amp;#39;s infiltration into plain vanilla Ruby projects. Of course, Bundler&amp;#39;s intent is to do just the opposite, but such is the danger of new technologies that we must be cautious of inevitable unexpected consequences. So, taking the feedback into account, here&amp;#39;s a better breakdown of the ups and downs of Bundler as I now see them.&lt;/p&gt;

&lt;h2&gt;On the Upside&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;Bundling&lt;/b&gt;: I have been informed that the ability to bundle gems is a useful feature for administrators of systems with limited Internet access. I did not expect this to be common enough to even warrant a tool (just use a tarball). But apparently is common enough. For this use Bundler is understandably useful. It&amp;#39;s ability to resolve dependencies pre-runtime makes it especially good at doing so.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Installs&lt;/b&gt;: The &lt;code&gt;bundle install&lt;/code&gt; feature has similar applications to bundle. It can be used to ease deployment. More specifically, a deployment script can contain a simple invoke &amp;#39;bundle install&amp;#39;, rather then handle the installation of each gem itself. In addition it makes it easier for developers to get up and running quickly, a simple &amp;#39;bundle install&amp;#39; will install everything you need to develop a project. So this feature has it&amp;#39;s clear benefits.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Groups:&lt;/b&gt; Groups are convenient when selecting certain gems from the list of all requirement, as a means to specialize usage to the end-users needs. Although perhaps a minor benefit, one can see how it can be useful to the developer. As currently implemented Bundler only supports opt-out groups. It might be nice if it also provided for opt-in selections.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Locking&lt;/b&gt;: The locking feature is probably Bundler&amp;#39;s most significant feature. It allows the developer to nail down their application to the latest gems that best meet all the requirements as given in the Gemfile. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Gemfile&lt;/b&gt;: Of course, Rubyists are accustomed to nice DSL to &amp;quot;describe&amp;quot; code. The Gemfile makes excellent use of this ability and it is especially nice to have a single clear file to describe all the dependencies of a project.&lt;/p&gt;

&lt;h2&gt;On the Downside&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;Bundling&lt;/b&gt;: The downside of bundling comes when developers misuse the feature. Because Bundler does more than just bundle gems for special deployments, there may be a tendency towards using it in this way regardless of the need to do so. For example, yesterday I cloned the &lt;a href=&quot;http::/github.com/qrush/gemcutter&quot;&gt;Gemcutter&lt;/a&gt; repository. The download consumed 22.61 MiB of space. On close inspection I discovered why. The &lt;code&gt;vendor/cache&lt;/code&gt; directory contains a copy of every gem on which Gemcutter depends. Consider what this means. In effect, Bundler has undermined the entire purpose of having a package manger!&lt;/p&gt;

&lt;p&gt;If Bundler were an application that handled this feature and only this feature, then I think it would be a much better tool. In doing so it would help deter misuse. And the other features could be left to the domain of another library, or even better, RubyGems proper.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Installs&lt;/b&gt;: The downside of &lt;code&gt;bundle install&lt;/code&gt;, is the lack of refinement it grants the end user. An example is the Rails Gemfile which will installs the sqlite3, postgresql and mysql bindings, regardless of what databases the system actually supports. There may also be other subtle conditions that need to be taken into account on installation. To account for these, the temptation will be to add conditions to the Gemfile itself, blurring the lines between it and a Capfile (as an example). But this will in turn effect the developer&amp;#39;s use of the other features. In the end, the inter-complexities this will cause will simply prove too much.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Groups&lt;/b&gt;: You&amp;#39;ll be happy to know there is nothing intrinsically problematic with groups. Other than the additional complexities they add to the process of designing a Gemfile and the installation thereof, they server their purpose. Sometimes additional complexity is the necessity of capability.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Locking&lt;/b&gt;: Ironically, Bundler&amp;#39;s most useful feature is probably it&amp;#39;s most problematic. First, in order to achieve this level of functionality, Bundler must download a slew of gems to your system in order to calculate the best fitting requirements. But worse than this, locking brings &lt;code&gt;Bundler.require&lt;/code&gt; into play. &lt;code&gt;Bundler.require&lt;/code&gt; admits of the same issues as &lt;code&gt;require &amp;#39;rubygems&amp;#39;&lt;/code&gt;. It can not be used without limiting an program to the RubyGems package manager. If it is to be used congenially, special conditions will need to be put in place by the developer to ensure a program still runs whether RubyGems is being used or not. Bundler might mitigate this issue by gracefully downgrading if RubyGems is not loaded, but then it must also consider where Bundler&amp;#39;s lock file will be located, say if setup.rb is used for installation.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Gemfile&lt;/b&gt;: As mentioned, the Gemfile is great to have as a single configuration file to describe dependencies. However, if a project has a gemspec, it still requires dependencies be stated there as well. RubyGems is not able to utilize the Gemfile. Having to state requirements twice violates the DRY principle.&lt;/p&gt;

&lt;p&gt;In addition, because the Gemfile is Ruby code it can be full of conditional statements, dynamic code, and all sorts of other spaghetti. All of which make the file unusable to anything but a Ruby script. Worse still, the ability to use conditions has the potential for creating a very unwieldy level of complexity. There is no way, for instance, to query the Gemfile for all requirements that may be need because some of them may be hidden by the current state of an environment variable. The clear remedy to this is to switch to a static file format. Such a format could be utilized by many tools, not just Bundler, including RubyGems itself. This would also help resolve some the issues with bundle install as mentioned above.&lt;/p&gt;

&lt;h2&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Taking the &amp;quot;good, the bad and ugly&amp;quot; into account as we have, the end result would indicate the following potenial points of action:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a static file format for the Gemfile.&lt;/li&gt;
&lt;li&gt;Allow groups to be opt-in as well as opt-out.&lt;/li&gt;
&lt;li&gt;Split Bundler into two projects. One strictly for bundling.&lt;/li&gt;
&lt;li&gt;Non-bundling features might be integrated into RubyGems proper.&lt;/li&gt;
&lt;li&gt;At the very least allow RubyGems to utilize the Gemfile for gem building.&lt;/li&gt;
&lt;li&gt;Gracefully downgrade when RubyGems/Bundler is not used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By applying these points, we can tame some of the &amp;quot;crazy train&amp;quot; of complexity. The principles of POLS and KISS are halmarks of a good Rubyist. Let&amp;#39;s not loose that.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : A Second Look at Bundler
author     : trans
categories : [bundler, rubygems]
date       : 2010-05-19
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Gem Crazy</title>
      <link>http://trans.github.com/2010/05/15/gem-crazy/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/05/15/gem-crazy</guid>
      <description>&lt;h1&gt;Gem Crazy&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;I believe the Ruby community may have finally gone off the rails in it&amp;#39;s collective
crazy train.&lt;/b&gt; I have been reading about &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt;,
the spiffy new RubyGems manager to be default part of Rails 3.0, and I can&amp;#39;t help but
wonder what track we were even on.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t know about Bundler yet, you can learn about it
&lt;a href=&quot;http://yehudakatz.com/2009/11/03/using-the-new-gem-bundler-today/&quot;&gt;here&lt;/a&gt;.
I imagine most of you are already aware of it and are now considering how it fits in
with your future development plans. So I want so ask a more fundamental question:
Why does Bundler even exist?&lt;/p&gt;

&lt;p&gt;On the surface, we can of course thank Rails. The deployment of web applications
stands apart from the distribution of Ruby packages. Deploying a Rails
application usually means copying an app&amp;#39;s files up to a server, as opposed to
creating a distributable package file (like a gem) and installing that on
the remote machine. Technically the later could be done, but it isn&amp;#39;t, probably
because most web apps are proprietary and do not need wider distribution. Because
Rails developers do not use the normal RubyGems distribution mechanism, which
automatically installs dependencies, they need another way to ensure their apps
dependencies are present, hence the convenience of &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bundler achieves this goal in a grand fashion. As its name implies
it does so by giving us the means to download the gems an application is dependent
upon and store them directly within the project itself. These gems get stored in
a project&amp;#39;s &lt;code&gt;vendor/gems/&lt;/code&gt; directory. The rationalized benefit being 
that you need never worry about remote services going down (e.g. &lt;code&gt;rubygems.org&lt;/code&gt;)
in order to deploy your application, nor ever worry about any potential changes
in a dependent gem. So in brief, one can &lt;em&gt;bundle&lt;/em&gt; dependent gems with ones
application.&lt;/p&gt;

&lt;p&gt;At first blush it seem like great idea. After all developers use vendoring to 
do something similar while developing an application. But lets consider this
a bit more carefully. The worry of a remote service going down is, honestly, bordering
on paranoia. That&amp;#39;s why mirrors of RubyGems.org exist. If one goes down, the others
remain. The odds of all mirrors going down at the same time are extremely small, and
as you might imagine, such a situation would be corrected very quickly, if it ever did
occur. In fact, if it did happen, there is a fair chance your host will be down too.
So the solution here is not bundling, but redundancy. As for the fear
of &amp;quot;monkey releases&amp;quot; --new versions of a gem that that might break things,
this is somewhat understandable, but redistributing every dependency with each app
is shear overkill. If you are that concerned a gem will break an application you can
always specify exact requirements in the gemspec, and use the &lt;code&gt;gem&lt;/code&gt; method to nail the
version down. That, in fact, is the whole point of the &lt;code&gt;gem&lt;/code&gt; method. And it is a
perfectly good solution for applications such as a Rails app. Unfortunately is not
a very good solution for general purpose libraries. (As can be read about in any number
of blog posts by searching
&lt;a href=&quot;http://www.google.com/search?q=Don%27t+require+%27rubygems%27&quot;&gt;Don&amp;#39;t require &amp;#39;rubygems&amp;#39;&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;[Update: I have been informed that the real benefit of bundling is to make
it easier to install an application on machines that has limited Internet access.
In such cases, I can see that Bundler might be handly.]&lt;/p&gt;

&lt;p&gt;I should mention that the latest version of Bundler (v0.9) has a light-weight rendition
of bundling, called &lt;em&gt;locking&lt;/em&gt;, which doesn&amp;#39;t actually store the gem in the application,
but automatically locks the gems your application uses to specific versions. In other
words, it generates a file which (I assume) will ulitmately be used with the &lt;code&gt;gem&lt;/code&gt; method
to nail down the exact versions of gems your application is using at that time of the lock.
This is a much better approach than bloating your application with .gem files, to achieve
the same end, and to Bundler&amp;#39;s credit it makes it easy to keep those &lt;code&gt;gem&lt;/code&gt; calls current.
However, it still ties your program to RubyGems, so again it&amp;#39;s not a perfect solution
for reusable libraries.&lt;/p&gt;

&lt;p&gt;Another feature Bundler sets out to handle are &lt;em&gt;groups&lt;/em&gt;. They are &amp;quot;gem environments&amp;quot;
which can be loaded as a collective, or even omitted during an install. In other words,
they are a way to specify a specific group of gems to the &lt;code&gt;bundle&lt;/code&gt; command or in ones
code with &lt;code&gt;Bundler.require&lt;/code&gt;. The most common groups you are likely to see are &lt;code&gt;runtime&lt;/code&gt;
or &lt;code&gt;production&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;development&lt;/code&gt;, patterned after Rails own database
environments. While I will not dismiss out-of-hand the potential of deriving some
utility from this feature, on the whole I suspect it is a YAGNI. Moreover,
it exposes the developer to even more potential deployment errors. I can only 
imagine the failures that will arise because a testing environment
had a gem that the runtime environment forgot to add, but actually needed.&lt;/p&gt;

&lt;p&gt;In addition, the use of Bundler promotes the use of &lt;code&gt;Bundler.require&lt;/code&gt;. How many
countless hours have been spent reminding people not to put &lt;code&gt;require &amp;#39;rubygems&amp;#39;&lt;/code&gt;
in their lib code? Now the issue will be doubly compounded. While we can hope
that Bundler never makes it&amp;#39;s way beyond Rails (or at least end-user apps), I have
already seen it in at least two non-Rails programs.&lt;/p&gt;

&lt;p&gt;Lastly, Bundler also provides an ability to depend on git repos, so long as
they track a .gemspec. This feature is a clear address to vendoring, but
via gem dependencies. I won&amp;#39;t even go into all the issues that arise with this
(and seems to somewhat contradict Bundler&amp;#39;s primary purpose --or at least compound its need!).
You can read some of the back and forth on this idea &lt;a href=&quot;http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended/&quot;&gt;here&lt;/a&gt;.
I will say, however, what really strikes me most about this is
how an unproven system takes on such fanfare that it&amp;#39;s proponents now declare we have
all been doing it wrong! A &lt;code&gt;.gemspec&lt;/code&gt; should never be generated by some &amp;quot;extraneous
build tool&amp;quot;, but ought to be edited by hand and checked into the scm repository. Wow.&lt;/p&gt;

&lt;p&gt;I realized the Bundler is addressing certain needs, primarily of the Rails community.
The problem with Bundler is that it is trying to correct something that is fundamentally
problematic from the start. On two fronts... The first being that RubyGems ties
a packaging system to versioning, so using the &lt;code&gt;gem&lt;/code&gt; command will never be a universally
applicable solution to lock down versions. And the second, more significant issue, that RubyGems,
and hence Bundler, cannot avoid &lt;b&gt;version conflicts&lt;/b&gt;. RubyGems blows-up when it
encounters a conflict. Bundler only mitigates this issue by selectin suiable version before
runtime. But niether allow different versions to run simultatneously. This is the real heart
of the matter, and it stems from the fundamental lack of version support in Ruby itself.
In my opinion, until that is addressed, all of these fancy solutions are simply trains headed
up the wrong track.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Gem Crazy
author     : trans
categories : [ruby, rubygems]
date       : 2010-05-15
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Directory Based Configuration</title>
      <link>http://trans.github.com/2010/05/13/directory-based-configuration/</link>
      <pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/05/13/directory-based-configuration</guid>
      <description>&lt;h1&gt;Directory-based Configuration&lt;/h1&gt;

&lt;p&gt;With regards to &lt;a href=&quot;http://proutils.github.com/pom&quot;&gt;POM&lt;/a&gt;, 
the most cumbersome issue I have had to struggle with over the course
of its long and somewhat painful development, is the question of
configuration storage. You see, many years ago I hit upon the idea of
using the file system itself as a &amp;quot;hash&amp;quot; for heirarchical storage.
In other words, instead of using a YAML or JSON or an INI file, POM could
use the file system itself.&lt;/p&gt;

&lt;p&gt;For example, lets say we have a config file &lt;code&gt;pom.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml language-yaml&quot; data-lang=&quot;yaml&quot;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;---&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;POM&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Project Object Model for Ruby&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Trans&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sites&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;homepage&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://proutils.github.com/pom&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://github.com/proutils/pom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the a directory-based configuration system instead
we would have this file hierachy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;pom/
  name
  summary
  authors
  sites/
    homepage
    development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And each file would contain the data in plain text given in the YAML example above.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Does this seam crazy to you?&lt;/i&gt;. I think, to most developers, this design will simply strike them as some form of mild insanity. However, I also think reason is mostly form a lack of familiarity, not the ideas relative merits. We are not accustomed to utilizing the file system in this fashion, so it is not surprising the initial reactions would be negative. But lets consider the benefits.&lt;/p&gt;

&lt;p&gt;To it&amp;#39;s advantage, a directory-based configuration does not need a support library to read, parse or write any data. Indeed, any coder can put together a viable system to handle directory-based configs in just a few lines of code. Becuase of this, any language, including shell scripts, can utilize the information. There is no concern that my language of choice won&amp;#39;t be able to handle it. It also means that the computer can work with the data very easily, without disrupting the human readability of the same data. Whereas, a YAML file for instance, might become an ugly mess after a program rewrites the file in order to update a single entry. Along the same lines, it becomes very easy to scaffold entries. Copy some files and your good. Old files not specifically copied over remain intact. This &amp;quot;low-bar&amp;quot; of utilily gives directory-based configuration a huge advantage.&lt;/p&gt;

&lt;p&gt;But if it is so great, why is it not common place already? Good question. The material cause is that file systems are piss-poor at efficiently storing small files. Even if the file contains a single byte of data most file systems will waste 4K to store it. Becuase of this &lt;i&gt;page size&lt;/i&gt; issue the thought of storing many small files &lt;i&gt;on purpose&lt;/i&gt; has never been taken seriously. This is changing however. It will be a few more years before the lastest systems are mainstream, but the next generation of file systems (which began I beleive with RieserFS 4) mitigate this problem to the point of irrelevance.&lt;/p&gt;

&lt;p&gt;The other major disadvantage it the lack of tools. Because directory-based configuration is not widespread, there are no tools for making it easier to work with data layed out in this fashion. For instance, it is often convenient to edit a group of config options all at once. The best one can with he a directory structure is open a bunch of files simulataneously in a text editor (&lt;code&gt;gedit *&lt;/code&gt;) --not an optimal solution. Another example are conversion tools, say converting the data to JSON for transimition via HTTP. To mitigate this we need to create tools that understand the idea of directory-based configuration and give us comfortable interfaces for working with the data within them.&lt;/p&gt;

&lt;p&gt;So there are the relative merits, both good and bad, of directory-based configuration storage. If anyone has any others to add I would very muich to hear them. Going on this analysis, I think it is clear that the advantages out weigh the disadvantages since all the disadvantages are becoming or can be mitigated.&lt;/p&gt;

&lt;p&gt;However, despite this, I have am seriously considering a move back to a file-based configuration. Why? Becuase directory-based configuration, while arguably better, is simply not common. In 5 to 10 years perhaps it will become more so, but until then it might simply be an design too far ahead of it&amp;#39;s time to gain traction with any mainstrean developers. Clearly it is more important that a tool be found useful to a wide audiance, than it utilize a nifty feature, no matter how nifty it might be.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Directory-based Configuration
author     : trans
date       : 2010-05-13
categories : [pom, metadata, configuration]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A Case For Module Inheritance</title>
      <link>http://trans.github.com/2010/04/13/a-case-for-module-inheritance/</link>
      <pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/04/13/a-case-for-module-inheritance</guid>
      <description>&lt;h1&gt;A Case for Module Inheritance&lt;/h1&gt;

&lt;p&gt;I love beautifully written code. Unfortunately the realities of the
language sometimes clash with requirements of the implementation. While
Ruby goes a long way toward making beautifully written code common place.
It still has some shortcomings I&amp;#39;d like to see improved.&lt;/p&gt;

&lt;p&gt;Case in point are my endeavors of the last few days. I&amp;#39;ve been struggling
to re-structure the code of the &lt;a href=&quot;http://github.com/rubyworks/english/&quot;&gt;English&lt;/a&gt;
project. The primary purpose of the project is to provide extension methods to String,
pertaining to the English language. A good example are number inflection
methods #singular and #plural. At the same time I am trying to design
the library in such a way that other language modules can be built following
the same basic structure, and they could all work together if need be.&lt;/p&gt;

&lt;p&gt;In the course of this endeavor I decided the best approach, keeping the future
squarely in mind, is to create a Language module, upon which English depends,
to house all the common logic of (most) languages. For example, the logic for
storing plural and singular special cases might be a good candidate since nearly
every language has to account for these. So the relationship between English 
and Language is clearly one of &amp;quot;inheritance&amp;quot; --I want to encapsulate logic at
a general level of abstraction, upon which more specific cases can inherit and
augment to fit their particular requirements.&lt;/p&gt;

&lt;p&gt;In Ruby this kind of relationship is generally handled by class inheritance.
But here I run into an issue. &lt;code&gt;English&lt;/code&gt; and &lt;code&gt;Language&lt;/code&gt;
are modules, and they are modules because they are &lt;i&gt;singleton&lt;/i&gt;. Now even
though we can include a module into another, which is akin to class inheritance,
it does not work quite like class inheritance. For one thing, metaclass methods
are not inherited via &lt;code&gt;include&lt;/code&gt;. Of course, I could tip-toe around
this issue by using &lt;code&gt;extend&lt;/code&gt;, since in this case I do not need
includable instance methods. But there is a much more subtle issues that
raises it&amp;#39;s head: the dreaded Double Inclusion Problem. That&amp;#39;s a serious
headache in my case because I want my end users to have the option to load
only the components they want to use as needed, rather than forcing them to
load the entire system up-front.&lt;/p&gt;

&lt;p&gt;So, despite the many
&lt;a href=&quot;http://www.google.com/search?q=singleton+pattern+evil&quot;&gt;calls for the death
of the Singleton Pattern&lt;/a&gt;, it looks like I might require it for my implementation
of English. Using modules simply comes with too many headaches and hackish work arounds.
Now I agree with all the Singleton nay-sayers. It is sort of an anti-pattern to 
create a class that will only ever have one instantiation and no state, but
the trade-off here is worse. If only...&lt;/p&gt;

&lt;p&gt;It seems to me the truly fantastic solution to this would be if one module
could inherit from another just as we do with classes. And honestly, is there
really any reason we shouldn&amp;#39;t be able to do this?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;module Language

  def self.words(string)
    # generic definition
  end

end

module English &amp;lt; Language

  def self.words(string)
    # override
  end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is nice about this, something I know that Matz will appreciate, is that
it preserves single-inheritance, in contrast to the alternative of
turning &lt;code&gt;include&lt;/code&gt; into a multiple-inheritance mechanism. And
for the love of code beauty, it would mean at least a reduction in use of the
all too common: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;def self.included(base)
  base.extend ClassMethods
end

module ClassMethods
  # ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not only is it ugly, it is even worse for those trying to inherit and
extend the behavior. Something more elegant is clearly desirable, and
Module Inheritance, as I have demonstrated here, might be just the ticket.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : A Case for Module Inheritance
author     : trans
categories : [ruby]
date       : 2010-04-13
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Gutopia Revisited</title>
      <link>http://trans.github.com/2010/03/20/gutopia-revisited/</link>
      <pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/03/20/gutopia-revisited</guid>
      <description>&lt;h1&gt;GUtopIa Revisited&lt;/h1&gt;

&lt;p&gt;Recently I had to buckle down and create and honest to goodness desktop GUI application in Ruby. So once again, after some six years, I set down to weigh my options. It saddens me to say, after all these years, the state of desktop GUI programming with Ruby is still a rather sorry affair. Yes, there have been many improvements --thanks to the hard work of many a good programmer, but the task of creating a Ruby-based GUI application still remains a very non-Ruby-esque ordeal.&lt;/p&gt;

&lt;p&gt;My first attempt at it this time was with &lt;a href=&quot;http://shoooes.net/&quot;&gt;Shoes&lt;/a&gt;. Shoes is a new and very nice GUI engine written largely from scratch by the well known WhyTheLuckyStiff. It&amp;#39;s a noble effort and some really &lt;a href=&quot;http://the-shoebox.org/&quot;&gt;neat programs&lt;/a&gt; can come from using Shoes. Unfortunately for my needs Shoes proved to be too buggy and immature --at times I saw visual artifacts and there are a very limited number of controls. And worst of all, the fact that it includes it&amp;#39;s own Ruby interpretor and manges it&amp;#39;s own gems caused it not to work well with some other libraries. For instance, I could not get it to use the latest version of Mechanize.&lt;/p&gt;

&lt;p&gt;After examining other choices, such as creating one GUI script per major platform (too much work), or using the old standby FxRuby (never been happy with the lack of native look-and-feel), I decided to try a different course. I was well versed in web application design, so I tried my hand at rigging a web app to act like a desktop app via a locally running server using Ajax calls. The end result certainly looked good and basically worked. But there was a troubling lack of robustness in the interaction between the front-end and back-end. I had to poll the back-end to see what was going on, and the back-end had to spawn threads in order to provide a response to the browser while continuing to work on long-running processes. So it worked, but barely. I&amp;#39;m sure it could be improved, but for a devote POLSer like myself, that meant getting into mucky waters I really didn&amp;#39;t feel like I should need to be diving into anyway. Too bad. Web GUI design is quite advanced compared to Desktop GUI. Why no one has tried to map it directly to the desktop before is beyond me (but you can believe me when I tell you, I can&amp;#39;t wait to delve into Plam&amp;#39;s pre and it&amp;#39;s &lt;a href=&quot;http://developer.palm.com/webos_book/book1.html&quot;&gt;webOS&lt;/a&gt; development platform, which apparently does exactly this).&lt;/p&gt;

&lt;p&gt;So where did this leave me? Well, I figured I had one last good shot with &lt;a href=&quot;http://wxruby.rubyforge.org/wiki/wiki.pl&quot;&gt;wxRuby&lt;/a&gt;. Ironically I had something to do with the birth of that project. It was those six years ago that I first looked into GUI frameworks for Ruby. Rich Kilmer was talking about his Utopia/Alpha ideas and I was just starting to feel comfortable with writing scripts in Ruby. I decided there needed to be something better, and working off of Rich&amp;#39;s idea&amp;#39;s for an API I came up the idea of GUtopIa, which would supply a font-end API that anyone could interface to a back-end GUI framework. Sort of a best of all worlds kind of design. A number of people were psyched about the idea, and joined with me to discuss and pursue the project. Unfortunately, I was still wet behind the ears, and the fellow programmers who first entertained working with me didn&amp;#39;t care much for my new-boy-brash style. They told me so, and decided on their own course, to create bindings for wxWidgets instead. I wasn&amp;#39;t happy about it personally. Having studied wxWidgets some, I knew it would be a long time before anything really useful was to come of that project --if at all. In hindsight, while I still believe GUtopIa is a good idea, I am glad it&amp;#39;s didn&amp;#39;t proceed back then --I still had a lot to learn about Ruby before I could do something like that as well as I would really like.&lt;/p&gt;

&lt;p&gt;So it was time to check out what the wxRuby team had accomplished. My first handful, or so, attempts were miserable failures. WxRuby has some issues. It is tempermental, and so much like the C API I felt like I was actually programming in C. This is not how Ruby programming is supposed to be! I was having real trouble getting anything more then a basic frame and menu to work. Frustrated with the straight coding approach, I decided to see what WYSIWYG form builders were to be had. I knew wxWidgets touted these, so I looked around and found the precisely named wxFormBuilder. This made it fairly easy to design my complex form and best of all it made it clearer to me how wxWidget GUIs are built. Unfortunately the generated markup, called an XRC file, had issues of it&amp;#39;s own and wouldn&amp;#39;t load properly into Ruby. Once again, I was at a dead end.&lt;/p&gt;

&lt;p&gt;Something really needed to be done about this state of affairs. And so I have decided to resurrect the GUtopIa project. I found my old code, looked at it, scrapped it, and started fresh. I&amp;#39;m going to proceed by specifying the front-end API as much as possible, before even considering back-end implementations. With any luck others will see what I&amp;#39;m doing and offer to build a an interface to their favorite framework. So far what I have looks very sweet. Just to wet your whistle, here&amp;#39;s a potential example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GUtopIa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Phone&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;EMail&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, believe it or not, that&amp;#39;s a fairly complete GUI layout. In an upcoming post I&amp;#39;ll explain how it all works in more detail. But before I get into that, I still need a working desktop GUI application ASAP! I don&amp;#39;t have time to develop GUtopIa for this. So now I&amp;#39;ve tried again at coding wxRuby from hand, but this time using a very Ruby-esque lazy evaluation approach I had experimented with a long time ago in a &lt;a href=&quot;http://www.rubyquiz.com/&quot;&gt;Ruby Quiz&lt;/a&gt; on &lt;a href=&quot;http://www.rubyquiz.com/quiz10.html&quot;&gt;crossword puzzle drawing&lt;/a&gt;. Finally I got the results I wanted with out going cross-eyed looking at the code. Amazing how a well organized approach can make all the difference. I&amp;#39;ll demonstrate my design in my next blog post.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : GUtopIa Revisited
author     : trans
categories : [ruby, gui]
date       : 2010-03-20
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Code Identity</title>
      <link>http://trans.github.com/2010/02/25/code-identity/</link>
      <pubDate>Thu, 25 Feb 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/02/25/code-identity</guid>
      <description>&lt;h1&gt;A Little Fun with Code Generation&lt;/h1&gt;

&lt;p&gt;A couple of years ago, a 
&lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-talk/293058?292931-293646+split-mode-vertical&quot;&gt;Ruby Quiz&lt;/a&gt;
asked us &lt;i&gt;to print &amp;quot;Hello, world!&amp;quot; to standard output using Ruby in atypical fashion.&lt;/i&gt;
Being the resolute over-achiever-to-a-fault that I am, I decided to take the proverbial
pie-in-the-sky highroad to metaland. If, I thought, I could define code &lt;i&gt;identities&lt;/i&gt;,
akin to the mathematical kind, I should be able to have the computer simply
generate an endless stream of equivalent solutions. Indeed, it turned out that it wasn&amp;#39;t
all that hard to code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CodeIdentity&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;identities&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@identities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;identities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;:original&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alternates&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@alternates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;alts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;alts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_code&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_output&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_tests&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/unit&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;original_run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;testcase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alternates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;testcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;test_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sio&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$TOPLEVEL_BINDING&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see from the #generate_tests method I was able to ensure that the results
were indeed equivalent (an interesting strategy in dynamic testing, perhaps
worth further exploration for production code).&lt;/p&gt;

&lt;p&gt;After the &lt;code&gt;CodeIdentity&lt;/code&gt; class all was required was to apply a little
&lt;i&gt;Brain Power&lt;/i&gt; to come up some identities. I came up with a pretty simplistic lot,
just as proof of concept. By following the original email thread, no doubt we can see
their a assuredly an infinite number of possibilities that could be defined.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CodeIdentity&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/puts [&amp;quot;](.*)[&amp;quot;]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;print &amp;quot;\1\n&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/puts [&amp;quot;](.*)[&amp;quot;]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;printf &amp;quot;%s\n&amp;quot; % [&amp;quot;\1&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[&amp;quot;](.*)[&amp;quot;]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;\1&amp;quot;.reverse.reverse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[&amp;#39;](.*)[&amp;#39;]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[&amp;#39;](.*)[&amp;#39;]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.join(&amp;#39;&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish if off I wrote a small command-line interface that allow us to try any
piece of code and generate as many solutions as desired.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$0&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;optparse&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;number of solutions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;puts &amp;#39;Hello World!&amp;#39;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;scg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CodeIdentity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;scg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_tests&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_output&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_code&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without any options it works on the old favorite &lt;code&gt;puts &amp;#39;Hello, World&amp;#39;&lt;/code&gt;
and produces 20 solutions. Here&amp;#39;s the output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Very simplistic, but an interesting and fun diversion. Granted others came up with more intriguing 
individual solutions. But I manged to come up with an infinite set of them! ;) &lt;/p&gt;

&lt;p&gt;(The full code is available in &lt;a href=&quot;http://gist.github.com/313518&quot;&gt;Gist #313518&lt;/a&gt;.)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Code Identity
author     : trans
categories : [ruby, identity]
date       : 2010-02-25
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Mocking Mocks</title>
      <link>http://trans.github.com/2010/02/14/mocking-mocks/</link>
      <pubDate>Sun, 14 Feb 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/02/14/mocking-mocks</guid>
      <description>&lt;h1&gt;Mocking Mocks&lt;/h1&gt;

&lt;p&gt;There are a variety of test-double/mocking libraries available for Ruby.
&lt;a href=&quot;http://mocha.rubyforge.org/&quot;&gt;Mocha&lt;/a&gt; is probably the most well known.
&lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; comes with it&amp;#39;s own mock library. I beleive
&lt;a href=&quot;http://flexmock.rubyforge.org/&quot;&gt;FlexMock&lt;/a&gt; is the venerable older gentleman
on the block. And there are plenty of alternatives such as
&lt;a href=&quot;http://rubyforge.org/projects/double-ruby&quot;&gt;rr&lt;/a&gt; and &lt;a href=&quot;http://github.com/jm/stump&quot;&gt;stump&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I myself have been toying with an implementation, with a goal of maximizing ease
of use and implemetation overhead. In my pursuit I discovered something very
interesting: Ruby doesn&amp;#39;t necessairly need a test-double library.&lt;/p&gt;

&lt;p&gt;Consider the case of a pure &lt;em&gt;stub&lt;/em&gt;. Ruby&amp;#39;s Struct class makes pure stubs 
ridiculously easy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And because Struct.new returns a class, they can be reused, adjusted and 
inherited, like any other Ruby class --pretty sweet.&lt;/p&gt;

&lt;p&gt;How about the case of a &lt;em&gt;partial stubs&lt;/em&gt;. Since Ruby supports singleton methods,
it is a simple matter of latching a new or overriding method onto an object.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;mocking &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I mean, how easy can it get? &lt;/p&gt;

&lt;p&gt;Ok. So stubs are easy, but how about &lt;em&gt;mocks&lt;/em&gt;? Well, let&amp;#39;s first consider what I
call &lt;em&gt;light-weight mocks&lt;/em&gt;. These are like mocks in that the set-up conditions
on message invocations, but unlike regular mocks they are triggered during
invocation rather than awaiting a special trigger method (eg. &lt;code&gt;#verify&lt;/code&gt;). Again,
these are easy in Ruby. (Note: I am using the &lt;a href=&quot;http://proutils.github.com/ae&quot;&gt;AE&lt;/a&gt;
library for my assertions syntax.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^my/&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would argue in most cases light-weight mocks are more than sufficient for most
testing needs. Regular mocks have a tendency to become too enmeshed in implementation,
which creates undo maintenance headaches. Nonetheless, bare with me and we 
we see how to do regular mocks in pure Ruby as well.&lt;/p&gt;

&lt;p&gt;Before we get to regular mocks we first need to consider the test &lt;em&gt;spy&lt;/em&gt;. Check it out.
We will use one simple helper from Ruby Facets, called Functor.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;facets/functor&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are wondering, the functor is nothing more than a BasicObject that redirects
&lt;code&gt;#missing_method&lt;/code&gt; calls to the block you supply it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we are doing here is intercepting the calls to &lt;code&gt;obj&lt;/code&gt; by delegating through &lt;code&gt;spy&lt;/code&gt;.
A record of activity is then being stored in the &lt;code&gt;rec&lt;/code&gt; array. With it we can
verify, for instance, that &lt;code&gt;#to_s&lt;/code&gt; was called.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that it returned what was expected.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or we can even verify how many times it was called. Lets call it two more times
to be sure.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A little verbose, but nothing too terribly strenuous to understand.&lt;/p&gt;

&lt;p&gt;Alright. So now lets turn to full-fledge &lt;em&gt;mocks&lt;/em&gt;. As you might have
suspected, mocks are a trivial derivation of spies. All we need to do
is collect our verifications together on a per-method bases and run
through them subsequent to invocations in question.&lt;/p&gt;

&lt;p&gt;First lets reset our target object and spy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will store out verifications in a Hash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We define our verification procedures.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;recs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my object&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;recs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can execute the code in question.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And verify by iterating over and calling each verification procedure.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;recs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Granted that by the time we get to mocks, the code has gotten a little
more complex and certainly not as pretty as a dedicated mock library.
Nonetheless, what is remarkable here is that it takes so little to get
so much out of Ruby. With a few helper methods wrapping some of the
above code segments we would hardly know we weren&amp;#39;t working with
a full-fledged mocking library.&lt;/p&gt;

&lt;p&gt;Moreover as I argued above, one rarely needs to go this far to get
perfectly good test-doubles. Light-weight mocks will cover most
contingencies just as well as their full-fledged brethren without
the worry of taking your tests too far into the realm of implementation
detail.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Mocking Mocks
author     : trans
date       : 2010-02-14
categories : [tdd, bdd, test, mock]&lt;/p&gt;

&lt;h2&gt;layout     : post&lt;/h2&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Those Damn Version Numbers</title>
      <link>http://trans.github.com/2010/02/08/those-damn-version-numbers/</link>
      <pubDate>Mon, 08 Feb 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/02/08/those-damn-version-numbers</guid>
      <description>&lt;h1&gt;Those Damn Version Numnbers&lt;/h1&gt;

&lt;p&gt;Per the usual for a developer with too many projects on their hands,
I am constantly on the lookout for new tools to make my work easier.
Being the kind of person who likes to &amp;quot;do it themselves&amp;quot;, I often
end-up writing those tools. Recently I endeavored to make my life a bit
easier by automating, at least in part, my project&amp;#39;s version numbers.
I thought, while only a partial help, that if I added a git post-commit
hook that bumped the patch number one, at the very least I could push
out patches without ever having to fuss with adjusting the version
number manually.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.git-scm.com/5_git_hooks.html&quot;&gt;Git hooks&lt;/a&gt;,
by the way, are a cinch to setup. Just edit the
&lt;tt&gt;.git/hooks/xxx&lt;/tt&gt; script and turn on its user-executable
permission. As difficult as &lt;tt&gt;git&lt;/tt&gt; itself can be to use at times,
this was about as easy as it could get --Developer&amp;#39;s Hog Heaven.&lt;/p&gt;

&lt;p&gt;Of course, I overlooked the simple fact that changing my project&amp;#39;s
version file would itself need to be committed b/c it is also tracked
by the version control system, which would in turn invoke the hook,
modifying the version and requiring yet another commit, ad infinitum.
This wasn&amp;#39;t going to work. Crap!&lt;/p&gt;

&lt;p&gt;Yet, that little snafu really got the old brain juices flowing and
my fingers blogging. I want to make versioning my projects as simple as
Git&amp;#39;s hooks are to create. Ultra-low maintenance and in need of barely
any consideration. Is it possible? I then thought about Ubuntu&amp;#39;s
versioning policy. Now there&amp;#39;s a low maintenance system! Just use the
release date. I like it. But... it doesn&amp;#39;t tell you anything about the
release. Is it a major release? A minor release? Merely a bug fix?
Or a security fix? There&amp;#39;s no way to tell. And consequently there is no
way to effect one&amp;#39;s dependencies to use only a limited set versions per a
&amp;quot;&lt;a href=&quot;http://docs.rubygems.org/read/chapter/7&quot;&gt;rational versioning policy&lt;/a&gt;&amp;quot;.&lt;/p&gt;

&lt;p&gt;But wait a minute. What about these newfangled &amp;quot;.a&amp;quot; for alpha,
&amp;quot;.b&amp;quot; for beta, indicators that &lt;a href=&quot;http://docs.rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;
recently introduced? Aren&amp;#39;t they a means communicating some fact about
the release? And yet are they really version numbers? They attempt
to emulate them by being single letters --sure we can enumerate by
letters just as well as numbers, but isn&amp;#39;t that a shoe-horn --squeezing
information into a version &amp;quot;look alike&amp;quot; of sorts? And that being
the case, then hell with it, why not just do the whole version
scheme the same way.&lt;/p&gt;

&lt;p&gt;To that end I propose we consider a new way to version, patterned
after date versions, a la Ubuntu, and augmented with informational
letter tags to tell us what kind of release with which we are dealing.
Let&amp;#39;s consider some possible examples.&lt;/p&gt;

&lt;p&gt;10.01.04      # major release
   10.01.05-m    # minor interface changes from previous release
   10.01.06-p    # patch release / bug fix to previous release
   10.02.11-s    # security fix to previous version
   10.04.06-a    # alpha release of next major version
   10.09.21-b    # beta release of next major version&lt;/p&gt;

&lt;p&gt;That&amp;#39;s a refreshingly simple scheme. All we would have to manually
specify at release time is the type via a single letter, the dating
is easily automated. (Note, I used a dash for no other reason than
it looked good to my eye. A dot could be used, or even nothing at
all. I really don&amp;#39;t care what provides the delimitation myself.)&lt;/p&gt;

&lt;p&gt;Granted, this version scheme doesn&amp;#39;t tell us how many major releases or
minor releases or patch releases have been made since the project&amp;#39;s inception.
But we don&amp;#39;t really need to know that (and if we do we can just program our
package managers to run a summation). What we really need to know is simply
if there is a newer version than our current version, that it is a security fix,
or a minor update, or a major update, and so on, depending on our choice of
significance. Indeed I would even suggest that perhaps we add a some additional
types to help clarify further the type of release.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Damn Version Numbers
author     : trans
date       : 2010-02-08
categories : [versions, scm, development]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Trygve Reenskaugs Dci Architecture</title>
      <link>http://trans.github.com/2010/02/04/trygve-reenskaugs-dci-architecture/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2010/02/04/trygve-reenskaugs-dci-architecture</guid>
      <description>&lt;h1&gt;Trygve Reenskaug&amp;#39;s DCI Architecture&lt;/h1&gt;

&lt;p&gt;In what has to be the best
&lt;a href=&quot;http://architects.dzone.com/videos/dci-architecture-trygve&quot;&gt;software development presentation&lt;/a&gt;
I have seen in years, Trygve Reenskaug, one of the early computer
programming pioneers, takes us for a entertaining exploration of why
programming today is so broken and introduces us to a new &amp;quot;level&amp;quot;
to object oriented design he calls DCI (Data, Collaborations, and Interactions).&lt;/p&gt;

&lt;p&gt;For some time, I have been having ideas and intuitions along much the same lines.
I even toyed with &amp;quot;Orthogonal Ruby&amp;quot; in which methods can be developed outside
of the classes they ultimately belong. So I was delighted to watch this, and see
a master like Reenskaug spell it out so clearly and actually provide working
demonstations in SmallTalk (the forbearer of Ruby&amp;#39;s Object Model). &lt;/p&gt;

&lt;p&gt;If you are at all interested in &lt;i&gt;The Next Big Thing In Programming&lt;/i&gt;,
I highly recommend you check it out. &lt;b&gt;Warning!&lt;/b&gt; It&amp;#39;s lengthy! But obviously
I wouldn&amp;#39;t tell you about it if I didn&amp;#39;t think it was well worth the time.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Trygve Reenskaug&amp;#39;s DCI Architecture
author     : trans
date       : 2010-02-04
categories : [oop, development]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A Failure Of Precedence</title>
      <link>http://trans.github.com/2009/12/13/a-failure-of-precedence/</link>
      <pubDate>Sun, 13 Dec 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/12/13/a-failure-of-precedence</guid>
      <description>&lt;h1&gt;A Failure of Precedence&lt;/h1&gt;

&lt;p&gt;(Ruby&amp;#39;s Operator Precedence Can Be Improved)&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a lot to love about Ruby. Most of us know well the many great advantages it provides, as they say, &amp;quot;making programming fun&amp;quot;. However, Ruby is also notoriously dogged by a few small gotchas and inconsistancies. Some of these are understandable, such as the &lt;a href=&quot;http://eigenclass.org/hiki/The+double+inclusion+problem&quot;&gt;Double Inclusion Problem&lt;/a&gt;; issues that are not worth the extensive effort to fix. On the other hand, some simple issues doggedly persist for little good reason (backward compatibility not withstanding).&lt;/p&gt;

&lt;p&gt;One of these issues is operator precedence. Not only is operator precedence set in stone, it is also
woefully &lt;i&gt;bottom heavy&lt;/i&gt; --there is only one binary operator available for use above the common arthmetic operations.&lt;/p&gt;

&lt;p&gt;Here is the table as given by the &lt;a href=&quot;https://www.cs.auckland.ac.nz/references/ruby/ProgrammingRuby/language.html&quot;&gt;PickAxe&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Method    Operator                Description
Y         [ ] [ ]=                Element reference, element set
Y         **                      Exponentiation
Y         ! ~ + -                 Not, complement, unary plus and minus (method names for the last two are +@ and -@)
Y         * / %                   Multiply, divide, and modulo
Y         + -                     Plus and minus
Y         &amp;gt;&amp;gt; &amp;lt;&amp;lt;                   Right and left shift
Y         &amp;amp;                       Bitwise `and&amp;#39;
Y         ^ |                     Bitwise exclusive `or&amp;#39; and regular `or&amp;#39;
Y         &amp;lt;= &amp;lt; &amp;gt; &amp;gt;=               Comparison operators
Y         &amp;lt;=&amp;gt; == === != =~ !~     Equality and pattern match operators (!= and !~ may not be defined as methods)
          &amp;amp;&amp;amp;                      Logical `and&amp;#39;
          ||                      Logical `or&amp;#39;
          .. ...                  Range (inclusive and exclusive)
            ? :                     Ternary if-then-else
          = %= { /= -= += |= &amp;amp;=   Assignment
          &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= *= &amp;amp;&amp;amp;= ||= **=   
          defined?                Check if symbol defined
          not                     Logical negation
          or and                  Logical composition
          if unless while until   Expression modifiers
          begin/end               Block expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The lack of any operators other then &lt;tt&gt;**&lt;/tt&gt;, above the most commonly used, &lt;tt&gt;* / % + -&lt;/tt&gt;, puts
a frustrating limitation on the flexibility of this system. On this account, the most puzzling misplacement of an operator has to be Bitwise Exlusive Or, &lt;tt&gt;^&lt;/tt&gt;. In many, if not most, programming languages &lt;tt&gt;^&lt;/tt&gt; is the power operator. But in Ruby that function is delegated to &lt;tt&gt;**&lt;/tt&gt;. While I personally do not favor &lt;tt&gt;**&lt;/tt&gt; for the use, it&amp;#39;s not something I mind either. However, that &lt;tt&gt;^&lt;/tt&gt; doesn&amp;#39;t share the same precedence is very awkward.&lt;/p&gt;

&lt;p&gt;Consider for instance, the implementation of a unit system.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4 square meters&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the power operator effects the unit and the value. So how would we go about notating &lt;code&gt;2 square meters&lt;/code&gt;? We need some other means. The obvious answer is to redefine &lt;tt&gt;^&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2 square meters&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great. But wait, there is an ugliness now upon us.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2 meters&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The answer should have been &lt;tt&gt;1 square meter&lt;/tt&gt;, but due to precedence &lt;tt&gt;2 / 2&lt;/tt&gt; is barring a &lt;tt&gt;1&lt;/tt&gt; before the &lt;tt&gt;^&lt;/tt&gt; power operator kicks-in.&lt;/p&gt;

&lt;p&gt;It is truly wonderful that Ruby&amp;#39;s first 27 operators are actually methods, which means they can be defined to perform whatever function we would like of them. But despite being able to define these operators, there is no means of changing their precedence. Thus, the actual options we have defining new operations to suite our needs are hindered.&lt;/p&gt;

&lt;p&gt;Ideally we would be able to alter precedence on a per-class basis. While, some might argue that would create too much confusion, I would retort that good libraries would use the feature effectively, limiting the changes to the appropriate use-cases, so that it would not be an issue. After all, a library that scrambles precedence for no damn good reason will get little use.&lt;/p&gt;

&lt;p&gt;While we wait the day of true precedence freedom, I would like to see Ruby move &lt;tt&gt;^&lt;/tt&gt; up with &lt;tt&gt;**&lt;/tt&gt; and find a new Exclusive Or operator. Backward compatibility can be largely, although not completely, preserved by aliasing &lt;tt&gt;^&lt;/tt&gt; to the new symbol. It&amp;#39;s an obvious and simple improvement --a naggling issue that has been around for quite some time.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : A Failure of Precedence
author     : trans
categories : [website]
date       : 2009-12-13
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Quiet Revolt Against The Fhs</title>
      <link>http://trans.github.com/2009/10/26/quiet-revolt-against-the-fhs/</link>
      <pubDate>Mon, 26 Oct 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/10/26/quiet-revolt-against-the-fhs</guid>
      <description>&lt;h1&gt;Quiet Revolt Against the FHS?&lt;/h1&gt;

&lt;p&gt;Prompted by the disocvery of improper use of relative require in a number or Ruby project&amp;#39;s executables, my last &lt;a href=&quot;http://protuils.github.com/2009/10/proper-require.html&quot;&gt;post&lt;/a&gt; dicussed &lt;i&gt;why&lt;/i&gt; and &lt;i&gt;when&lt;/i&gt; to avoid using relative require. To summarize, there are two broad reasons to avoid relative loading. The first is simply YAGNI. In most cases you simply don&amp;#39;t need to do it. Your script is on the $LOAD_PATH and all that is needed is the normal &lt;code&gt;require &amp;#39;mylib/mydir/myfile&amp;#39;&lt;/code&gt; to load it. The second, and up until today I felt the more important concern, is conformance to the &lt;a href=&quot;http://www.pathname.com/fhs/&quot;&gt;File Hierarchy Standard&lt;/a&gt;. While there is plenty of room to use relative requires and not tread on the FHS, it is easy enough to run afoul if one is not careful and aware of the issues. Such was the case with the executables.&lt;/p&gt;

&lt;p&gt;Now I have discovered that another popular Ruby program is &amp;quot;broken&amp;quot; with regards to the FHS -- RDoc. In more recent versions, RDoc designed it&amp;#39;s auto-loading of 3rd party templates to use &lt;code&gt;lib/rdoc/discover.rb&lt;/code&gt;. In other words, if you want to create a template &amp;quot;plug-in&amp;quot; for RDoc you need to have a &lt;code&gt;lib/rdoc/discover.rb&lt;/code&gt; file in your project in which you require the file(s) that contain your actual plug-in code. There is one serious problem with this. If more than one such 3rd-party template project is installed via an old-fashioned site_ruby install (eg. using setup.rb), then the last installed project&amp;#39;s &lt;code&gt;discover.rb&lt;/code&gt; file will clobber the prior&amp;#39;s.&lt;/p&gt;

&lt;p&gt;As a gem user you might not think it a big deal, but I can tell you that Linux distro maintainers do care. Any Ruby library they decide is worthy of a distro package, in particular a &lt;code&gt;.deb&lt;/code&gt; package, they must ensure it conforms to the FHS. &lt;a href=&quot;http://facets.rubyforge.org&quot;&gt;Ruby Facets&lt;/a&gt;, for instance, is slightly difficult in site install because it has two separate load paths. I received more that one nasty email about that when I no longer shipped a &lt;code&gt;setup.rb&lt;/code&gt; script with the package. I have since updated the stand-alone version of &lt;a href=&quot;http://proutils.github.com/setup&quot;&gt;Ruby Setup&lt;/a&gt; to handle such an install properly so long a &lt;code&gt;meta/loadpath&lt;/code&gt; file is provided.&lt;/p&gt;

&lt;p&gt;But now I have to wonder. If RDoc has a site install flaw in it&amp;#39;s latest design, and the aforementioned use of relative loading in bin scripts in other projects is likewise flawed, not to mention the numerous other violations that are surely out there... Is there a quiet revolution against the FHS going-on? Perhaps a revolution by default, because people don&amp;#39;t know any better or forget to take it into account?&lt;/p&gt;

&lt;p&gt;Honestly, I have to say I hope so. In years past I had attempted to rail against the FHS. I even used &lt;a href=&quot;http://gobolinux.org/&quot;&gt;GoboLinux&lt;/a&gt; as my main platform for a while. But as much as I would spout about the need to move beyond the FHS, along with &lt;a href=&quot;http://gobolinux.org/index.php?lang=en_US&amp;amp;page=doc/articles/clueless&quot;&gt;other voices&lt;/a&gt;, there never seemed to be any progress. We were stuck. And so I had given up and settled myself with the FHS way of doing things. (No doubt, this accounts in part for why I am so acutely aware Ruby code  that breaks under the standard.) But I have never been happy with it. I could only hope that one day, somehow, it would change. And maybe it has...&lt;/p&gt;

&lt;p&gt;Are those of you using RubyGems, and using relative requires, ready to stand with your code, in defiance of the FHS, indifferent to site_ruby installation? Can we finally all say &amp;quot;f@#k setup.rb&amp;quot;? Can I discontinue my maintenance of the setup.rb code base? Can I now feel free to use relative require and RDoc-like &lt;code&gt;discover.rb&lt;/code&gt;&amp;#39;s to my joyous hearts abandon?&lt;/p&gt;

&lt;p&gt;I wonder, is this kind of thing occurring in other language domains too, such as Perl, Python and Rebol? It would appear so. I recently learned, as one might expect, that the guys over at GoboLinux are on the forefront of this. Check out the article, &lt;a href=&quot;http://mwh.geek.nz/2009/07/23/an-overview-of-systemaliens/&quot;&gt;An overview of /System/Aliens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is the revolt under way?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Quiet Revolt Against the FHS?
author     : trans
categories : [ruby, require]
date       : 2009-10-26
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A Proper Require</title>
      <link>http://trans.github.com/2009/10/23/a-proper-require/</link>
      <pubDate>Fri, 23 Oct 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/10/23/a-proper-require</guid>
      <description>&lt;h1&gt;A Proper Require&lt;/h1&gt;

&lt;p&gt;Recently I &lt;a href=&quot;http://groups.google.com/group/ruby-talk-google/browse_thread/thread/6a46c837ffc84761&quot;&gt;posted&lt;/a&gt;
a light diatribe against improper use of relative requires in Ruby programs.
I pointed-out a bit of code, I recently came across, that added a relative path to Ruby&amp;#39;s
&lt;code&gt;$LOAD_PATH&lt;/code&gt; from within a &lt;code&gt;bin/&lt;/code&gt; executable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + &amp;quot;/../lib&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I suspect the author little realized that his program would not function if it were installed
according to traditional &lt;a href=&quot;http://www.pathname.com/fhs/&quot;&gt;FHS&lt;/a&gt;-based standards. And I fear many
young Rubyists, having known nothing but the use of RubyGems and/or deployment (as opposed to release)
of Rails apps, do not understand the nature of the issue. In my post I stated some general rules.&lt;/p&gt;

&lt;h2&gt;The Rules of Relative Loading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;#39;t mess with the &lt;code&gt;$LOAD_PATH&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use relative lookup only when you must, eg. using bundled HTML templates.&lt;/li&gt;
&lt;li&gt;Any relative paths you do use must remain within the confines of their main directory (eg. lib/)&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t use a relative lookup for any .rb or .so/.dll loading.&lt;/li&gt;
&lt;li&gt;It should never be necessary to require &amp;#39;rubygems&amp;#39;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.grayproductions.net/&quot;&gt;James Edward Gray II&lt;/a&gt; pointed out that
I had not been clear in stating the exceptions to these rules, so I add the
following.&lt;/p&gt;

&lt;h2&gt;When the Rules Do &lt;em&gt;Not&lt;/em&gt; Apply&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;They do not apply to Rails Apps since they are deployed, rather than packaged and installed.&lt;/li&gt;
&lt;li&gt;Testing and building scripts are free from the rules since they are localized operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even when the rules do not apply, try to adhear to them as much as possible. For exmaple, minimize
the points of entry. At the very least it can benefit refactoring.&lt;/p&gt;

&lt;h2&gt;Understanding the Rules&lt;/h2&gt;

&lt;p&gt;Most of the responses to my post expressed understanding of the last rule, as there have been a few
write-ups on that subject before. But many could not understand the reasons behind the other points.
And it&amp;#39;s no wonder. I did some research and discovered there to be a fair bit of misinformation
circulating promoting the use of relative loading as a &amp;quot;proper&amp;quot; solution, and very little information
explaining what is actually best practice.&lt;/p&gt;

&lt;p&gt;It was the last reply to my post that made me realize I should take a moment to write this 
blog entry to more fully explain.&lt;/p&gt;

&lt;blockquote&gt;
&quot;As someone who wrote a dependency-resolving code loading gem, I am extremely
dubious that one can always avoid code loading using relative paths.
How would you ordinarily go about loading some .rb files in a subdirectory
beneath the directory in which the current file is located?&quot;
&lt;/blockquote&gt;

&lt;p&gt;Clearly we have a quite capable programmer here, having written &amp;quot;a dependency-resolving code loading gem&amp;quot;,
but the fact the he states that he wrote a &amp;quot;gem&amp;quot; rather then a &amp;quot;library&amp;quot; struck me as an indication
that some crucial old school knowledge is missing from his repertoire that inevitably lead him to
his second sentence.&lt;/p&gt;

&lt;p&gt;The key, I believe, to alleviating this misunderstanding is Minero Aoki&amp;#39;s &lt;a href=&quot;http://i.loveruby.net/en/projects/setup/&quot;&gt;Setup.rb&lt;/a&gt;.
Before we had RubyGems, Aoki&amp;#39;s &lt;code&gt;setup.rb&lt;/code&gt; script was &lt;em&gt;the&lt;/em&gt; way to install Ruby software, and his
work helped lay the foundation for the way in which Ruby projects are structured to this very day. The
first two sections of the Setup.rb &lt;a href=&quot;http://i.loveruby.net/en/projects/setup/doc/&quot;&gt;documentation&lt;/a&gt;
should be required reading for all Rubyists.&lt;/p&gt;

&lt;p&gt;Once we understand how Setup.rb works --where it puts a project&amp;#39;s files upon installation, we can
then understand when we can and when we cannot get away with using relative requires. However, even
when we can do so, it does not mean we should. The idea of Setup.rb is to install your files
into the system locations where the &lt;code&gt;$LOAD_PATH&lt;/code&gt; is already set to look. In other words,
you should not effect the &lt;code&gt;$LOAD_PATH&lt;/code&gt; in your code, but make sure your code is where
the &lt;code&gt;$LOAD_PATH&lt;/code&gt; expects it to be. The &lt;code&gt;$LOAD_PATH&lt;/code&gt; is something managed externally,
by a system administrator, or a specially designed program for just such a purpose (like RubyGems).
By placing our code in the correct system locations, we will only ever need standard 
&lt;code&gt;require &amp;#39;mylib/mysubdir/myfile&amp;#39;&lt;/code&gt; type load calls.&lt;/p&gt;

&lt;h2&gt;How to Follow the Rules&lt;/h2&gt;

&lt;p&gt;So how do we make sure our code is where it needs to be? In the old days we just used &lt;code&gt;setup.rb&lt;/code&gt;.
By following it&amp;#39;s conventions and installing our software with it, all was well. But today most Rubyists
use RubyGems. That works just as well, but there are two configuration issues that attend it&amp;#39;s use.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our project&amp;#39;s gemspec must have the proper &lt;code&gt;require_paths&lt;/code&gt; setting. The default is the setup.rb standard &lt;code&gt;lib/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Our RUBYOPT environment setting must contain &amp;quot;-rubygems&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I mentioned in the above bullet points, it is okay to add to the &lt;code&gt;$LOAD_PATH&lt;/code&gt; when running tests --that&amp;#39;s essential to avoid having to reinstall your project after every code change. But it&amp;#39;s not acceptable to do so in your actual program.&lt;/p&gt;

&lt;p&gt;I believe Minero Aoki has completed his work on Setup.rb, as there has not been any activity on his project
in some time. A while ago, I &lt;a href=&quot;http://github.com/proutils/setup&quot;&gt;forked Setup.rb&lt;/a&gt; in order to make it a stand-alone package that can be installed via RubyGems. Since then I have continued it&amp;#39;s development, working on few aspects of the system such as using optparse.rb for command-line parsing, removing the (unused) multi-package feature, adding doc/ installation and most recenty I started to rewrite the install code to be atomic (would love some assistance on that, btw!).&lt;/p&gt;

&lt;p&gt;With the advent of RubyGems, &lt;code&gt;setup.rb&lt;/code&gt; is not as widely needed as it once was (though it still gets used in some cases). Yet the ground work it laid is still with us, and should be understood if one wishes to be an effective Ruby programmer.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : A Proper Require
author     : trans
categories : [ruby, require]
date       : 2009-10-23
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Form Of Project Metadata</title>
      <link>http://trans.github.com/2009/07/04/The-Form-of-Project-Metadata/</link>
      <pubDate>Sat, 04 Jul 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/07/04/The-Form-of-Project-Metadata</guid>
      <description>&lt;h1&gt;The Form of Project Metadata&lt;/h1&gt;

&lt;h2&gt;Ruby Script&lt;/h2&gt;

&lt;p&gt;Ruby-scripts as configuration is popular among gung-ho Ruby-enthusiests. And there is certainly
some merit to it&amp;#39;s use, but along with the powerful advantages are serious disadvantages as well.&lt;/p&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Computable settings is very flexiable.&lt;/li&gt;
&lt;li&gt;Support full type support --Array, String, Integer, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using Ruby code as configuration limits their use to Ruby programs.&lt;/li&gt;
&lt;li&gt;Providing the full power of a scriptling language presents a higher security risk.&lt;/li&gt;
&lt;li&gt;Automated modification of configuration scripts is difficult.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby scripts are not an uncommon configuration format, especailly in the area of
project tools --.gemspec files for instance are Ruby scripts. Their greatest advantage
is in their flexability --properties can be set computationally. However, the issues
of interoperability, security and editing automation make them a very limited
option.&lt;/p&gt;

&lt;h2&gt;YAML&lt;/h2&gt;

&lt;p&gt;In the world Ruby programming YAML is certainly the most common choice
of configuration storage. Since YAML is a human-readable serialization format,
this stand to reason.&lt;/p&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Popular format amoung Rubyists; and becoming more popular with other languages.&lt;/li&gt;
&lt;li&gt;Supports serialization types (string, array, hash, integer, time, etc).&lt;/li&gt;
&lt;li&gt;Easy to en masse edit, as all settings can be in a single file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Requires dependency on a hefty parser library.&lt;/li&gt;
&lt;li&gt;Difficult to automate selective modification. (Whole file needs to rewritten.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YAML has the advantage of en masse editing, which will certainly seems more comfortable
to the average Ruby coder. However, this advantage is limited primarily to first-time
editing of configuration data since, in our usecase, most properties will not
change once set.&lt;/p&gt;

&lt;p&gt;YAML also has the advantage of supporting of basic types like String, Array, Hash,
and, in the Syck implementation, Time and Integer as well. These types provide some
extra information that can be used in determining the value of a property. However,
this also opens us up to greater potenial of data-type errors.&lt;/p&gt;

&lt;h2&gt;INI&lt;/h2&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;INI files are very human readible and easy to edit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Requires parser library (but much smaller than YAML&amp;#39;s).&lt;/li&gt;
&lt;li&gt;Entries are generally limited to a single line entry.&lt;/li&gt;
&lt;li&gt;No data types --all data are strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INI files are even easier to read and write than YAML files. However they lack
serialization types. So all properties are strings and it&amp;#39;s up to the application
to determine the type of data.  Also, on the whole, entries are limited
to a single line. This means list entries usually need to be separated by
a delimiter (&lt;code&gt;, : ;&lt;/code&gt;), and long description entries need special consideration.&lt;/p&gt;

&lt;p&gt;While INI files are conceptually simpler than YAML files, and in so being are
a more attractive solution (IMO), the difference between YAML and INI
does not seem great enough to warrant their use over the convention of
Rubyists to use YAML instead.&lt;/p&gt;

&lt;h2&gt;Per-Property Files&lt;/h2&gt;

&lt;p&gt;The use of one file per property has some significant advantages, but likewise
has a few issues that keep it from being a perfect solution.&lt;/p&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No special parser library is required.&lt;/li&gt;
&lt;li&gt;Individual file can be selectively loaded.&lt;/li&gt;
&lt;li&gt;Very easy to automate selective update.&lt;/li&gt;
&lt;li&gt;Usable by any language or tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Disadvantages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cumbursome to edit properties en masse.&lt;/li&gt;
&lt;li&gt;No data types --all data are strings (unless we use file extensions).&lt;/li&gt;
&lt;li&gt;Wastes file system space (ie. block size).&lt;/li&gt;
&lt;li&gt;Not as easily scrapable by search engines.&lt;/li&gt;
&lt;li&gt;Highly unconventional appraoch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While some may take serious issue with the waste of file system space, this is increasingly
a negligable downside. Some modern file systems handle small files quite gacefully, and
the number of potential properties limits the waste in anycase.&lt;/p&gt;

&lt;p&gt;While not being able to easily edit en masse might seem like a show-stopper, for this
usecase it is usually only needed for the initial editing. After that, editing metadata
tends to be very selective.&lt;/p&gt;

&lt;p&gt;While per-propery files do not support data types per-se, if neccessary file extensions on
header comment lines (shebang lines) could be used to convey type.&lt;/p&gt;

&lt;p&gt;Probably the biggest downside to the per-propery file approach though is the lack of convention
for doing so. It no doubt will strike most developers as a &amp;quot;bad thing&amp;quot;, at least at first.&lt;/p&gt;

&lt;h2&gt;Analysis&lt;/h2&gt;

&lt;p&gt;In considering the possible configuration formats, it becomes clear there are trade-offs.
No solution is perfect, but no solution is without it&amp;#39;s merits either.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Wxruby For The Lazy</title>
      <link>http://trans.github.com/2009/06/07/wxruby-for-the-lazy/</link>
      <pubDate>Sun, 07 Jun 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/06/07/wxruby-for-the-lazy</guid>
      <description>&lt;h1&gt;WxRuby for the Lazy&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://wxruby.rubyforge.org/wiki/wiki.pl&quot;&gt;WxRuby&lt;/a&gt; is probably the best overall GUI library for Ruby currently available. It is cross-platform, provides native look-and-feel and is stable enough for production use. All other GUI libraries, despite their various merits, fall short in at least one of the areas. However, WxRuby does have one major downfall. It is pretty much a straight port of the C API. Writing WxRuby code is largely the same as writing actual WxWidgets C code. It&amp;#39;s far from the &amp;quot;Ruby Way&amp;quot;.&lt;/p&gt;

&lt;p&gt;So how did I mange to get fairly nice Ruby code despite a binding that is essentially a straight port of the underlying C API? I built it from the bottom-up using a lazy coding technique. And I mean &amp;quot;bottom-up&amp;quot; literally --the following code might actually be easier to read if you start from the bottom and work your way up to the top. The trick is to break down one&amp;#39;s interface into individual widgets and create an instance method for each using the &lt;code&gt;||=&lt;/code&gt; memoization trick. &lt;/p&gt;

&lt;p&gt;You can see from the following code I was able to apply this &amp;quot;trick&amp;quot; to everything but toolbar buttons (aka &amp;#39;tools&amp;#39;). This is because the toolbar itself is needed to create them. So I simply defined attributes for each tool, but actually created the tool buttons in the toolbar&amp;#39;s method. &lt;a href=&quot;https://gist.github.com/trans/182301&quot;&gt;Have a look&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/trans/182301.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The thing to notice, if you haven&amp;#39;t caught it yet, is how calling &lt;code&gt;#search&lt;em&gt;toolbar&lt;/code&gt; leads to calling &lt;code&gt;#search&lt;/em&gt;sizer&lt;/code&gt; which in turn leads to calling &lt;code&gt;#search&lt;em&gt;panel&lt;/code&gt;, and so forth all the way to the top &lt;code&gt;#frame&lt;/em&gt;panel&lt;/code&gt;. This code is a striped down version of actual code I am using. I hope it helps others create wxRuby application more easily. As I said in my previous post, I found in mind-numbingly difficult to create WxRuby interfaces until I worked out this approach. WxRuby is still a difficult API to master, but this technique makes the effort more manageable, and therefore more likely to succeed. &lt;/p&gt;

&lt;p&gt;For another example of building structures lazily, have a look at &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/122593&quot;&gt;my solution&lt;/a&gt; for &lt;a href=&quot;http://rubyquiz.com/quiz10.html&quot;&gt;Ruby Quiz 10 - Crosswords&lt;/a&gt;.&lt;/p&gt;

&lt;!--
  title  : WxRuby for the Lazy
  author : trans
  tags   : [ruby, gui]
  date   : 2009-06-07
  layout : post
--&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Xml Meet Css</title>
      <link>http://trans.github.com/2009/02/10/xml-meet-css/</link>
      <pubDate>Tue, 10 Feb 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/02/10/xml-meet-css</guid>
      <description>&lt;h1&gt;XML+CSS, the Future of Web Design?&lt;/h1&gt;

&lt;p&gt;In a &lt;a href=&quot;http://tigerops.org/2009/01/mf-vs-xml.html&quot;&gt;previous post&lt;/a&gt;, I point out that microformats bring an additional layer of useful information to a document, which I dubbed &lt;em&gt;semantic structure&lt;/em&gt;. In short, HTML tags provide useful &lt;em&gt;type&lt;/em&gt; information about the data they contain. A good example of this has been the insistent push to use &lt;code&gt;div&lt;/code&gt;s rather than &lt;code&gt;table&lt;/code&gt;s for page layout. The reason is that tables describe a semantic structure, a table of data, and not layout. I for one have found this a frustrating haggle in the design of my pages. Time and time again I have been stymied by unwieldy &lt;code&gt;div&lt;/code&gt;s. Tables are much easier to use, despite additional verbosity. But I have stuck to &lt;code&gt;div&lt;/code&gt;s because it is &amp;quot;the right thing to do&amp;quot;. Thankfully my saving grace will soon be here. The 3rd revision the CSS standard supports a new &lt;code&gt;display&lt;/code&gt; style. With it, one can specify that a div is to behave like a table, table row or table cell. Woohoo! Three cheers for tabley divs!!&lt;/p&gt;

&lt;p&gt;This display style led me to think about semantic structure again. If we can designate that a &lt;code&gt;div&lt;/code&gt; is a &lt;code&gt;table&lt;/code&gt; structure via CSS, then why not any structure? And if &lt;code&gt;div&lt;/code&gt;s, why not any tag? If we were able to do that, then semantic structure could be specified solely through CSS. And our HTML pages could go from rather simple, repetitive occurrences of &lt;code&gt;div&lt;/code&gt; to ... can you guess?... pure XML.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s got through it step by step. Here some HTML [gist id=61726]:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ages&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;24&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Dean&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now with CSS 3 [gist id=61729]:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ages&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;24&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Dean&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      .ages { display: table; }
    .person { display: table-row; }
      .name { display: table-cell; }
       .age { display: table-cell; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course no one would recommend doing this to something that really is a table of data. But bare with me, because now we are coming full circle [gist id=61730]:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ages&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;person&amp;gt;&amp;lt;name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&amp;lt;age&amp;gt;&lt;/span&gt;24&lt;span class=&quot;nt&quot;&gt;&amp;lt;/age&amp;gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;person&amp;gt;&amp;lt;name&amp;gt;&lt;/span&gt;Dean&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&amp;lt;age&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/age&amp;gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ages&amp;gt;&lt;/span&gt;

      ages { display: table; }
    person { display: table-row; }
      name { display: table-cell; }
       age { display: table-cell; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think this is a rather remarkable outcome. And you might be surprised to learn that Firefox handles it just fine. What we have achieved is an ultra-clean separation between the data and it&amp;#39;s semantic meaning, via XML, and it&amp;#39;s semantic structure, via CSS. If this approach were embraced by the XHTML and CSS standards bodies, I would not be surprised to see it revolutionize web design.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : XML. meet CSS
author     : trans
categories : [ruby]
date       : 2009-02-10
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>What's Uf Got On Xml</title>
      <link>http://trans.github.com/2009/01/24/what%27s-uf-got-on-xml/</link>
      <pubDate>Sat, 24 Jan 2009 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2009/01/24/what's-uf-got-on-xml</guid>
      <description>&lt;h1&gt;What&amp;#39;s &amp;micro;F got on XML?&lt;/h1&gt;

&lt;p&gt;Decisions, decisions. Therein lies the reason why convention over configuration is so bloody great, precisely because it requires fewer decisions. &lt;a href=&quot;http://detroit.github.com/detroit&quot;&gt;Detroit&lt;/a&gt;, my awesome build tool, outputs log files. Yea, logs are good. But the decision I have to make is, &amp;quot;in what format?&amp;quot;&lt;/p&gt;

&lt;p&gt;Now old-school would just put out some asterisk-studded text files with plenty of precise timestamps, maybe some nice long lines of dashes to divide things up. No doubt these files are easy to access and fairly readable. We like out text files. But hey wait. This is the age of magical markups. At the very least we can coax that log into a Wiki-tongue. For us Rubyists, we have rdoc, markdown and textile&amp;#39;s just a few gemy fingertips away. These formats can be even easier to read thanks to structural consistency from log to log. Plus, fire-up a web server and we can get some really nice looking HTML too. That&amp;#39;s the beauty of Wiki Wiki markup after all.&lt;/p&gt;

&lt;p&gt;Now if beauty were all that matter, then there would be no point in looking further. But like America&amp;#39;s continental shelves there is untapped wealth going to waste here. There is data in them there logs! The modern buzzword is &lt;em&gt;semantic&lt;/em&gt;. Taking logs to the next level requires us to ensure their semantic value. On that account, XML was created, and long predicted the format of the future. Certainly XML has made great strides, but it is still far from meeting its promise. There is simply too much complexity involved in both marking up the content and in generating nice output.&lt;/p&gt;

&lt;p&gt;Then comes along the &lt;em&gt;microformat&lt;/em&gt;. The microformat combines the semantic capabilities of XML with the layout capabilities of HTML. Microformats are relatively new and still finding their footing. Indeed, I think a &lt;em&gt;Universal Uniform Microformat Specification&lt;/em&gt; is ultimately the necessary outcome. In that vain I make a first rough estimate of what such unifying system might look like, and why, contrary to many arguments otherwise, microformats do in fact bring more to the table than XML.&lt;/p&gt;

&lt;p&gt;Where XML provides semantic information within a doubly linked hierarchy (via attributes and body), microformats provide the same plus a set of well defined data structures. Microformats provide semantics through a small set of tag attributes, &lt;em&gt;role&lt;/em&gt;, &lt;em&gt;rel&lt;/em&gt;, &lt;em&gt;rev&lt;/em&gt; and primarily the &lt;em&gt;class&lt;/em&gt; attribute. The &lt;em&gt;class&lt;/em&gt; attribute alone is enough to make microformats fully equatable to XML. We can easily map the same data set in either format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;people&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;John Jay&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/people&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As opposed to...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;people&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;John Jay&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the microformat is more verbose, the two contian the same original semantic value. But the extra verbosity isn&amp;#39;t just a waste of UTF bytecodes, it says something. Specifically it gives us a &lt;em&gt;semantic structure&lt;/em&gt;. It just so happens that HTML evolved to offer these structures precisely because that is what data presenters require to do their jobs well. And for the same reason, why you are always being beat with the &lt;code&gt;div&lt;/code&gt;-stick when you try to take the load road of laying out your pages with tables.&lt;/p&gt;

&lt;p&gt;So what semantic structures do micorformats via HTML make available to us? The quick rundown: we have layouts using &lt;em&gt;div&lt;/em&gt; and &lt;em&gt;span&lt;/em&gt;, lists using &lt;em&gt;ol&lt;/em&gt;, &lt;em&gt;ul&lt;/em&gt; and &lt;em&gt;li&lt;/em&gt;; definition lists using &lt;em&gt;dl&lt;/em&gt;, &lt;em&gt;dd&lt;/em&gt; and &lt;em&gt;dt&lt;/em&gt;; and tables using &lt;em&gt;table&lt;/em&gt;, &lt;em&gt;tr&lt;/em&gt;, &lt;em&gt;th&lt;/em&gt; and &lt;em&gt;td&lt;/em&gt;. Those are the obvious structures. There are still other smaller structure&amp;#39;s like &lt;em&gt;a&lt;/em&gt; for links, and the hefty set of &lt;em&gt;form&lt;/em&gt; elements. All these elements provide us a way to say what type of thing our data is or partakes in, not just what the data is.&lt;/p&gt;

&lt;p&gt;Clearly, the creators of XML saw the need for something like this and tried to achieve it through XML Namespaces. But namespaces are less effective because they are completely arbitrary, whereas HTML gives us a limited but universal structural language. Seems to me there is a principle to be found here that can be a guide for both the future of HTML and Microformats.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : What&amp;#39;s &amp;micro;F got on XML?
author     : trans
categories : [website]
date       : 2009-01-24
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Yadsl Rule</title>
      <link>http://trans.github.com/2008/11/04/the-yadsl-rule/</link>
      <pubDate>Tue, 04 Nov 2008 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2008/11/04/the-yadsl-rule</guid>
      <description>&lt;h1&gt;The YADSL Rule&lt;/h1&gt;

&lt;p&gt;Looks like the Ruby world is a fire with new DSLs for BDD/TDD. There&amp;#39;s 
&lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt;,
&lt;a href=&quot;http://blog.zenspider.com/minitest/&quot;&gt;minitest&lt;/a&gt;,
&lt;a href=&quot;http://test-unit.rubyforge.org/test-unit/&quot;&gt;Test::Unit 2.x&lt;/a&gt;,
&lt;a href=&quot;http://test-spec.rubyforge.org/test-spec/&quot;&gt;test-spec&lt;/a&gt;,
&lt;a href=&quot;http://www.oreillynet.com/ruby/blog/2008/02/assert2.html&quot;&gt;Assert 2.0&lt;/a&gt;,
&lt;a href=&quot;http://expectations.rubyforge.org/&quot;&gt;Expectations&lt;/a&gt;,
&lt;a href=&quot;http://github.com/aslakhellesoy/cucumber/tree/master&quot;&gt;Cucumber&lt;/a&gt;,
&lt;a href=&quot;http://github.com/carlosbrando/remarkable/tree/master&quot;&gt;Remarkable&lt;/a&gt;,
&lt;a href=&quot;http://www.thoughtbot.com/projects/shoulda/&quot;&gt;Shoulda&lt;/a&gt;
... woulda, coulda ... My word! So many choices. It&amp;#39;s fitting that
it&amp;#39;s Thanksgiving, what we have here is a &lt;i&gt;cornucopia of framework&lt;/i&gt;!!!&lt;/p&gt;

&lt;p&gt;Uh... Okay, you&amp;#39;ll have to forgive me. I get carried away.&lt;/p&gt;

&lt;p&gt;I suppose it all started with that RSpec. Those guys built an incredibly 
elaborate nomenclature to help us spell out our code&amp;#39;s behaviors in gruesome
detail. But as wonderfully grandiose as it may be, there&amp;#39;s just one tiny little
itty-bitty problem... &lt;i&gt;I can&amp;#39;t remember it&lt;/i&gt;. Oh, sure, I could sit down and
jam it into my already overloaded brain somewhere, but you know what. I ain&amp;#39;t
gonna. I already have enough new stuff to learn and I&amp;#39;m not going to bother to
learn another DSL when those I already know work just as well.&lt;/p&gt;

&lt;p&gt;So therein lies the serious downside to any new DSL. They require more brain
cells. We&amp;#39;re talking the old &amp;quot;learning yet another language&amp;quot; dilemma here. I was
thinking about this today, and it strikes me as one of those cool rules we oft
hear about. So I decided to &amp;#39;writ&amp;#39; one for the occasion.&lt;/p&gt;

&lt;blockquote&gt;
  &quot;Don&#39;t create a DSL if a native solution would be just as elegant.&quot;
&lt;/blockquote&gt;

&lt;p&gt;In fact, a good DSL will likely need to be substantially more elegant in order
to fully justify its existence.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m calling this the &lt;i&gt;YADSL Rule&lt;/i&gt;, for &amp;quot;Yet Another Domain Specific Language&amp;quot;.&lt;/p&gt;

&lt;p&gt;Now, a quick look around the world of modern programming 
(see &lt;a href=&quot;http://dzone.com&quot;&gt;DZone&lt;/a&gt;),
just as quickly makes clear that the YADSL rule is in no short supply of
violations. Indeed, I dare say, that most of programming today is not innovative,
but masquerading around as such via YADSL.&lt;/p&gt;

&lt;p&gt;Now I don&amp;#39;t want to seem too harsh. There is of course a certain level of
refinement taking place in some areas. And that naturally has to play itself
out. But it&amp;#39;s getting a little crazy. Besides test frameworks, web frameworks 
and Javscript development frameworks seem to have hit a New Cambrian Explosion.
I don&amp;#39;t see how we&amp;#39;re supposed to keep up with it.
I can only hope that my little rule might help to cool all
this exuberance down a bit; so we can catch our breaths and take some time
to consider the torrential downpour of verbiage that has befallen us.&lt;/p&gt;

&lt;p&gt;Of course, the real problem may be that too many people want to make YANFT
(Yet Another Name For Themselves).&lt;/p&gt;

&lt;p&gt;I swear to you. I&amp;#39;m not one of them. But I will be introducing my own Ruby
test framework soon.&lt;/p&gt;

&lt;p&gt;No. I&amp;#39;m not kidding.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t worry, there&amp;#39;s no new DSL to learn. And that&amp;#39;s what makes my framework
so very special. I&amp;#39;ll keep you posted.&lt;/p&gt;

&lt;!--
title      : The YADSL Rule
author     : trans
date       : 2008-11-04
categories : [yadsl, dsl, ruby]
layout     : post
--&gt;
</description>
    </item>
    
    
    
    <item>
      <title>This Old Hash</title>
      <link>http://trans.github.com/2008/10/06/this-old-hash/</link>
      <pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2008/10/06/this-old-hash</guid>
      <description>&lt;h1&gt;This Old Hash&lt;/h1&gt;

&lt;p&gt;The Hash may well be the most used class in Ruby. Sure, our programs
have arrays and strings galore, but they generally come and go without
much ado. Hashes on the other hand get &lt;em&gt;used&lt;/em&gt;; and by that I mean to
say, we spend a lot of time fussing with them. I think there are two
significant reasons for this and I will focus on the first, and
the more important of the two, here.&lt;/p&gt;

&lt;p&gt;Now, I suspect you would agree, if I were to present you with a class
which was clearly overkill for vast majority of its intended uses, and
its use required repeated mitigation of its unused features, I have no
doubt, you&amp;#39;d unequivocally advise me to select a &amp;quot;&lt;i&gt;better tool for the job&lt;/i&gt;&amp;quot;.
And yet, that&amp;#39;s the situation all Ruby programmers face, day in and
day out, with Ruby&amp;#39;s Hash.&lt;/p&gt;

&lt;p&gt;Ruby&amp;#39;s Hash is exceptionally powerful because it supports any type of
object as a hash key. That&amp;#39;s really really cool... for all of about
five minutes. The truth is, the vast majority of cases only require
one type of key --for Ruby that will either be a Symbol or a String,
and because of this, a great deal of time and code is wasted ensuring
all keys are that single type. Because of this, methods like 
&lt;code&gt;#to_sym&lt;/code&gt; often riddle our scripts.&lt;/p&gt;

&lt;p&gt;The issue is undeniably attested to by real world &amp;quot;solutions&amp;quot;
others have created to address it, such as Ruby Facets&amp;#39;
&lt;a href=&quot;http://facets.rubyforge.org/doc/api/core/classes/Hash.html#M000124&quot;&gt;Hash#rekey&lt;/a&gt;.
and Ruby on Rails&amp;#39;
&lt;a href=&quot;http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html&quot;&gt;HashWithIndifferentAccess&lt;/a&gt;.
But let&amp;#39;s face it, these are both underwhelming attempts at mitigating
the fundamental problem.&lt;/p&gt;

&lt;p&gt;A real solution would have the current Hash class renamed, and a new
limited-key structure put in its place. The old class would still be
available, of course, for those special cases when a key of any object
type is required, but the new, more utilitarian Hash class would be
the literally-constructed default. The end effect of this change would
be simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means reducing all hash keys to a single &lt;em&gt;symbolic&lt;/em&gt; index type.
It does not matter what the actual reference is, a String, Symbol,
Integer, etc. just so long as it has a predictable symbolic
representation.&lt;/p&gt;

&lt;p&gt;It may feel a bit strange to consider a suggestion that actually calls
for the reduction of features. More often change requests call for just
the opposite and YAGNI has to be peddled out on them. But, I think, we 
often underestimate the power of simplicity. Consider ideas such as 
convention-over-configuration and duck-typing --simplifications that
are not necessarily intuitive at first. But in the end, they make our
life as programmers a good bit more productive.&lt;/p&gt;

&lt;blockquote&gt;
&quot;Make everything as simple as possible, but not simpler.&quot;
&lt;cite&gt;--Albert Einstein&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;title      : This Old Hash
author     : trans
date       : 2008-10-06
categories : [ruby, hash]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>If And Oopy If</title>
      <link>http://trans.github.com/2008/09/28/if-and-oopy-if/</link>
      <pubDate>Sun, 28 Sep 2008 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2008/09/28/if-and-oopy-if</guid>
      <description>&lt;h1&gt;An Ally OOP for If-Conditions&lt;/h1&gt;

&lt;p&gt;Ruby takes a unique approach to conditional evaluation: &lt;i&gt;All
objects are equivalent to &lt;code&gt;true&lt;/code&gt; except &lt;code&gt;nil&lt;/code&gt;
and &lt;code&gt;false&lt;/code&gt;&lt;/i&gt;. No doubt this is a more object-oriented
approach than, say, C&amp;#39;s use of &lt;code&gt;0&lt;/code&gt; as false, but it&amp;#39;s far
from the ideal of OOP all the way down, as any
&lt;a href=&quot;http://pozorvlak.livejournal.com/94558.html&quot;&gt;Smalltalker&lt;/a&gt;
can attest.&lt;/p&gt;

&lt;p&gt;Consider the following case. For a while now. I have wanted in my arsonal
of Ruby classes a NullClass defined basically as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NullClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NilClass&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NullClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This object would greatly benefit fluent interfaces. Instead of returning
&lt;code&gt;nil&lt;/code&gt;, such intefaces could return &lt;code&gt;null&lt;/code&gt;, and no 
error would be thrown when invoking any method against it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;does&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matter&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately &lt;code&gt;null&lt;/code&gt; is not very viable in Ruby
because &lt;code&gt;null&lt;/code&gt; still evaluates as &lt;code&gt;true&lt;/code&gt;
when used as the expression of a condition. The fact remains,
Ruby is hardcoded to see only the singleton instances of 
&lt;code&gt;NilClass&lt;/code&gt; and &lt;code&gt;FalseClass&lt;/code&gt; as false.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve requested that &lt;code&gt;NullClass&lt;/code&gt; be added to core Ruby in
the past (as of yet to no avail) and though I still would like to
see it included, it may be better still to take an altogether 
object-oriented approach to conditions --in the spirit of Smalltalk.
This would allow us to freely create &amp;quot;false&amp;quot; objects, like the
&lt;code&gt;NullClass&lt;/code&gt;, ourselves.&lt;/p&gt;

&lt;p&gt;The adoption of such a capability does not require the odd syntax 
used by Smalltalk (&lt;code&gt;ifTrue&lt;/code&gt; / &lt;code&gt;ifFalse&lt;/code&gt;).
Rather, it can take an approach more akin to Ruby&amp;#39;s own &lt;code&gt;case&lt;/code&gt;
statements. As with &lt;code&gt;case&lt;/code&gt;&amp;#39;s use of &lt;code&gt;#===&lt;/code&gt;,
a particular method would be used to evaluate the &amp;quot;truthiness&amp;quot; of
a value. This would apply for all types of conditions: 
&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, etc. &lt;/p&gt;

&lt;p&gt;To clarify, let&amp;#39;s say this special method is simply called #if, then...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IfExample&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:if&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IfExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Yes&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;No&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of this condition would be &lt;code&gt;&amp;quot;No&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While it may not be an earth shattering adjustment, the additional
flexibility opens up some interesting doors. Not only would classes
like the previously mentioned &lt;code&gt;NullClass&lt;/code&gt; become possible,
but conditions themselves become &lt;i&gt;dynamically controllable&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;For example, it would allow method probes to fully map method
signatures (the Halting Problem not withstanding). This is not 
currently possible in Ruby because a probe cannot pretend to evaluate
to false in order to walk through the false side of a condition.&lt;/p&gt;

&lt;p&gt;The idea would require some getting used to --after all a simple 
if-statement would no longer do what we Rubyists presently take 
for granted. But then, that&amp;#39;s the nature of progress, is it not?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : If and OOPy If
author     : trans
date       : 2008-09-28
categories : [ruby, nullclass]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Taskable</title>
      <link>http://trans.github.com/2008/09/12/taskable/</link>
      <pubDate>Fri, 12 Sep 2008 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2008/09/12/taskable</guid>
      <description>&lt;h1&gt;Taskable&lt;/h1&gt;

&lt;p&gt;On more than a few occasions I have taken a stab at writing a general
purpose task system, akin to Rake&amp;#39;s, but one that works within the
framework of Ruby class inheritance. I recall my first attempt was
quite an unwieldy beast, and my subsequent attempts were fairly
unwieldy too, but over time they became more concise. Below is the
most concise variation yet, and I was wondering what other thought
of it -- do you see any flaws in the design; does it satisfy all the
criteria of such a system; would you find it useful; etc.&lt;/p&gt;

&lt;p&gt;One issue to note about the code, is the use of the &lt;code&gt;*_trigger&lt;/code&gt; methods.
I&amp;#39;m not sure that&amp;#39;s the best approach. My original approach was
to provide a #run method (you can see it commented out), but this
requires dividing Taskable into two parts, a module for extending and
a module for including, and I try to avoid that design when I can.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Taskable&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Without an argument, returns list of tasks defined for this class.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If a task&amp;#39;s target name is given, will return the first&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# task matching the name found in the class&amp;#39; inheritance chain.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This is important to ensure tasks are inherited in the same manner&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# that methods are.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;anc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Taskable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#DSL&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Set a description to be used by then next defined task in this class.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Define a task.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_and_requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_and_requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;tdesc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@desc&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_trigger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# or use #run?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:task&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TODO: in 1.9 use instance_exec instead.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Run a task.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Hmmm... to add this would require another module (to include).&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# But I&amp;#39;m not sure. Maybe trigger method is the better way?&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#def run(target)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#  #t = self.class.tasks(target)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#  #t.run(self)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#  send(&amp;quot;#{target}_trigger&amp;quot;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# = Task Class&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:base&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:target&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:requisite&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:function&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@base&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@target&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@requisite&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@function&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@requisite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq!&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prerequisite&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Taskable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requisite&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# invoke target&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule_dag&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:task&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#def call(object)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#  object.instance_eval(&amp;amp;function)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Collect task dependencies for running.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rule_dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;prerequisite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule_dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#cache &amp;lt;&amp;lt; dep&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_and_reqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_and_reqs&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_and_reqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reqs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_and_reqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_and_reqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reqs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s a very simple &lt;a href=&quot;http://quarry.rubyforge.org&quot;&gt;QEDoc&lt;/a&gt; demo/spec:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Example&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Taskable&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:task_with_no_requisites&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;task_with_no_requisites&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:task_with_one_requisite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:task_with_no_requisites&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;task_with_one_requisite&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#example.run :task_with_no_requisites&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_with_no_requisites_trigger&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;task_with_no_requisites&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#example.run :task_with_one_requisite&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_with_one_requisite_trigger&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;task_with_no_requisites&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;task_with_one_requisite&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what do you think?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;title      : Taskable
date       : 2008-09-12
categories : [ruby]
layout     : post&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Library Poll</title>
      <link>http://trans.github.com/2007/05/02/the-library-poll/</link>
      <pubDate>Wed, 02 May 2007 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2007/05/02/the-library-poll</guid>
      <description>&lt;h1&gt;The Library Poll&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve been thinking far too long about how best to organize and distribute programming libraries. Having a hard time coming to any firm conclusions, I&amp;#39;ve decided to try an inductive approach --via a poll. If you have a moment, I&amp;#39;d really appreciate your thoughtful answers to the following questions. Thanks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sorry, the polls are closed&lt;/strong&gt;. But here are the results:&lt;/p&gt;

&lt;p&gt;1) Which library name would you prefer: (&lt;code&gt;126&lt;/code&gt; votes)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;37%&lt;/code&gt; livelibs-file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;63%&lt;/code&gt; filestorm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Which library would you be more likely to try: (&lt;code&gt;204&lt;/code&gt; votes)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;62%&lt;/code&gt; cliutils&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10%&lt;/code&gt; cli/best&lt;/li&gt;
&lt;li&gt;&lt;code&gt;03%&lt;/code&gt; cliBest&lt;/li&gt;
&lt;li&gt;&lt;code&gt;24%&lt;/code&gt; climax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3) Should programming libraries be named: (&lt;code&gt;211&lt;/code&gt; votes)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;45%&lt;/code&gt; Creatively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;55%&lt;/code&gt; Categorically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4) Programming libraries should be packaged: (&lt;code&gt;200&lt;/code&gt; votes)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;35%&lt;/code&gt; Per specific tool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;47%&lt;/code&gt; Per related set of tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;18%&lt;/code&gt; Comprehensively (all-in-one)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Package Management Is A Red Herring</title>
      <link>http://trans.github.com/2007/03/12/package-management-is-a-red-herring/</link>
      <pubDate>Mon, 12 Mar 2007 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2007/03/12/package-management-is-a-red-herring</guid>
      <description>&lt;h1&gt;Package Management is a Red Herring&lt;/h1&gt;

&lt;p&gt;Traditionally package management has been fairly complicated. Developers must navigate the matrix of platform support, package format and configuration choices that are often as time consuming as they are restrictive. &lt;/p&gt;

&lt;p&gt;For instance, the goto format of the day on most Linux platforms is the Debian package format. Debian packages follow closely to the &lt;code&gt;FHS&lt;/code&gt; (File Hierarchy standard), and tend to enforce fairly strict Debian packaging policies, such as placing development files in separate packages. Debian packages require the creation of a control file with information about the build as well as a &amp;quot;fuax installation&amp;quot; that is packaged up into a &lt;code&gt;.deb&lt;/code&gt; file. All of this takes a fair bit of effort on the developer&amp;#39;s part. And that&amp;#39;s just the work involved for supporting one package format for a limited selection of platforms.&lt;/p&gt;

&lt;p&gt;For Ruby developers, RubyGems has come along to make life a fair bit easier. They have dispensed with FHS compliance, to the dismay if Debian maintainers, and provided a relatively easy means of packaging up a library or application for redistribution by following the &lt;em&gt;convention over configuration&lt;/em&gt; philosophy. Of course, it helps that the target source is Ruby, which has very simple file-based import system, as opposed to C or Java.&lt;/p&gt;

&lt;p&gt;Even so, package management can be even easier if we simply recognize the gorilla in the room: version control systems. All developers now use source code managers (&lt;code&gt;SCM&lt;/code&gt;) to track changes to code and &lt;em&gt;distribute&lt;/em&gt; source between developers. See the keyword there? The ability to &lt;em&gt;distribute&lt;/em&gt; a program is half the battle of package management.&lt;/p&gt;

&lt;p&gt;The other half is installation. For a pure-Ruby program installation if fairly trivial, it&amp;#39;s just a matter to putting the files in a proper location on the file system. For C or Java packages there is the further matter of the &lt;em&gt;compile&lt;/em&gt;. For open-source projects that&amp;#39;s not particularly difficult, a build script can be provided and as long as the end installer has the necessary build tools, the program can be compiled on demand. For proprietary code it gets more complicated, but lets put that aside for the moment.&lt;/p&gt;

&lt;p&gt;Taking all of this into consideration, packaging systems should be fairly trivial --a wrapper around SCM tools that pull down the current or tagged version of source, run the build script and copy the resulting files to an appropriate place on disk. Such a system would be very light weight. In fact, with the exception of dependency management code, there&amp;#39;s no reason that such a system to take up more than a few hundred lines of code.&lt;/p&gt;

&lt;p&gt;The question of proprietary code is a little more challenging since the developer does not want the source code to make it&amp;#39;s way to the end-users system at all. In this case I suggest one of two possibilities: 1) it may be possible to use encryption to prevent end-users from gaining access to the source, or 2) use an intermediary service that builds a package on a replica of the end users machine, turning over only the final results. Yes, this means complications for proprietary vendors, but it&amp;#39;s one that could easily be turned into a service.&lt;/p&gt;

&lt;p&gt;The chore of the developer could then be greatly reduced to following a set of standards for organizing a project, providing metadata and optionally a build script for handling advanced build requirements. The target platform can take these pieces and build and install the package as is suitable to the platform. In other words, the platform takes care of the platform distinctions, not the developer.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Negative Arrays</title>
      <link>http://trans.github.com/2006/12/03/negative-arrays/</link>
      <pubDate>Sun, 03 Dec 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/12/03/negative-arrays</guid>
      <description>&lt;h1&gt;Negative Arrays&lt;/h1&gt;

&lt;p&gt;My current work involves the creation of an extensive configuration file format representing project information. In a number of cases I have had need of an inclusion list, representing files and file patterns to include for some operation --say, what files to include in a package. In such a case I generally end up with a least two parameters which I basically label include and exclude. While include is the list of files to use, exclude is list of files to exclude from the included list. Using exclude makes it easier to specify a large selection and then subsequently omit a file or two. The include list typically has a suitable default value, so a third parameter is sometimes also of use, append, which concats to the defaults as opposed to replacing the include parameter outright.&lt;/p&gt;

&lt;p&gt;Since these three parameters help define what is essentially one list of data, it would be nice if they could be specified as a single parameter too. So I gave the problem some thought.&lt;/p&gt;

&lt;p&gt;Taking inspiration from the notion of a negated symbol (see facets/symbol/not). It occurred to me that any object that can be added or subtracted is taking part in the same &amp;quot;algebraic group&amp;quot; as whole numbers. And just as a whole number can be negative, why not also an array?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [:a,:b,:c]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this could be very helpful. And it shouldn&amp;#39;t be too much hard to implement.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@negative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@negative&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negative?&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@negative&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:+&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sub&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:-&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negative?&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negative?&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negative?&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m sure tighter implementation is possible, but you get the idea. So then include and exclude parameters could be specified in a single parameter.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Installedfiles&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neat! But unfortunately it doesn&amp;#39;t really solve the whole problem since YAML doesn&amp;#39;t understand this negative listing concept either. It could still be of use in general Ruby scripts though. Notations such as this often prove very powerful. And in fact the idea does move us in a possible workable direction. There&amp;#39;s no reason a string can&amp;#39;t be marked as negative as well. After all it&amp;#39;s just a flag. In fact, if we move the core method @- to Object itself, then any object can be so indicated. The above line could then be written:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Installedfiles&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Methods such as Dir.multiglob(*files) (another Facet) could use this extra bit of information to provide the desired results, equivalent to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;InstalledFiles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, this still doesn&amp;#39;t quite help us with the YAML configuration file, but with a little fudging we can get a useful format.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;ss&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-InstalledFiles&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for the append parameter that was mentioned as the beginning, we could just add a special notation for this as well, say, &amp;#39;$&amp;#39; to mean defaults.&lt;/p&gt;

&lt;p&gt;Okay. So will I use this bit of trickery to reduce three parameters to one? Perhaps. While the result is wonderfully practical in usage, it&amp;#39;s not necessarily so simple to implement. Either a filter would have to split the one entry into three parts when loading, or an untold number of methods would have to augmented to take the trick into consideration. The later I imagine would simply prove too extensive w/o pre-established support for the negation concept. The former might be reasonable however. I&amp;#39;ll give it a try.&lt;/p&gt;

&lt;p&gt;In any case it was in interesting thought experiment. Although perhaps you have a better way to represent this kind of information?&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>We All Live In A Yellow Submarine</title>
      <link>http://trans.github.com/2006/11/11/we-all-live-in-a-yellow-submarine/</link>
      <pubDate>Sat, 11 Nov 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/11/11/we-all-live-in-a-yellow-submarine</guid>
      <description>&lt;h1&gt;We All Live in a Yellow Submarine&lt;/h1&gt;

&lt;p&gt;Anyone having read my previous posts, here and on ruby-talk, knows I love to explore ideas. It doesn&amp;#39;t matter if they are considered &amp;quot;good&amp;quot; or &amp;quot;bad&amp;quot;. Most cannot be judged without first exponding on them anyway. In fact, half the time I have no idea where an idea might lead until I sit down and blog it.&lt;/p&gt;

&lt;p&gt;Tonight&amp;#39;s idea comes by way of frustration with project organization, specifically module namespaces. A minor issue for small projects; large projects on the other hand... Well, consider my current problem. I have a class called Project. Now related to Project are a number of modularized tool sets. Each tool set can be used independently of the Project class, but typically will be used via it. So where do I locate the tool sets? My first instinct is to go ahead and put them in the class itself.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyApp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetA&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I find this less the optimal. While it may be a small and unlikely matter, class is not a bonofide namespace --it is a class. And while it depends on these tool sets, the tool sets do not necessarily depend on it. As such we would never be able to include these tool sets in another namespace --such as the toplevel if it struck my or some users fancy. So we are left then to use some alternate organization.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ProjectToolsets&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetA&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or as a compromise&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Toolsets&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetA&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The downside here, of course, are the long-winded names. But a better solution eludes me, other than one possibility: the use of all capitals for pure namespace modules.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PROJECT&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetA&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s a bit strange in appearance but it works well. One quark however is that this new rule begs for my project&amp;#39;s toplevel namepsace to be all caps too. Do I want to go there?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MYAPP&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PROJECT&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetA&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ToolSetB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m not sure it&amp;#39;s the solution I&amp;#39;m after, but to its merit, it does draw a nice distinction between namespace modules and other modules and classes.&lt;/p&gt;

&lt;p&gt;In the course of this consideration I began to wonder about the distinction between Class and Module. The difference is almost not-existent in reality. If you peer into the Ruby source code you will find that interoperability between them is purposefully prevented. After all Class is a subclass of Module. Yet they are made distinct for a good reason. They provide conceptually different ideas. A class represents an data archetype; a module represents a reusable component. In fact, one could easily argue that Module itself could use an additional distiction between Namespace and Mixin. Even so, I could not help but wonder if it might yet be possible to have a single Encapsulation, relegating the differences to the elements within them instead of the encapsulation types themselves. I imagined this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Something&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mod_def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mod_def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomethingElse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instantiating via Something.new or subclassing would provide the instance methods x and y. Including however would provide the mod&lt;em&gt;def methods a and x instead along with adding SomethingElse to the including namespace. More refined means of controlling namespace become possible. For instance include&lt;/em&gt;constants could limit inclusion to constants only; vice-verse with include&lt;em&gt;methods. Methods could be defined as both instance and module methods. And while we&amp;#39;re at it, throw in a class&lt;/em&gt;def as an alternative to def self.x.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s interesting. I&amp;#39;ve often thought about the idea of eliminating the distinction between Class and Module. This is the first time it&amp;#39;s occurred to me that it could be done while retaining the utility of that distinction by passing responsibility down to the methods themselves.&lt;/p&gt;

&lt;p&gt;I suppose now the question is, what are the downsides to this? That&amp;#39;ll require further consideration, but one clear point is that methods are less cleanly divided. You could have module methods scattered about your class definitions, weaving in and out of your instance methods. I suspect we would make an effort to nicely organize them however. Besides it means having fewer modules to name --and I&amp;#39;m all for anything that reduces the number of names I have to make-up.&lt;/p&gt;

&lt;p&gt;It would be interesting to see how far one could go in implementing this in pure Ruby. Some details of Ruby will hold back a perfect implementation, but the essence of it is certainly possible. For starters, here&amp;#39;s a neat trick for doing without the distinction between class and module.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Module&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Have fun! Unfortunately I&amp;#39;m not. I&amp;#39;m still stuck on the forementioned namespace issue! Oh well. Back to the coding board...&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Separation Of Church And State</title>
      <link>http://trans.github.com/2006/11/10/separation-of-church-and-state/</link>
      <pubDate>Fri, 10 Nov 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/11/10/separation-of-church-and-state</guid>
      <description>&lt;h1&gt;Separation of Church and State&lt;/h1&gt;

&lt;p&gt;Have you ever had a class so choke full of interrelated data and function members that had trouble avoiding name clashes between the two. Of course it&amp;#39;s a rare problem when you&amp;#39;re in full control of the members, but when you&amp;#39;re designing extensible classes, it become a major issue and you have to resort to some less-than-lovely work around.&lt;/p&gt;

&lt;p&gt;Let me give you a simple scenario.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Package&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Release date&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:release&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Release the package.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Telling the world on &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@release&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The issue here is clear. On one hand, we want to use release as a noun to represent the date of release. On the other, we want to use it as a verb for releasing the package to the world. Of course, under completely isolated circumstances we could just change one of the names and deal. But when we are working on the basis of extensibility, where these and additional data or functional members may be added readily, say via a plug-in system, then a solution is not as simple.&lt;/p&gt;

&lt;p&gt;So what can we do? The bottom line is that in some way or another the two member types must be distinguished from one another.&lt;/p&gt;

&lt;p&gt;One could transform one set of the members with a slightly different name via some uniform convention. For instance, all data members could start with &amp;quot;my&lt;em&gt;&amp;quot;, so release as a date would be my&lt;/em&gt;release. Ruby actually makes this it a bit nicer in that we can use &amp;#39;?&amp;#39; or &amp;#39;!&amp;#39; prepended to method names. A fair solution might then be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release?&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@release&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release!&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Telling the world on &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s not a perfect solution however, especially as a matter of convention. It goes against the grian. &amp;#39;?&amp;#39; typically indicates a true/false query. And &amp;#39;!&amp;#39; indicates in place or caution. Consider how others will &amp;quot;smell&amp;quot; your code when they see a question mark for every reference to a data member.&lt;/p&gt;

&lt;p&gt;The other more traditional solution is to use delegation. In this case we make a subclass for either or both of the member types. For instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Package&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:release&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Telling to the world on &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Albeit a bit longer. It works very well. Delegation is a powerful tool. One could even emulate the former solution via method_missing, trapping method calls that end in &amp;#39;?&amp;#39; and rerouting them to @data. Another advantage is that we can readily pass around the data independent of the function members. On the flip side however, we are regulated to this special data.member interface. and likewise any reverse access by the data members to the functional members, if ever needed, would require us to also pass a reference to the Package instance into the Data instance.&lt;/p&gt;

&lt;p&gt;In considering all this of course, it becomes apparent that Ruby already has a means of distinguishing data members from functional members via instance variables. Clearly @release references the date. But Ruby does not give us the power to treat &amp;quot;instance members&amp;quot; publicly or programmaticly. We can&amp;#39;t, for instance, use project.@release to access the release date. Nor can we wrap data members in order to massage their data, say:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@release&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:@release&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m sure many readers will take such notion for simply god awful. But I think careful consideration at least warrants the fair question. &amp;quot;Is a distinct separation between data and functional members useful?&amp;quot; The mere existence of instance variables indicates that the distinction is in fact useful. In contrast, data members could have been made indistinguishable from functional members, or local variable persistence could be used in their stay. So if the distinction is useful, why hide public access to data members behind functional members acting as mini-delegates?&lt;/p&gt;

&lt;p&gt;To be a bit more pragmatic, how would a solution to our example pane out if data members were in fact accessible? Interestingly it could look exactly like the original example. Public access to the release date however would simply come via project.@release or preferably even project@release. And there would be no need for any name (mis)conventions or special-interface delegation.&lt;/p&gt;

&lt;p&gt;Of course let&amp;#39;s be honest here. &amp;#39;@&amp;#39; itself is the Special Delegate of State to the Ruby &amp;quot;Church&amp;quot;. Too bad he&amp;#39;s only allowed to preach to the choir.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Frustration With Object Orientation</title>
      <link>http://trans.github.com/2006/10/21/frustration-with-object-orientation/</link>
      <pubDate>Sat, 21 Oct 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/10/21/frustration-with-object-orientation</guid>
      <description>&lt;h1&gt;Frustration with Object-Orientation&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve spent more weeks than I care to count going around in circles.&lt;/p&gt;

&lt;p&gt;You see the problem is I have &amp;quot;tools&amp;quot; that are in essence methods. But the are generally complicated enough to warrent using state and being broken into many smaller supporting methods. That&amp;#39;s fine and dandy until I try to tie a bunch of these tools together under the same class. Name clashes become a huge problem, to the point that it is simply unworkable. The need for local instance variables and methods becomes a big deal. The only way to currently achieve that is to use lambdas and define_method. Not ideal, and RDocs become all but useless. To avoid this I tried going in the opposite direction, defining the tools as their own classes instead. This works great until the tool needs to take part in a more complex structure. For example I have hosting service classes that provide releasing and publishing tools. Well, if &amp;#39;release&amp;#39; and &amp;#39;publish&amp;#39; are classes rather then methods how are they going to call the hosting service&amp;#39;s login method? I&amp;#39;m forced into using delegation, passing them the instance of the Host class to which they are supposed to belong. At that point the result is worse than the original problem. So in either case I&amp;#39;m finding it neccessary to to write and maintain hacky code. And I&amp;#39;m just fet up with it.&lt;/p&gt;

&lt;p&gt;Over the last five years I&amp;#39;ve spent a great deal of time working with Ruby and learning Object-Oriented programming practices it&amp;#39;s associated design patterns. It all seemed very logical at first. But as time wore on I found myself again and again feeling hemmed in. I assumed it was just that I did not understand it all well enough yet to use it well so I kept at it. Certainly my skills improved, but in retorsect it wasn&amp;#39;t some great understanding as much it was &amp;quot;don&amp;#39;t do that&amp;quot;. And even so, I still ran into these walls.&lt;/p&gt;

&lt;p&gt;And this is waht I think it is. OOP requires you to first design the encapsulating structure of your project. And your whole edifice depends on that supporting design. If for some reason any bit of that should change, you may well find yourself tearing down whole walls in order to build them up again. And this can happen over and over if you weren&amp;#39;t sure of the original edifice from the start. For a large project that&amp;#39;s a lot to ask --knowing how the whole outward structure should be before you even know the materials involved.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>I See You</title>
      <link>http://trans.github.com/2006/10/02/i-see-you/</link>
      <pubDate>Mon, 02 Oct 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/10/02/i-see-you</guid>
      <description>&lt;h1&gt;I See You&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/iseeyou.jpg&quot; alt=&quot;I See You Picture&quot;&gt;&lt;/p&gt;

&lt;p&gt;You have to &lt;a href=&quot;http://tenderlovemaking.com/2006/09/28/new-ruby-betabrite-002/&quot;&gt;check this out&lt;/a&gt;. Okay. I know. I know. It&amp;#39;s been blogged by others many times now. In fact, you can check out these other blog posts too: Why&lt;em&gt;the&lt;/em&gt;lucky_stiff has it on &lt;a href=&quot;http://redhanded.hobix.com/inspect/hackASignOnSomeoneElseSWoodFloors.html#comments&quot;&gt;Redhanded&lt;/a&gt;, and &lt;a href=&quot;http://www.eachmapinject.com/2006/9/29/betabrite&quot;&gt;J&amp;#39;ey&lt;/a&gt; put out the word as well. But it&amp;#39;s just so damn cool, I just had to blog it too!&lt;/p&gt;

&lt;p&gt;Go ahead. Try it at home:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;drb&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brite_shot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;druby://eviladmins.org:9000&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DRbObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_with_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;out.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;brite_shot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;I SEE YOU!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(And if a still picture isn&amp;#39;t enough for you. How about an &lt;a href=&quot;http://pastie.caboo.se/15646&quot;&gt;animation&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;And so, a REAL picture is made for me by remote many thousands of miles away. How far I wonder? Well, with a GeoIP lookup and Google Maps, I found out &lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;q=47.610%C2%B0N,+122.304%C2%B0W&amp;amp;ie=UTF8&amp;amp;z=17&amp;amp;ll=47.61,-122.304&amp;amp;spn=0.004231,0.012757&amp;amp;t=h&amp;amp;om=1&quot;&gt;where this picture was made&lt;/a&gt;. The world really is getting smaller.&lt;/p&gt;

&lt;p&gt;I See You!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>I No Longer Believe In Methods</title>
      <link>http://trans.github.com/2006/09/21/i-no-longer-believe-in-methods/</link>
      <pubDate>Thu, 21 Sep 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/09/21/i-no-longer-believe-in-methods</guid>
      <description>&lt;h1&gt;I No Longer Believe in Methods&lt;/h1&gt;

&lt;p&gt;Yes, that&amp;#39;s right. I no longer believe in methods. Why? Becuase this is OOP and if the methods aren&amp;#39;t honest to goodness objects from the start, without exception, then they are not really methods. They&amp;#39;re just glorified functions.&lt;/p&gt;

&lt;p&gt;Let me show you what I mean. I have a Project class in which is defined a set of tools that can manipulate it. Clearly the proper implementation abstraction for these tools is the method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is my new project!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But these tools must be distinguishable from other supporting methods. Moreover additional information may be associated with these tools, like help information or valid states of the Project for the tool to be useful. How do we encode this information with Ruby? Since methods aren&amp;#39;t first class objects, we are forced to return to functional programming. In which case, it is best to define some sort of DSL.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ProjectDSL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProjectDSL&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is my new project!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:announce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Announces your project to the world!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:announce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this kind of thing has come up enough in large projects, such as Nitro, that a general means of annotation proved to be most effective.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;facet/annotation&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is my new project!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ann&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:announce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Announces your project to the world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;ss&quot;&gt;:valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Annotations works very well, and if you find yourself in need of this kind of &amp;quot;method metadata&amp;quot; it is an excellent approach.&lt;/p&gt;

&lt;p&gt;But I&amp;#39;ve worked with all this long enough now to be able to have a wide perspective on it and it&amp;#39;s become very clear to me that the whole &amp;quot;special needs&amp;quot; arises out of the fact that Ruby is still just a functional language in this respect, and not a full OOPL. (And please no objections that method() and instance_method() make it otherwise, these do not provide a persitant object, but return a new object every time they are invoked.) So what might the above look like if it were not so? There would of course be more than one way to go about it, but imagine this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Method&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:help&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tool&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is my new project!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Announces your project to the world!&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m taking some liberties with the syntax here for clarity. But in anycase it certainly paints a provocative idea. And I would argue that it paints the approprite OOP idea too.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Persnickety Order Of Self Serving Modules</title>
      <link>http://trans.github.com/2006/08/26/the-persnickety-order-of-self-serving-modules/</link>
      <pubDate>Sat, 26 Aug 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/08/26/the-persnickety-order-of-self-serving-modules</guid>
      <description>&lt;h1&gt;The Persnickety Order of Self-Serving Modules&lt;/h1&gt;

&lt;p&gt;This one caught me off guard.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  irb(main):001:0&amp;gt; module M
  orb(main):002:1&amp;gt;   def x; &amp;quot;x&amp;quot;; end
  orb(main):003:1&amp;gt; end
  =&amp;gt; nil
  orb(main):005:0&amp;gt; module Q
  orb(main):006:1&amp;gt;   extend self
  orb(main):007:1&amp;gt;   include M
  orb(main):008:1&amp;gt; end
  =&amp;gt; Q
  orb(main):009:0&amp;gt; Q.x
  NoMethodError: undefined method `x&amp;#39; for Q:Module
          from (orb):9
          from :0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why isn&amp;#39;t the included #x coming along for the ride in the self extension of Q? This kind of dyanmicism is vital when dynamically loading behaviors. And so I suspect it must do with the dread &lt;a href=&quot;http://groups.google.com/group/comp.lang.ruby/msg/70509b289f0ea999&quot;&gt;Dynamic Module Inclusion Problem&lt;/a&gt;? And it would appear that I am right:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  orb(main):012:0&amp;gt; module M
  orb(main):013:1&amp;gt;   def x; &amp;quot;x&amp;quot;; end
  orb(main):014:1&amp;gt; end
  =&amp;gt; nil
  orb(main):015:0&amp;gt; module Q
  orb(main):016:1&amp;gt;   include M
  orb(main):017:1&amp;gt;   extend self
  orb(main):018:1&amp;gt; end
  =&amp;gt; Q
  orb(main):019:0&amp;gt; Q.x
  =&amp;gt; &amp;quot;x&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, another of the edge cases. But the preponderance weighs heavy on the Coding Spirit. The Dynamic Module Inclusion Problem is getting old.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Main Campaign Out Of Object Now</title>
      <link>http://trans.github.com/2006/08/21/main-campaign-out-of-object-now/</link>
      <pubDate>Mon, 21 Aug 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/08/21/main-campaign-out-of-object-now</guid>
      <description>&lt;h1&gt;Main Campaign: Out of Object Now!&lt;/h1&gt;

&lt;p&gt;The word from Matz on Kernel as toplevel object:&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t feel that making Kernel as toplevel self is not a good idea,
because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toplevel def does not define methods on Kernel, but Object.&lt;/li&gt;
&lt;li&gt;toplevel include does not include modules into Kernel, but Object.&lt;/li&gt;
&lt;li&gt;toplevel private etc. do not work on Kernel, but Object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wouldn&amp;#39;t call that an explanation exactly, more an explicative of the current behavior. I&amp;#39;m sure Matz has his reasons, and we can just assume that he wants to keep the namespace distinct. Fair enough, and of course he can do that. (It&amp;#39;s not REALLY a democracy after all!) So Kernel drops out of the race. But the Kernel&amp;#39;s running mate, Main, is still here campaigning.&lt;/p&gt;

&lt;p&gt;You might be surprised to learn (as I was when I first discovered it):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protected_instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s right. There&amp;#39;s not a single method defined in Object. All the methods ri tells you belong to Object actually are inherited from Kernel. But from there, any toplevel method we define does end-up in Object. Hence the clear separation of namespace I mentioned above.&lt;/p&gt;

&lt;p&gt;Now a separate module, eg. Main, would do just as well. Kernel need not be used. And as I&amp;#39;ve expressed before, Main could be induced into Object for all the same effects. The base hierarchy then being Object &amp;lt; Main &amp;lt; Kernel.&lt;/p&gt;

&lt;p&gt;But wait a second! Why are all these toplevel methods sneaking into all my Object&amp;#39;s anyway? I can just as easily add them to Object myself if that&amp;#39;s what I want. I don&amp;#39;t need some cheap toplevel proxy to do it for me. In fact, that can be a problem too.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then some unsuspecting nuby comes along (okay I admit, it was I and it happened to me today!) and innocently adds to the top level:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, so much for my lazily required Foo.check routine. It&amp;#39;s been whacked from the top down!&lt;/p&gt;

&lt;p&gt;You see where I&amp;#39;m going now? Primaries are over Main has taken Kernel out of the running with a new divisive platform. &amp;quot;Out of Object Now!&amp;quot;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Vote Kernel For Toplevel Object</title>
      <link>http://trans.github.com/2006/08/18/vote-kernel-for-toplevel-object/</link>
      <pubDate>Fri, 18 Aug 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/08/18/vote-kernel-for-toplevel-object</guid>
      <description>&lt;h1&gt;Vote Kernel for Toplevel Object&lt;/h1&gt;

&lt;p&gt;As a follow up to my last post on the &amp;quot;pain that is main&amp;quot;, I want to offer a potential improvement for Ruby 2.0. I approached the topic on ruby-talk this week and while Matz initially took some interest, he hasn&amp;#39;t followed up since his last comment:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;matz: Why?  If it is really required it&amp;#39;s fairly
easy to add toplevel methods like we did for #include.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it isn&amp;#39;t always easy. In order get my Taskable module to work, for instance, I had to make exceptions for the toplevel case, which is far from ideal and is fragile [Ed- in fact I&amp;#39;m still getting bugs that I haven&amp;#39;t yet pinned down]. These subtile difficulties arise becuase main acts as a partial proxy for the Object class. Anyone who has created a proxy object before knows the subtile issues that can come into play. In this case, only the bare minimal interface is supported --essentially the method #include. Yet, even if we take matz&amp;#39; advice and add in all the missing proxy methods, we still won&amp;#39;t be 100% out of the woods. The Object class and main are fundamentally two distinct objects --self is not the same, nor are their singleton classes, &amp;amp;c. In the vast majority of cases this will never present an issue, but the distinction can creep in. Here&amp;#39;s an highlight of one way it can:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:q&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# per matz&amp;#39; direction&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;produces&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    true
    false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in effect Ruby is mildly schizophrenic. The false reading is because main != Object. So, you can&amp;#39;t necessarily create a DSL for Object to be used in main, and you can&amp;#39;t neccessairly create a DSL for main to be used in any Object. Hence the devolution to DRYless code.&lt;/p&gt;

&lt;p&gt;There is a potentially elegant solution however, and I&amp;#39;d really like to understand others insights into this (especially Matz&amp;#39; of course): Instead of main being a special proxy object, just let it be a self extended module.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# programs are written as if in here&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would provide all the facilities required of the toplevel without all the proxy troubles. Also, while I&amp;#39;m not so convinced of the merits of every toplevel method becoming a private method of all objects (and with Main that can be easily prevented), it has proven workable in practice so it&amp;#39;s not a significant factor of consideration here. Main can simply be include in Object to achieve that effect.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Main&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But when we do that it becomes very clear what Main appears to be: Kernel. That strikes me as esspecially interesting. Then again, there may be good reasons to keep the Kernel as a separate module, in which case we&amp;#39;d just have a class hierachy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ancestors&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nevertheless, it is clear the Kernel could just as well serve as the toplevel object, which, IMHO, makes this an elegant proposition to consider. Perhaps I&amp;#39;ll start a campaign as November elections roll around: &amp;quot;Vote Kernel for Toplevel Object!&amp;quot; ;-)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Main Is A Dry Pain</title>
      <link>http://trans.github.com/2006/08/17/main-is-a-dry-pain/</link>
      <pubDate>Thu, 17 Aug 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/08/17/main-is-a-dry-pain</guid>
      <description>&lt;h1&gt;Main is a DRY Pain&lt;/h1&gt;

&lt;p&gt;I have a module that depends on define_method and ancestors. It works great when I include it in other modules or classes. But if I try including it into the toplevel it fails miserably.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;NameError: undefined local variable or method `define_method&amp;#39; for main:Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That seems fairly peculiar when you consider that defining methods at toplevel is perfectly acceptable. One must then wonder, what is this toplevel thing anyway?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, it calls itself &amp;quot;main&amp;quot;. Great. But that doesn&amp;#39;t really tell us anything. Let&amp;#39;s check it&amp;#39;s class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah. So it&amp;#39;s an instance of Object. An instance of Object! How is that possible? A normal instance of Object and main can&amp;#39;t be exactly the same. Indeed, they are not.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;public_methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&amp;quot;include&amp;quot;, &amp;quot;private&amp;quot;, &amp;quot;public&amp;quot;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;singleton_methods&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&amp;quot;include&amp;quot;, &amp;quot;private&amp;quot;, &amp;quot;public&amp;quot;, &amp;quot;to_s&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice include has been defined here specifically for main. So something special&amp;#39;s going on when you include a module into the toplevel. Hmm... What about methods defined at the toplevel? If main is an instance of Object then are they singleton methods? Well, no. Turns out they get &amp;quot;magically&amp;quot; defined as private methods of the Object class itself, and main&amp;#39;s singleton class space is actually something else entirely.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; NameError: undefined local variable or method &amp;#39;s&amp;#39; for #&amp;lt;Q:0xb7ce9a3c&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which means the sure solution for my problem...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kernel&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModule&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can you guess?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kernel&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; NameError: undefined local variable or method `m&amp;#39; for main:Object&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; NameError: undefined local variable or method `m&amp;#39; for #&amp;lt;Q:0xb7cbb324&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lands me squre in the face of the Module Inclusion Problem.&lt;/p&gt;

&lt;p&gt;All this leads me to two points. First, I&amp;#39;m stuck! There seems to be no solution to my problem other than rewriting a second version of my module specifically for the toplevel. Talk about lack of DRY! And 2) Why in the world isn&amp;#39;t main a self extended module?&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Taming The File System Zoo</title>
      <link>http://trans.github.com/2006/07/23/taming-the-file-system-zoo/</link>
      <pubDate>Sun, 23 Jul 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/07/23/taming-the-file-system-zoo</guid>
      <description>&lt;h1&gt;Taming the File System Zoo&lt;/h1&gt;

&lt;p&gt;I&amp;#39;m not quite sure I undestand why we have all these classes and modules: &lt;code&gt;Dir&lt;/code&gt;, &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;FileUtils&lt;/code&gt;, &lt;code&gt;FileTest&lt;/code&gt; and &lt;code&gt;Pathname&lt;/code&gt;. I understand what each does, of course, but I don&amp;#39;t understand why the clearly related functionality has been spread about. I think a single &lt;code&gt;FileSystem&lt;/code&gt; class or module would be in
order --a system we could use in much the same manner as we use the command shell to work with a file system.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s not so common that we open files and harbor them, even less so for directories. So the FileSystem can have those defined within it as well, and there&amp;#39;s no reason to even draw them up yourself. FileSystem can do it for you:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;afile.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;lt;#FileSystem::File...&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;adir/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;lt;#FileSystem::Dir...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clear, straightforward and convenient. But best of all, this single point of entry into all things &amp;quot;file system&amp;quot; may lead to more interesting possibilities, in some respect similar to what FUSE offers us in general, only confined to Ruby&amp;#39;s realm.&lt;/p&gt;

&lt;p&gt;I also wonder how remote file systems might fit into this... interesting considerations all.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>From Singleton To Legion</title>
      <link>http://trans.github.com/2006/07/22/from-singleton-to-legion/</link>
      <pubDate>Sat, 22 Jul 2006 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://trans.github.com/2006/07/22/from-singleton-to-legion</guid>
      <description>&lt;h1&gt;From Singleton to Legion&lt;/h1&gt;

&lt;p&gt;For as long as I&amp;#39;ve coded Ruby there has been some question as to the appropriateness of the term singleton class. This is the term generally used in Ruby parlance to refer to the language construct: class &amp;lt;&amp;lt; obj; self; end, and is the context of class methods and module methods.&lt;/p&gt;

&lt;p&gt;While the term is fitting in the sense that each object only has one of these classes (hence &amp;quot;single&amp;quot;), issue arises from a terminology clash with an already well accepted object-oriented programming term, &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Singleton Pattern&lt;/a&gt;. In OOP-speak a singleton class is a class that can only be instantiated once. Many have argued that the Singleton pattern itself is a flawed concept, since one can just instantiate an object and assign it to a constant to achieve the same end. So why restrict anyone from a second instance of a class if they so choose? That&amp;#39;s a reasonable argument, although not always as practical as it might seem. Nonetheless, the terminology clash still remains.&lt;/p&gt;

&lt;p&gt;In light of nomenclature issue, many have offered alternative terms for Ruby&amp;#39;s singleton class. Indeed, Ruby itself has used two alternatives in the past: virtual class and metaclass, and many people still prefer that later of these choices. Other suggestions include the well known _whyism &lt;code&gt;eigenclass&lt;/code&gt;, the abbreviated &lt;code&gt;sclass&lt;/code&gt;, the pronoun contingents &amp;#39;myclass&amp;#39; and &amp;#39;ownclass&amp;#39;, as well as my own concoctions &lt;code&gt;adhoc&lt;/code&gt;, &lt;code&gt;quaclass&lt;/code&gt; and &lt;code&gt;nonce&lt;/code&gt;. Yet despite all these names, none of which ever stick, what is this singly thing really?&lt;/p&gt;

&lt;p&gt;Recently, our beloved Pit Capitan put it concisely when he said &amp;quot;there are only two types of methods in Ruby, instance methods and singleton methods&amp;quot;. Well said. Unfortunately it&amp;#39;s not really true. Instance methods aren&amp;#39;t really methods at all, they are just definitions for methods to be. That&amp;#39;s why when you use #instance&lt;em&gt;method you get something called an UnboundMethod, not a Method. It only becomes a method when it&amp;#39;s bound to an object. To clarify further how that distinction is a bit misleading, consider that when a singleton method is defined it falls into an inheritance hierarchy along side so-called instance methods. In other words, the singleton methods and instance methods exist on the same playing field, and the former can call on the other via #super. In fact, we can access these singleton methods in instance fashion via (class&amp;lt;&amp;lt;obj;self;end).instance&lt;/em&gt;method(sym). So these methods are not really distinct in this manner after all. In fact there is no distinction between methods other than bound and unbound. And this distinction arises from the capability of class Module and class Class to harbor a set of method definitions that are not their own. Which is of course exactly why these constructs exist in the first place. So when we say singleton method, we are not referring to something different from instance method. We only mean that these methods are kept in a special &amp;quot;singleton class&amp;quot;, made just for a specific object, and consequently, are automatically bound to that object.&lt;/p&gt;

&lt;p&gt;Now, I&amp;#39;m going to claim that the term &amp;#39;singleton&amp;#39; is a poor choice for a completely different reason than any given before. It may come as a bit of surprise, but singletons are not inherently single. They are only made so by an explicit restriction in the Ruby&amp;#39;s source code. It is quite simple, actually, to remark the if-clause out of the source, recompile Ruby and then do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xx&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason Ruby makes the per-object classes single is because it would be terribly inefficient to define a whole new class for every new singleton method defined. That&amp;#39;s understandable, but it also comes at a cost. We can not reliably receive an object from the outside world and define our own singleton on it because we may be clobbering someone else&amp;#39;s singleton method without even knowing it. (NOTE: It doesn&amp;#39;t matter so much if you&amp;#39;re just redefining a method altogether, but if you&amp;#39;re calling super it very much matters.) Generally we don&amp;#39;t even think about such things, but truth be told, object singleton methods often fail to survive code refactoring. Object singleton&amp;#39;s really only exist as a side effect of Ruby&amp;#39;s class model (and Smalltalk&amp;#39;s) which utilize the singleton class as a means of separating a module/class method definitions from it&amp;#39;s own actual methods. This could have been done another way of course, but then a class/module would be something wholly different from any other object. The use of the singleton allowed classes and modules to be just like any other object. So singletons are really a bit of cleverness that lie at the very heart of how Ruby works.&lt;/p&gt;

&lt;p&gt;But does it mean that they have to be singly? Could we remove the restriction and open up a additional robustness to these per-object classes? We could. In fact, this was the very first hack I ever made to the Ruby source code. My change simply checked to see if the method was already defined in the first &amp;quot;singleton&amp;quot; layer and continue upward until it either found a usable layer or ran out of layers, in which case it created a new one. Combined with the capability to selectively undefine particular methods of particular layers and we gain a flexible pre-object class hierarchy system that can be used without the caveats that currently make singletons so limited outside of class and module definitions.&lt;/p&gt;

&lt;p&gt;And then we no long can call them &amp;quot;singleton&amp;quot; but rather &amp;quot;legion&amp;quot; ;)&lt;/p&gt;
</description>
    </item>
    
    

  </channel> 
</rss>