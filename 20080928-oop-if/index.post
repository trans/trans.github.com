---
date     : 2008-09-28
title    : If and OOPy If
category : Ruby
tags     : ruby, nullclass
layout   : post

--- markdown

An Ally OOP for If-Conditions
=============================

Ruby takes a unique approach to conditional evaluation: <i>All
objects are equivalent to <code>true</code> except <code>nil</code>
and <code>false</code></i>. No doubt this is a more object-oriented
approach than, say, C's use of <code>0</code> as false, but it's far
from the ideal of OOP all the way down, as any
<a href="http://pozorvlak.livejournal.com/94558.html">Smalltalker</a>
can attest.

--- markdown

Consider the following case. For a while now. I have wanted in my arsonal
of Ruby classes a NullClass defined basically as:

--- coderay.ruby

  class NullClass < NilClass
    def method_missing(*a)
      self
    end
  end

  NULL = NullClass.new

  def null
    NULL
  end

--- markdown

This object would greatly benefit fluent interfaces. Instead of returning
<code>nil</code>, such intefaces could return <code>null</code>, and no 
error would be thrown when invoking any method against it.

--- coderay.ruby

  obj = null
  obj.it.does.not.matter  #=> null

--- markdown

Unfortunately <code>null</code> is not very viable in Ruby
because <code>null</code> still evaluates as <code>true</code>
when used as the expression of a condition. The fact remains,
Ruby is hardcoded to see only the singleton instances of 
<code>NilClass<c/code> and <code>FalseClass</code> as false.

I've requested that <code>NullClass</code> be added to core Ruby in
the past (as of yet to no avail) and though I still would like to
see it included, it may be better still to take an altogether 
object-oriented approach to conditions --in the spirit of Smalltalk.
This would allow us to freely create "false" objects, like the
<code>NullClass</code>, ourselves.

The adoption of such a capability does not require the odd syntax 
used by Smalltalk (<code>ifTrue</code> / <code>ifFalse</code>).
Rather, it can take an approach more akin to Ruby's own <code>case</code>
statements. As with <code>case</code>'s use of <code>#===</code>,
a particular method would be used to evaluate the "truthiness" of
a value. This would apply for all types of conditions: 
<code>while</code>, <code>until</code>, etc. 

To clarify, let's say this special method is simply called #if, then...

--- coderay.ruby

  class IfExample
    attr :if
    def initialize(@if)
      @if = if
    end
  end

  x = IfExample.new(false)

  if x
    "Yes"
  else
    "No"
  end

--- markdown

The result of this condition would be <code>"No"</code>.

While it may not be an earth shattering adjustment, the additional
flexibility opens up some interesting doors. Not only would classes
like the previously mentioned <code>NullClass</code> become possible,
but conditions themselves become <i>dynamically controllable</i>.

For example, it would allow method probes to fully map method
signatures (the Halting Problem not withstanding). This is not 
currently possible in Ruby because a probe cannot pretend to evaluate
to false in order to walk through the false side of a condition.

The idea would require some getting used to --after all a simple 
if-statement would no longer do what we Rubyists presently take 
for granted. But then, that's the nature of progress, is it not?


